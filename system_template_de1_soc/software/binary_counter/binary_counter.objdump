
binary_counter.elf:     file format elf32-littlenios2
binary_counter.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008238

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x000029f0 memsz 0x000029f0 flags r-x
    LOAD off    0x00003a10 vaddr 0x0000aa10 paddr 0x0000acf4 align 2**12
         filesz 0x000002e4 memsz 0x000002e4 flags rw-
    LOAD off    0x00003fd8 vaddr 0x0000afd8 paddr 0x0000afd8 align 2**12
         filesz 0x00000000 memsz 0x00000128 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000218  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000026c8  00008238  00008238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000110  0000a900  0000a900  00003900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e4  0000aa10  0000acf4  00003a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000128  0000afd8  0000afd8  00003fd8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  0000b100  0000b100  00003cf4  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00003cf4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000688  00000000  00000000  00003d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00009ae0  00000000  00000000  000043b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000034bc  00000000  00000000  0000de90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00004353  00000000  00000000  0001134c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00000cf0  00000000  00000000  000156a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000020b4  00000000  00000000  00016390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000194b  00000000  00000000  00018444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000060  00000000  00000000  00019d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000002f8  00000000  00000000  00019df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  0001bd0e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0001bd11  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001bd14  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001bd15  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001bd16  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001bd1a  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001bd1e  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0001bd22  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0001bd2b  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0001bd34  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  0001bd3d  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002b  00000000  00000000  0001bd4f  2**0
                  CONTENTS, READONLY
 29 .jdi          00005099  00000000  00000000  0001bd7a  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003ccf4  00000000  00000000  00020e13  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008238 l    d  .text	00000000 .text
0000a900 l    d  .rodata	00000000 .rodata
0000aa10 l    d  .rwdata	00000000 .rwdata
0000afd8 l    d  .bss	00000000 .bss
0000b100 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../binary_counter_bsp//obj/HAL/src/crt0.o
00008280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 count_binary.c
0000afd8 l     O .bss	00000001 count
00008284 l     F .text	00000024 lcd_init
000082a8 l     F .text	00000058 initial_message
00008300 l     F .text	00000030 count_led
00008330 l     F .text	00000020 count_sevenseg
00008350 l     F .text	0000002c count_lcd
0000837c l     F .text	00000054 count_all
000083d0 l     F .text	00000144 handle_button_press
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00008918 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000aa10 l     O .rwdata	000000e4 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
0000906c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
000091f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00009334 l     F .text	00000034 alt_dev_reg
0000aaf4 l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00009634 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
0000988c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000099f0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00009a1c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00009dcc l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00009f1c l     F .text	0000003c alt_get_errno
00009f58 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000affc g     O .bss	00000004 alt_instruction_exception_handler
00008854 g     F .text	00000018 putchar
00009158 g     F .text	0000006c alt_main
0000886c g     F .text	00000080 _puts_r
0000b000 g     O .bss	00000100 alt_irq
0000acf4 g       *ABS*	00000000 __flash_rwdata_start
00008804 g     F .text	00000048 printf
0000a3b0 g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000001c __reset
0000afdc g     O .bss	00000004 edge_capture
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000afe0 g     O .bss	00000004 errno
0000afe8 g     O .bss	00000004 alt_argv
00012cc8 g       *ABS*	00000000 _gp
000091c4 g     F .text	00000030 usleep
0000ab48 g     O .rwdata	00000180 alt_fd_list
0000884c g     F .text	00000008 _putchar_r
0000a3d4 g     F .text	00000090 alt_find_dev
00009ea0 g     F .text	0000007c alt_io_redirect
000088ec g     F .text	00000010 puts
0000a6b4 g     F .text	00000098 alt_exception_cause_generated_bad_addr
000094b4 g     F .text	000000ec altera_avalon_jtag_uart_read
000087c8 g     F .text	0000003c _printf_r
00008708 g     F .text	00000064 .hidden __udivsi3
0000a624 g     F .text	00000090 alt_icache_flush
0000ace0 g     O .rwdata	00000004 alt_max_fd
0000acc8 g     O .rwdata	00000004 _global_impure_ptr
0000b100 g       *ABS*	00000000 __bss_end
00009ce4 g     F .text	000000e8 alt_iic_isr_register
0000a2a8 g     F .text	00000108 alt_tick
00009c98 g     F .text	0000004c alt_ic_irq_enabled
0000a204 g     F .text	000000a4 alt_alarm_stop
0000aff0 g     O .bss	00000004 alt_irq_active
00008000 g       *ABS*	00000000 __alt_mem_onchip_mem
000080fc g     F .exceptions	000000c8 alt_irq_handler
0000ab20 g     O .rwdata	00000028 alt_dev_null
000099a4 g     F .text	0000004c alt_dcache_flush_all
0000acf4 g       *ABS*	00000000 __ram_rwdata_end
0000acd8 g     O .rwdata	00000008 alt_dev_list
00009230 g     F .text	00000104 write
00008fa0 g     F .text	00000054 _putc_r
0000aa10 g       *ABS*	00000000 __ram_rodata_end
0000876c g     F .text	0000005c .hidden __umodsi3
0000b100 g       *ABS*	00000000 end
000081c4 g     F .exceptions	00000074 alt_instruction_exception_entry
0000d000 g       *ABS*	00000000 __alt_stack_pointer
000096b0 g     F .text	00000084 alt_avalon_timer_sc_init
000095a0 g     F .text	00000094 altera_avalon_jtag_uart_write
00008984 g     F .text	0000050c ___vfprintf_internal_r
0000a79c g     F .text	0000012c __call_exitprocs
00008238 g     F .text	0000004c _start
0000aff4 g     O .bss	00000004 _alt_tick_rate
0000aff8 g     O .bss	00000004 _alt_nticks
000093a4 g     F .text	00000050 alt_sys_init
00009044 g     F .text	00000028 .hidden __mulsi3
0000aa10 g       *ABS*	00000000 __ram_rwdata_start
0000a900 g       *ABS*	00000000 __ram_rodata_start
000093f4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000a56c g     F .text	000000b8 alt_get_fd
00009734 g     F .text	00000158 alt_busy_sleep
0000a76c g     F .text	00000030 memcmp
0000b100 g       *ABS*	00000000 __alt_stack_base
0000a464 g     F .text	00000108 alt_find_file
00009a58 g     F .text	000000a8 alt_dev_llist_insert
00008ea8 g     F .text	000000a8 __sfvwrite_small_dev
0000afd8 g       *ABS*	00000000 __bss_start
00008514 g     F .text	00000100 main
0000afec g     O .bss	00000004 alt_envp
00009454 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000ace4 g     O .rwdata	00000004 alt_errno
00008f50 g     F .text	00000050 putc
00008614 g     F .text	00000080 .hidden __divsi3
0000a900 g       *ABS*	00000000 __flash_rodata_start
00009368 g     F .text	0000003c alt_irq_init
0000a194 g     F .text	00000070 alt_release_fd
00008ff4 g     F .text	00000050 _write_r
0000accc g     O .rwdata	00000004 _impure_ptr
0000afe4 g     O .bss	00000004 alt_argc
00008020 g       .exceptions	00000000 alt_irq_entry
0000acd0 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
00009b34 g     F .text	00000050 alt_ic_isr_register
0000acf4 g       *ABS*	00000000 _edata
0000b100 g       *ABS*	00000000 _end
00008238 g       *ABS*	00000000 __ram_exceptions_end
00009c0c g     F .text	0000008c alt_ic_irq_disable
0000a74c g     F .text	00000020 exit
00008694 g     F .text	00000074 .hidden __modsi3
0000d000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000a8c8 g     F .text	00000038 _exit
000088fc g     F .text	0000001c strlen
0000a034 g     F .text	00000160 open
00009b00 g     F .text	00000034 alt_icache_flush_all
0000ace8 g     O .rwdata	00000004 alt_priority_mask
00009b84 g     F .text	00000088 alt_ic_irq_enable
00008e90 g     F .text	00000018 __vfprintf_internal
0000acec g     O .rwdata	00000008 alt_alarm_list
000098c8 g     F .text	000000dc close
000090d4 g     F .text	00000084 alt_load



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08608e14 	ori	at,at,33336
    jmp r1
    8018:	0800683a 	jmp	at
    801c:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080fc0 	call	80fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000706 	br	80a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    808c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    8094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    8098:	00081c40 	call	81c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    809c:	1000021e 	bne	r2,zero,80a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    80a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    80a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    80a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    80ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80f8:	ef80083a 	eret

000080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80fc:	defff904 	addi	sp,sp,-28
    8100:	dfc00615 	stw	ra,24(sp)
    8104:	df000515 	stw	fp,20(sp)
    8108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    810c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8110:	0005313a 	rdctl	r2,ipending
    8114:	e0bffc15 	stw	r2,-16(fp)

  return active;
    8118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    811c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
    8120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8124:	00800044 	movi	r2,1
    8128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    812c:	e0ffff17 	ldw	r3,-4(fp)
    8130:	e0bffe17 	ldw	r2,-8(fp)
    8134:	1884703a 	and	r2,r3,r2
    8138:	10001126 	beq	r2,zero,8180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    813c:	e0bffd17 	ldw	r2,-12(fp)
    8140:	100690fa 	slli	r3,r2,3
    8144:	00800074 	movhi	r2,1
    8148:	1885883a 	add	r2,r3,r2
    814c:	10ec0017 	ldw	r3,-20480(r2)
    8150:	e0bffd17 	ldw	r2,-12(fp)
    8154:	100890fa 	slli	r4,r2,3
    8158:	00800074 	movhi	r2,1
    815c:	2085883a 	add	r2,r4,r2
    8160:	10ac0117 	ldw	r2,-20476(r2)
    8164:	1009883a 	mov	r4,r2
    8168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    816c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
    8170:	0005313a 	rdctl	r2,ipending
    8174:	e0bffb15 	stw	r2,-20(fp)
  return active;
    8178:	e0bffb17 	ldw	r2,-20(fp)
    817c:	00000706 	br	819c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
    8180:	e0bffe17 	ldw	r2,-8(fp)
    8184:	1085883a 	add	r2,r2,r2
    8188:	e0bffe15 	stw	r2,-8(fp)
      i++;
    818c:	e0bffd17 	ldw	r2,-12(fp)
    8190:	10800044 	addi	r2,r2,1
    8194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
    8198:	003fe406 	br	812c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
    819c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
    81a0:	e0bfff17 	ldw	r2,-4(fp)
    81a4:	103fde1e 	bne	r2,zero,8120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    81a8:	0001883a 	nop
}
    81ac:	0001883a 	nop
    81b0:	e037883a 	mov	sp,fp
    81b4:	dfc00117 	ldw	ra,4(sp)
    81b8:	df000017 	ldw	fp,0(sp)
    81bc:	dec00204 	addi	sp,sp,8
    81c0:	f800283a 	ret

000081c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
    81c4:	defffb04 	addi	sp,sp,-20
    81c8:	dfc00415 	stw	ra,16(sp)
    81cc:	df000315 	stw	fp,12(sp)
    81d0:	df000304 	addi	fp,sp,12
    81d4:	e13ffd15 	stw	r4,-12(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
    81d8:	000531fa 	rdctl	r2,exception
    81dc:	e0bfff15 	stw	r2,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
    81e0:	e0bfff17 	ldw	r2,-4(fp)
    81e4:	1004d0ba 	srli	r2,r2,2
    81e8:	108007cc 	andi	r2,r2,31
    81ec:	e0bfff15 	stw	r2,-4(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
    81f0:	0005333a 	rdctl	r2,badaddr
    81f4:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    81f8:	d0a0cd17 	ldw	r2,-31948(gp)
    81fc:	10000726 	beq	r2,zero,821c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    8200:	d0a0cd17 	ldw	r2,-31948(gp)
    8204:	e0ffff17 	ldw	r3,-4(fp)
    8208:	e1bffe17 	ldw	r6,-8(fp)
    820c:	e17ffd17 	ldw	r5,-12(fp)
    8210:	1809883a 	mov	r4,r3
    8214:	103ee83a 	callr	r2
    8218:	00000206 	br	8224 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    821c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
    8220:	0005883a 	mov	r2,zero
}
    8224:	e037883a 	mov	sp,fp
    8228:	dfc00117 	ldw	ra,4(sp)
    822c:	df000017 	ldw	fp,0(sp)
    8230:	dec00204 	addi	sp,sp,8
    8234:	f800283a 	ret

Disassembly of section .text:

00008238 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    8238:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
    823c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    8240:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
    8244:	00bffd16 	blt	zero,r2,823c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8248:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    824c:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    8250:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    8254:	d68b3214 	ori	gp,gp,11464
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8258:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    825c:	10abf614 	ori	r2,r2,45016

    movhi r3, %hi(__bss_end)
    8260:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    8264:	18ec4014 	ori	r3,r3,45312

    beq r2, r3, 1f
    8268:	10c00326 	beq	r2,r3,8278 <_start+0x40>

0:
    stw zero, (r2)
    826c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    8274:	10fffd36 	bltu	r2,r3,826c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8278:	00090d40 	call	90d4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    827c:	00091580 	call	9158 <alt_main>

00008280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8280:	003fff06 	br	8280 <alt_after_alt_main>

00008284 <lcd_init>:
 * count_<device>() -- Implements the counting on the respective device.
 * handle_button_press() -- Determines what to do when one of the buttons
 * is pressed.
 */
static void lcd_init( FILE *lcd )
{
    8284:	defffe04 	addi	sp,sp,-8
    8288:	df000115 	stw	fp,4(sp)
    828c:	df000104 	addi	fp,sp,4
    8290:	e13fff15 	stw	r4,-4(fp)
    /* If the LCD Display exists, write a simple message on the first line. */
    LCD_PRINTF(lcd, "%c%s Counting will be displayed below...", ESC,
               ESC_TOP_LEFT);
}
    8294:	0001883a 	nop
    8298:	e037883a 	mov	sp,fp
    829c:	df000017 	ldw	fp,0(sp)
    82a0:	dec00104 	addi	sp,sp,4
    82a4:	f800283a 	ret

000082a8 <initial_message>:

static void initial_message()
{
    82a8:	defffe04 	addi	sp,sp,-8
    82ac:	dfc00115 	stw	ra,4(sp)
    82b0:	df000015 	stw	fp,0(sp)
    82b4:	d839883a 	mov	fp,sp
    printf("\n\n**************************\n");
    82b8:	01000074 	movhi	r4,1
    82bc:	212a4004 	addi	r4,r4,-22272
    82c0:	00088ec0 	call	88ec <puts>
    printf("* Hello from Nios II!    *\n");
    82c4:	01000074 	movhi	r4,1
    82c8:	212a4804 	addi	r4,r4,-22240
    82cc:	00088ec0 	call	88ec <puts>
    printf("* Counting from 00 to ff *\n");
    82d0:	01000074 	movhi	r4,1
    82d4:	212a4f04 	addi	r4,r4,-22212
    82d8:	00088ec0 	call	88ec <puts>
    printf("**************************\n");
    82dc:	01000074 	movhi	r4,1
    82e0:	212a5604 	addi	r4,r4,-22184
    82e4:	00088ec0 	call	88ec <puts>
}
    82e8:	0001883a 	nop
    82ec:	e037883a 	mov	sp,fp
    82f0:	dfc00117 	ldw	ra,4(sp)
    82f4:	df000017 	ldw	fp,0(sp)
    82f8:	dec00204 	addi	sp,sp,8
    82fc:	f800283a 	ret

00008300 <count_led>:
 * Illuminate LEDs with the value of 'count', if they
 * exist in the system
 */

static void count_led()
{
    8300:	deffff04 	addi	sp,sp,-4
    8304:	df000015 	stw	fp,0(sp)
    8308:	d839883a 	mov	fp,sp
#ifdef LED_PIO_BASE
    IOWR_ALTERA_AVALON_PIO_DATA(
    830c:	d0a0c403 	ldbu	r2,-31984(gp)
    8310:	10c03fcc 	andi	r3,r2,255
    8314:	00800074 	movhi	r2,1
    8318:	10c40835 	stwio	r3,4128(r2)
        LED_PIO_BASE,
        count
        );
#endif
}
    831c:	0001883a 	nop
    8320:	e037883a 	mov	sp,fp
    8324:	df000017 	ldw	fp,0(sp)
    8328:	dec00104 	addi	sp,sp,4
    832c:	f800283a 	ret

00008330 <count_sevenseg>:
 * 
 * Display value of 'count' on the Seven Segment Display
 */

static void count_sevenseg()
{
    8330:	deffff04 	addi	sp,sp,-4
    8334:	df000015 	stw	fp,0(sp)
    8338:	d839883a 	mov	fp,sp
#ifdef SEVEN_SEG_PIO_BASE
    sevenseg_set_hex(count);
#endif
}
    833c:	0001883a 	nop
    8340:	e037883a 	mov	sp,fp
    8344:	df000017 	ldw	fp,0(sp)
    8348:	dec00104 	addi	sp,sp,4
    834c:	f800283a 	ret

00008350 <count_lcd>:
 * is treated as an I/O device (i.e.: using fprintf).  You
 * can read more about HAL drivers <link/reference here>.
 */

static void count_lcd( void* arg )
{
    8350:	defffd04 	addi	sp,sp,-12
    8354:	df000215 	stw	fp,8(sp)
    8358:	df000204 	addi	fp,sp,8
    835c:	e13ffe15 	stw	r4,-8(fp)
    FILE* __attribute__ ((unused))  lcd;  /* Attribute suppresses "unused variable" warning. */
    lcd = (FILE*) arg;
    8360:	e0bffe17 	ldw	r2,-8(fp)
    8364:	e0bfff15 	stw	r2,-4(fp)
    LCD_PRINTF(lcd, "%c%s 0x%x\n", ESC, ESC_COL2_INDENT5, count);
}
    8368:	0001883a 	nop
    836c:	e037883a 	mov	sp,fp
    8370:	df000017 	ldw	fp,0(sp)
    8374:	dec00104 	addi	sp,sp,4
    8378:	f800283a 	ret

0000837c <count_all>:

/* count_all merely combines all three peripherals counting */

static void count_all( void* arg )
{
    837c:	defffd04 	addi	sp,sp,-12
    8380:	dfc00215 	stw	ra,8(sp)
    8384:	df000115 	stw	fp,4(sp)
    8388:	df000104 	addi	fp,sp,4
    838c:	e13fff15 	stw	r4,-4(fp)
    count_led();
    8390:	00083000 	call	8300 <count_led>
    count_sevenseg();
    8394:	00083300 	call	8330 <count_sevenseg>
    count_lcd( arg );
    8398:	e13fff17 	ldw	r4,-4(fp)
    839c:	00083500 	call	8350 <count_lcd>
    printf("%02x,  ", count);
    83a0:	d0a0c403 	ldbu	r2,-31984(gp)
    83a4:	10803fcc 	andi	r2,r2,255
    83a8:	100b883a 	mov	r5,r2
    83ac:	01000074 	movhi	r4,1
    83b0:	212a5d04 	addi	r4,r4,-22156
    83b4:	00088040 	call	8804 <printf>
}
    83b8:	0001883a 	nop
    83bc:	e037883a 	mov	sp,fp
    83c0:	dfc00117 	ldw	ra,4(sp)
    83c4:	df000017 	ldw	fp,0(sp)
    83c8:	dec00204 	addi	sp,sp,8
    83cc:	f800283a 	ret

000083d0 <handle_button_press>:
  

static void handle_button_press(alt_u8 type, FILE *lcd)
{
    83d0:	defffc04 	addi	sp,sp,-16
    83d4:	dfc00315 	stw	ra,12(sp)
    83d8:	df000215 	stw	fp,8(sp)
    83dc:	df000204 	addi	fp,sp,8
    83e0:	2005883a 	mov	r2,r4
    83e4:	e17ffe15 	stw	r5,-8(fp)
    83e8:	e0bfff05 	stb	r2,-4(fp)
    /* Button press actions while counting. */
    if (type == 'c')
    83ec:	e0bfff03 	ldbu	r2,-4(fp)
    83f0:	108018d8 	cmpnei	r2,r2,99
    83f4:	10001b1e 	bne	r2,zero,8464 <handle_button_press+0x94>
    {
        switch (edge_capture) 
    83f8:	d0a0c517 	ldw	r2,-31980(gp)
    83fc:	10c00220 	cmpeqi	r3,r2,8
    8400:	1800121e 	bne	r3,zero,844c <handle_button_press+0x7c>
    8404:	10c00248 	cmpgei	r3,r2,9
    8408:	1800131e 	bne	r3,zero,8458 <handle_button_press+0x88>
    840c:	10c00120 	cmpeqi	r3,r2,4
    8410:	18000b1e 	bne	r3,zero,8440 <handle_button_press+0x70>
    8414:	10c00148 	cmpgei	r3,r2,5
    8418:	18000f1e 	bne	r3,zero,8458 <handle_button_press+0x88>
    841c:	10c00060 	cmpeqi	r3,r2,1
    8420:	1800031e 	bne	r3,zero,8430 <handle_button_press+0x60>
    8424:	108000a0 	cmpeqi	r2,r2,2
    8428:	1000031e 	bne	r2,zero,8438 <handle_button_press+0x68>
    842c:	00000a06 	br	8458 <handle_button_press+0x88>
        {
            /* Button 1:  Output counting to LED only. */
        case 0x1:
            count_led();
    8430:	00083000 	call	8300 <count_led>
            break;
    8434:	00003106 	br	84fc <handle_button_press+0x12c>
            /* Button 2:  Output counting to SEVEN SEG only. */
        case 0x2:
            count_sevenseg();
    8438:	00083300 	call	8330 <count_sevenseg>
            break;
    843c:	00002f06 	br	84fc <handle_button_press+0x12c>
            /* Button 3:  Output counting to D only. */
        case 0x4:
            count_lcd( lcd );
    8440:	e13ffe17 	ldw	r4,-8(fp)
    8444:	00083500 	call	8350 <count_lcd>
            break;
    8448:	00002c06 	br	84fc <handle_button_press+0x12c>
            /* Button 4:  Output counting to LED, SEVEN_SEG, and D. */ 
        case 0x8:
            count_all( lcd );
    844c:	e13ffe17 	ldw	r4,-8(fp)
    8450:	000837c0 	call	837c <count_all>
            break;
    8454:	00002906 	br	84fc <handle_button_press+0x12c>
            /* If value ends up being something different (shouldn't) do
               same as 8. */
        default:
            count_all( lcd );
    8458:	e13ffe17 	ldw	r4,-8(fp)
    845c:	000837c0 	call	837c <count_all>
            break;
    8460:	00002606 	br	84fc <handle_button_press+0x12c>
        }
    }
    /* If 'type' is anything else, assume we're "waiting"...*/
    else
    {
        switch (edge_capture)
    8464:	d0a0c517 	ldw	r2,-31980(gp)
    8468:	10c00220 	cmpeqi	r3,r2,8
    846c:	18001a1e 	bne	r3,zero,84d8 <handle_button_press+0x108>
    8470:	10c00248 	cmpgei	r3,r2,9
    8474:	18001d1e 	bne	r3,zero,84ec <handle_button_press+0x11c>
    8478:	10c00120 	cmpeqi	r3,r2,4
    847c:	1800111e 	bne	r3,zero,84c4 <handle_button_press+0xf4>
    8480:	10c00148 	cmpgei	r3,r2,5
    8484:	1800191e 	bne	r3,zero,84ec <handle_button_press+0x11c>
    8488:	10c00060 	cmpeqi	r3,r2,1
    848c:	1800031e 	bne	r3,zero,849c <handle_button_press+0xcc>
    8490:	108000a0 	cmpeqi	r2,r2,2
    8494:	1000061e 	bne	r2,zero,84b0 <handle_button_press+0xe0>
    8498:	00001406 	br	84ec <handle_button_press+0x11c>
        {
        case 0x1:
            printf( "Button 1\n");
    849c:	01000074 	movhi	r4,1
    84a0:	212a5f04 	addi	r4,r4,-22148
    84a4:	00088ec0 	call	88ec <puts>
            edge_capture = 0;
    84a8:	d020c515 	stw	zero,-31980(gp)
            break;
    84ac:	00001306 	br	84fc <handle_button_press+0x12c>
        case 0x2:
            printf( "Button 2\n");
    84b0:	01000074 	movhi	r4,1
    84b4:	212a6204 	addi	r4,r4,-22136
    84b8:	00088ec0 	call	88ec <puts>
            edge_capture = 0;
    84bc:	d020c515 	stw	zero,-31980(gp)
            break;
    84c0:	00000e06 	br	84fc <handle_button_press+0x12c>
        case 0x4:
            printf( "Button 3\n");
    84c4:	01000074 	movhi	r4,1
    84c8:	212a6504 	addi	r4,r4,-22124
    84cc:	00088ec0 	call	88ec <puts>
            edge_capture = 0;
    84d0:	d020c515 	stw	zero,-31980(gp)
            break;
    84d4:	00000906 	br	84fc <handle_button_press+0x12c>
        case 0x8:
            printf( "Button 4\n");
    84d8:	01000074 	movhi	r4,1
    84dc:	212a6804 	addi	r4,r4,-22112
    84e0:	00088ec0 	call	88ec <puts>
            edge_capture = 0;
    84e4:	d020c515 	stw	zero,-31980(gp)
            break;
    84e8:	00000406 	br	84fc <handle_button_press+0x12c>
        default:
            printf( "Button press UNKNOWN!!\n");
    84ec:	01000074 	movhi	r4,1
    84f0:	212a6b04 	addi	r4,r4,-22100
    84f4:	00088ec0 	call	88ec <puts>
        }
    }
}
    84f8:	0001883a 	nop
    84fc:	0001883a 	nop
    8500:	e037883a 	mov	sp,fp
    8504:	dfc00117 	ldw	ra,4(sp)
    8508:	df000017 	ldw	fp,0(sp)
    850c:	dec00204 	addi	sp,sp,8
    8510:	f800283a 	ret

00008514 <main>:
 * NOTE:  References to Buttons 1-4 correspond to SW0-SW3 on the Development   *
 * Board.                                                                      *
 ******************************************************************************/

int main(void)
{ 
    8514:	defffb04 	addi	sp,sp,-20
    8518:	dfc00415 	stw	ra,16(sp)
    851c:	df000315 	stw	fp,12(sp)
    8520:	df000304 	addi	fp,sp,12
    int i;
    int  __attribute__ ((unused))  wait_time;  /* Attribute suppresses "var set but not used" warning. */
    FILE * lcd;

    count = 0;
    8524:	d020c405 	stb	zero,-31984(gp)

    /* Initialize the LCD, if there is one.
     */
    lcd = LCD_OPEN();
    8528:	e03ffe15 	stw	zero,-8(fp)
    if(lcd != NULL) {lcd_init( lcd );}
    852c:	e0bffe17 	ldw	r2,-8(fp)
    8530:	10000226 	beq	r2,zero,853c <main+0x28>
    8534:	e13ffe17 	ldw	r4,-8(fp)
    8538:	00082840 	call	8284 <lcd_init>
    init_button_pio();
#endif

/* Initial message to output. */

    initial_message();
    853c:	00082a80 	call	82a8 <initial_message>

/* Continue 0-ff counting loop. */

    while( 1 ) 
    {
        usleep(100000);
    8540:	010000b4 	movhi	r4,2
    8544:	2121a804 	addi	r4,r4,-31072
    8548:	00091c40 	call	91c4 <usleep>
        if (edge_capture != 0)
    854c:	d0a0c517 	ldw	r2,-31980(gp)
    8550:	10000426 	beq	r2,zero,8564 <main+0x50>
        {
            /* Handle button presses while counting... */
            handle_button_press('c', lcd);
    8554:	e17ffe17 	ldw	r5,-8(fp)
    8558:	010018c4 	movi	r4,99
    855c:	00083d00 	call	83d0 <handle_button_press>
    8560:	00000206 	br	856c <main+0x58>
        }
        /* If no button presses, try to output counting to all. */
        else
        {
            count_all( lcd );
    8564:	e13ffe17 	ldw	r4,-8(fp)
    8568:	000837c0 	call	837c <count_all>
        }
        /*
         * If done counting, wait about 7 seconds...
         * detect button presses while waiting.
         */
        if( count == 0xff )
    856c:	d0a0c403 	ldbu	r2,-31984(gp)
    8570:	10803fcc 	andi	r2,r2,255
    8574:	10803fd8 	cmpnei	r2,r2,255
    8578:	1000221e 	bne	r2,zero,8604 <main+0xf0>
        {
            LCD_PRINTF(lcd, "%c%s %c%s %c%s Waiting...\n", ESC, ESC_TOP_LEFT,
                       ESC, ESC_CLEAR, ESC, ESC_COL1_INDENT5);
            printf("\nWaiting...");
    857c:	01000074 	movhi	r4,1
    8580:	212a7104 	addi	r4,r4,-22076
    8584:	00088040 	call	8804 <printf>
            edge_capture = 0; /* Reset to 0 during wait/pause period. */
    8588:	d020c515 	stw	zero,-31980(gp)

            /* Clear the 2nd. line of the LCD screen. */
            LCD_PRINTF(lcd, "%c%s, %c%s", ESC, ESC_COL2_INDENT5, ESC,
                       ESC_CLEAR);
            wait_time = 0;
    858c:	e03ffd15 	stw	zero,-12(fp)
            for (i = 0; i<70; ++i)
    8590:	e03fff15 	stw	zero,-4(fp)
    8594:	00001506 	br	85ec <main+0xd8>
            {
                printf(".");
    8598:	01000b84 	movi	r4,46
    859c:	00088540 	call	8854 <putchar>
                wait_time = i/10;
    85a0:	e0bfff17 	ldw	r2,-4(fp)
    85a4:	01400284 	movi	r5,10
    85a8:	1009883a 	mov	r4,r2
    85ac:	00086140 	call	8614 <__divsi3>
    85b0:	e0bffd15 	stw	r2,-12(fp)
                LCD_PRINTF(lcd, "%c%s %ds\n", ESC, ESC_COL2_INDENT5,
                    wait_time+1);

                if (edge_capture != 0) 
    85b4:	d0a0c517 	ldw	r2,-31980(gp)
    85b8:	10000626 	beq	r2,zero,85d4 <main+0xc0>
                {
                    printf( "\nYou pushed:  " );
    85bc:	01000074 	movhi	r4,1
    85c0:	212a7404 	addi	r4,r4,-22064
    85c4:	00088040 	call	8804 <printf>
                    handle_button_press('w', lcd);
    85c8:	e17ffe17 	ldw	r5,-8(fp)
    85cc:	01001dc4 	movi	r4,119
    85d0:	00083d00 	call	83d0 <handle_button_press>
                }
                usleep(100000); /* Sleep for 0.1s. */
    85d4:	010000b4 	movhi	r4,2
    85d8:	2121a804 	addi	r4,r4,-31072
    85dc:	00091c40 	call	91c4 <usleep>
            for (i = 0; i<70; ++i)
    85e0:	e0bfff17 	ldw	r2,-4(fp)
    85e4:	10800044 	addi	r2,r2,1
    85e8:	e0bfff15 	stw	r2,-4(fp)
    85ec:	e0bfff17 	ldw	r2,-4(fp)
    85f0:	10801190 	cmplti	r2,r2,70
    85f4:	103fe81e 	bne	r2,zero,8598 <main+0x84>
            }
            /*  Output the "loop start" messages before looping, again.
             */
            initial_message();
    85f8:	00082a80 	call	82a8 <initial_message>
            lcd_init( lcd );
    85fc:	e13ffe17 	ldw	r4,-8(fp)
    8600:	00082840 	call	8284 <lcd_init>
        }
        count++;
    8604:	d0a0c403 	ldbu	r2,-31984(gp)
    8608:	10800044 	addi	r2,r2,1
    860c:	d0a0c405 	stb	r2,-31984(gp)
        usleep(100000);
    8610:	003fcb06 	br	8540 <main+0x2c>

00008614 <__divsi3>:
    8614:	20001a16 	blt	r4,zero,8680 <__divsi3+0x6c>
    8618:	000f883a 	mov	r7,zero
    861c:	2800020e 	bge	r5,zero,8628 <__divsi3+0x14>
    8620:	014bc83a 	sub	r5,zero,r5
    8624:	39c0005c 	xori	r7,r7,1
    8628:	200d883a 	mov	r6,r4
    862c:	00c00044 	movi	r3,1
    8630:	2900092e 	bgeu	r5,r4,8658 <__divsi3+0x44>
    8634:	00800804 	movi	r2,32
    8638:	00c00044 	movi	r3,1
    863c:	00000106 	br	8644 <__divsi3+0x30>
    8640:	10001226 	beq	r2,zero,868c <__divsi3+0x78>
    8644:	294b883a 	add	r5,r5,r5
    8648:	10bfffc4 	addi	r2,r2,-1
    864c:	18c7883a 	add	r3,r3,r3
    8650:	293ffb36 	bltu	r5,r4,8640 <__divsi3+0x2c>
    8654:	18000d26 	beq	r3,zero,868c <__divsi3+0x78>
    8658:	0005883a 	mov	r2,zero
    865c:	31400236 	bltu	r6,r5,8668 <__divsi3+0x54>
    8660:	314dc83a 	sub	r6,r6,r5
    8664:	10c4b03a 	or	r2,r2,r3
    8668:	1806d07a 	srli	r3,r3,1
    866c:	280ad07a 	srli	r5,r5,1
    8670:	183ffa1e 	bne	r3,zero,865c <__divsi3+0x48>
    8674:	38000126 	beq	r7,zero,867c <__divsi3+0x68>
    8678:	0085c83a 	sub	r2,zero,r2
    867c:	f800283a 	ret
    8680:	0109c83a 	sub	r4,zero,r4
    8684:	01c00044 	movi	r7,1
    8688:	003fe406 	br	861c <__divsi3+0x8>
    868c:	0005883a 	mov	r2,zero
    8690:	003ff806 	br	8674 <__divsi3+0x60>

00008694 <__modsi3>:
    8694:	20001916 	blt	r4,zero,86fc <__modsi3+0x68>
    8698:	000f883a 	mov	r7,zero
    869c:	2005883a 	mov	r2,r4
    86a0:	2800010e 	bge	r5,zero,86a8 <__modsi3+0x14>
    86a4:	014bc83a 	sub	r5,zero,r5
    86a8:	00c00044 	movi	r3,1
    86ac:	2900092e 	bgeu	r5,r4,86d4 <__modsi3+0x40>
    86b0:	01800804 	movi	r6,32
    86b4:	00c00044 	movi	r3,1
    86b8:	00000106 	br	86c0 <__modsi3+0x2c>
    86bc:	30000d26 	beq	r6,zero,86f4 <__modsi3+0x60>
    86c0:	294b883a 	add	r5,r5,r5
    86c4:	31bfffc4 	addi	r6,r6,-1
    86c8:	18c7883a 	add	r3,r3,r3
    86cc:	293ffb36 	bltu	r5,r4,86bc <__modsi3+0x28>
    86d0:	18000826 	beq	r3,zero,86f4 <__modsi3+0x60>
    86d4:	1806d07a 	srli	r3,r3,1
    86d8:	11400136 	bltu	r2,r5,86e0 <__modsi3+0x4c>
    86dc:	1145c83a 	sub	r2,r2,r5
    86e0:	280ad07a 	srli	r5,r5,1
    86e4:	183ffb1e 	bne	r3,zero,86d4 <__modsi3+0x40>
    86e8:	38000126 	beq	r7,zero,86f0 <__modsi3+0x5c>
    86ec:	0085c83a 	sub	r2,zero,r2
    86f0:	f800283a 	ret
    86f4:	2005883a 	mov	r2,r4
    86f8:	003ffb06 	br	86e8 <__modsi3+0x54>
    86fc:	0109c83a 	sub	r4,zero,r4
    8700:	01c00044 	movi	r7,1
    8704:	003fe506 	br	869c <__modsi3+0x8>

00008708 <__udivsi3>:
    8708:	200d883a 	mov	r6,r4
    870c:	2900152e 	bgeu	r5,r4,8764 <__udivsi3+0x5c>
    8710:	28001416 	blt	r5,zero,8764 <__udivsi3+0x5c>
    8714:	00800804 	movi	r2,32
    8718:	00c00044 	movi	r3,1
    871c:	00000206 	br	8728 <__udivsi3+0x20>
    8720:	10000e26 	beq	r2,zero,875c <__udivsi3+0x54>
    8724:	28000516 	blt	r5,zero,873c <__udivsi3+0x34>
    8728:	294b883a 	add	r5,r5,r5
    872c:	10bfffc4 	addi	r2,r2,-1
    8730:	18c7883a 	add	r3,r3,r3
    8734:	293ffa36 	bltu	r5,r4,8720 <__udivsi3+0x18>
    8738:	18000826 	beq	r3,zero,875c <__udivsi3+0x54>
    873c:	0005883a 	mov	r2,zero
    8740:	31400236 	bltu	r6,r5,874c <__udivsi3+0x44>
    8744:	314dc83a 	sub	r6,r6,r5
    8748:	10c4b03a 	or	r2,r2,r3
    874c:	1806d07a 	srli	r3,r3,1
    8750:	280ad07a 	srli	r5,r5,1
    8754:	183ffa1e 	bne	r3,zero,8740 <__udivsi3+0x38>
    8758:	f800283a 	ret
    875c:	0005883a 	mov	r2,zero
    8760:	f800283a 	ret
    8764:	00c00044 	movi	r3,1
    8768:	003ff406 	br	873c <__udivsi3+0x34>

0000876c <__umodsi3>:
    876c:	2005883a 	mov	r2,r4
    8770:	2900132e 	bgeu	r5,r4,87c0 <__umodsi3+0x54>
    8774:	28001216 	blt	r5,zero,87c0 <__umodsi3+0x54>
    8778:	01800804 	movi	r6,32
    877c:	00c00044 	movi	r3,1
    8780:	00000206 	br	878c <__umodsi3+0x20>
    8784:	30000c26 	beq	r6,zero,87b8 <__umodsi3+0x4c>
    8788:	28000516 	blt	r5,zero,87a0 <__umodsi3+0x34>
    878c:	294b883a 	add	r5,r5,r5
    8790:	31bfffc4 	addi	r6,r6,-1
    8794:	18c7883a 	add	r3,r3,r3
    8798:	293ffa36 	bltu	r5,r4,8784 <__umodsi3+0x18>
    879c:	18000626 	beq	r3,zero,87b8 <__umodsi3+0x4c>
    87a0:	1806d07a 	srli	r3,r3,1
    87a4:	11400136 	bltu	r2,r5,87ac <__umodsi3+0x40>
    87a8:	1145c83a 	sub	r2,r2,r5
    87ac:	280ad07a 	srli	r5,r5,1
    87b0:	183ffb1e 	bne	r3,zero,87a0 <__umodsi3+0x34>
    87b4:	f800283a 	ret
    87b8:	2005883a 	mov	r2,r4
    87bc:	f800283a 	ret
    87c0:	00c00044 	movi	r3,1
    87c4:	003ff606 	br	87a0 <__umodsi3+0x34>

000087c8 <_printf_r>:
    87c8:	defffd04 	addi	sp,sp,-12
    87cc:	dfc00015 	stw	ra,0(sp)
    87d0:	d9800115 	stw	r6,4(sp)
    87d4:	d9c00215 	stw	r7,8(sp)
    87d8:	21800217 	ldw	r6,8(r4)
    87dc:	00c00074 	movhi	r3,1
    87e0:	18e3aa04 	addi	r3,r3,-29016
    87e4:	30c00115 	stw	r3,4(r6)
    87e8:	280d883a 	mov	r6,r5
    87ec:	21400217 	ldw	r5,8(r4)
    87f0:	d9c00104 	addi	r7,sp,4
    87f4:	00089840 	call	8984 <___vfprintf_internal_r>
    87f8:	dfc00017 	ldw	ra,0(sp)
    87fc:	dec00304 	addi	sp,sp,12
    8800:	f800283a 	ret

00008804 <printf>:
    8804:	defffc04 	addi	sp,sp,-16
    8808:	dfc00015 	stw	ra,0(sp)
    880c:	d9400115 	stw	r5,4(sp)
    8810:	d9800215 	stw	r6,8(sp)
    8814:	d9c00315 	stw	r7,12(sp)
    8818:	00800074 	movhi	r2,1
    881c:	10eb3317 	ldw	r3,-21300(r2)
    8820:	00800074 	movhi	r2,1
    8824:	10a3aa04 	addi	r2,r2,-29016
    8828:	19400217 	ldw	r5,8(r3)
    882c:	d9800104 	addi	r6,sp,4
    8830:	28800115 	stw	r2,4(r5)
    8834:	200b883a 	mov	r5,r4
    8838:	19000217 	ldw	r4,8(r3)
    883c:	0008e900 	call	8e90 <__vfprintf_internal>
    8840:	dfc00017 	ldw	ra,0(sp)
    8844:	dec00404 	addi	sp,sp,16
    8848:	f800283a 	ret

0000884c <_putchar_r>:
    884c:	21800217 	ldw	r6,8(r4)
    8850:	0008fa01 	jmpi	8fa0 <_putc_r>

00008854 <putchar>:
    8854:	00800074 	movhi	r2,1
    8858:	10ab3317 	ldw	r2,-21300(r2)
    885c:	200b883a 	mov	r5,r4
    8860:	11800217 	ldw	r6,8(r2)
    8864:	1009883a 	mov	r4,r2
    8868:	0008fa01 	jmpi	8fa0 <_putc_r>

0000886c <_puts_r>:
    886c:	defffd04 	addi	sp,sp,-12
    8870:	dc000015 	stw	r16,0(sp)
    8874:	2021883a 	mov	r16,r4
    8878:	2809883a 	mov	r4,r5
    887c:	dfc00215 	stw	ra,8(sp)
    8880:	dc400115 	stw	r17,4(sp)
    8884:	2823883a 	mov	r17,r5
    8888:	00088fc0 	call	88fc <strlen>
    888c:	81400217 	ldw	r5,8(r16)
    8890:	00c00074 	movhi	r3,1
    8894:	18e3aa04 	addi	r3,r3,-29016
    8898:	28c00115 	stw	r3,4(r5)
    889c:	100f883a 	mov	r7,r2
    88a0:	880d883a 	mov	r6,r17
    88a4:	8009883a 	mov	r4,r16
    88a8:	0008ea80 	call	8ea8 <__sfvwrite_small_dev>
    88ac:	10ffffe0 	cmpeqi	r3,r2,-1
    88b0:	1800091e 	bne	r3,zero,88d8 <_puts_r+0x6c>
    88b4:	81400217 	ldw	r5,8(r16)
    88b8:	01800074 	movhi	r6,1
    88bc:	01c00044 	movi	r7,1
    88c0:	28800117 	ldw	r2,4(r5)
    88c4:	31aa7804 	addi	r6,r6,-22048
    88c8:	8009883a 	mov	r4,r16
    88cc:	103ee83a 	callr	r2
    88d0:	10bfffe0 	cmpeqi	r2,r2,-1
    88d4:	0085c83a 	sub	r2,zero,r2
    88d8:	dfc00217 	ldw	ra,8(sp)
    88dc:	dc400117 	ldw	r17,4(sp)
    88e0:	dc000017 	ldw	r16,0(sp)
    88e4:	dec00304 	addi	sp,sp,12
    88e8:	f800283a 	ret

000088ec <puts>:
    88ec:	00800074 	movhi	r2,1
    88f0:	200b883a 	mov	r5,r4
    88f4:	112b3317 	ldw	r4,-21300(r2)
    88f8:	000886c1 	jmpi	886c <_puts_r>

000088fc <strlen>:
    88fc:	2005883a 	mov	r2,r4
    8900:	10c00007 	ldb	r3,0(r2)
    8904:	1800021e 	bne	r3,zero,8910 <strlen+0x14>
    8908:	1105c83a 	sub	r2,r2,r4
    890c:	f800283a 	ret
    8910:	10800044 	addi	r2,r2,1
    8914:	003ffa06 	br	8900 <strlen+0x4>

00008918 <print_repeat>:
    8918:	defffb04 	addi	sp,sp,-20
    891c:	dc800315 	stw	r18,12(sp)
    8920:	dc400215 	stw	r17,8(sp)
    8924:	dc000115 	stw	r16,4(sp)
    8928:	dfc00415 	stw	ra,16(sp)
    892c:	2025883a 	mov	r18,r4
    8930:	2823883a 	mov	r17,r5
    8934:	d9800005 	stb	r6,0(sp)
    8938:	3821883a 	mov	r16,r7
    893c:	04000716 	blt	zero,r16,895c <print_repeat+0x44>
    8940:	0005883a 	mov	r2,zero
    8944:	dfc00417 	ldw	ra,16(sp)
    8948:	dc800317 	ldw	r18,12(sp)
    894c:	dc400217 	ldw	r17,8(sp)
    8950:	dc000117 	ldw	r16,4(sp)
    8954:	dec00504 	addi	sp,sp,20
    8958:	f800283a 	ret
    895c:	88800117 	ldw	r2,4(r17)
    8960:	01c00044 	movi	r7,1
    8964:	d80d883a 	mov	r6,sp
    8968:	880b883a 	mov	r5,r17
    896c:	9009883a 	mov	r4,r18
    8970:	103ee83a 	callr	r2
    8974:	843fffc4 	addi	r16,r16,-1
    8978:	103ff026 	beq	r2,zero,893c <print_repeat+0x24>
    897c:	00bfffc4 	movi	r2,-1
    8980:	003ff006 	br	8944 <print_repeat+0x2c>

00008984 <___vfprintf_internal_r>:
    8984:	deffe604 	addi	sp,sp,-104
    8988:	df001815 	stw	fp,96(sp)
    898c:	ddc01715 	stw	r23,92(sp)
    8990:	dd801615 	stw	r22,88(sp)
    8994:	dd001415 	stw	r20,80(sp)
    8998:	dcc01315 	stw	r19,76(sp)
    899c:	dc801215 	stw	r18,72(sp)
    89a0:	dc401115 	stw	r17,68(sp)
    89a4:	dc001015 	stw	r16,64(sp)
    89a8:	dfc01915 	stw	ra,100(sp)
    89ac:	dd401515 	stw	r21,84(sp)
    89b0:	2021883a 	mov	r16,r4
    89b4:	282f883a 	mov	r23,r5
    89b8:	d9800515 	stw	r6,20(sp)
    89bc:	3839883a 	mov	fp,r7
    89c0:	002d883a 	mov	r22,zero
    89c4:	d8000215 	stw	zero,8(sp)
    89c8:	0027883a 	mov	r19,zero
    89cc:	0029883a 	mov	r20,zero
    89d0:	0025883a 	mov	r18,zero
    89d4:	0023883a 	mov	r17,zero
    89d8:	d8000115 	stw	zero,4(sp)
    89dc:	d8000015 	stw	zero,0(sp)
    89e0:	0005883a 	mov	r2,zero
    89e4:	00000206 	br	89f0 <___vfprintf_internal_r+0x6c>
    89e8:	114000e0 	cmpeqi	r5,r2,3
    89ec:	28003f1e 	bne	r5,zero,8aec <___vfprintf_internal_r+0x168>
    89f0:	d8c00517 	ldw	r3,20(sp)
    89f4:	19000003 	ldbu	r4,0(r3)
    89f8:	18c00044 	addi	r3,r3,1
    89fc:	d8c00515 	stw	r3,20(sp)
    8a00:	21803fcc 	andi	r6,r4,255
    8a04:	3180201c 	xori	r6,r6,128
    8a08:	31bfe004 	addi	r6,r6,-128
    8a0c:	30001426 	beq	r6,zero,8a60 <___vfprintf_internal_r+0xdc>
    8a10:	114000a0 	cmpeqi	r5,r2,2
    8a14:	2800231e 	bne	r5,zero,8aa4 <___vfprintf_internal_r+0x120>
    8a18:	114000c8 	cmpgei	r5,r2,3
    8a1c:	283ff21e 	bne	r5,zero,89e8 <___vfprintf_internal_r+0x64>
    8a20:	10000426 	beq	r2,zero,8a34 <___vfprintf_internal_r+0xb0>
    8a24:	10800060 	cmpeqi	r2,r2,1
    8a28:	10001a1e 	bne	r2,zero,8a94 <___vfprintf_internal_r+0x110>
    8a2c:	00800084 	movi	r2,2
    8a30:	003fef06 	br	89f0 <___vfprintf_internal_r+0x6c>
    8a34:	31800960 	cmpeqi	r6,r6,37
    8a38:	3000fe1e 	bne	r6,zero,8e34 <___vfprintf_internal_r+0x4b0>
    8a3c:	b8800117 	ldw	r2,4(r23)
    8a40:	d9000805 	stb	r4,32(sp)
    8a44:	01c00044 	movi	r7,1
    8a48:	d9800804 	addi	r6,sp,32
    8a4c:	b80b883a 	mov	r5,r23
    8a50:	8009883a 	mov	r4,r16
    8a54:	103ee83a 	callr	r2
    8a58:	10001d26 	beq	r2,zero,8ad0 <___vfprintf_internal_r+0x14c>
    8a5c:	05bfffc4 	movi	r22,-1
    8a60:	b005883a 	mov	r2,r22
    8a64:	dfc01917 	ldw	ra,100(sp)
    8a68:	df001817 	ldw	fp,96(sp)
    8a6c:	ddc01717 	ldw	r23,92(sp)
    8a70:	dd801617 	ldw	r22,88(sp)
    8a74:	dd401517 	ldw	r21,84(sp)
    8a78:	dd001417 	ldw	r20,80(sp)
    8a7c:	dcc01317 	ldw	r19,76(sp)
    8a80:	dc801217 	ldw	r18,72(sp)
    8a84:	dc401117 	ldw	r17,68(sp)
    8a88:	dc001017 	ldw	r16,64(sp)
    8a8c:	dec01a04 	addi	sp,sp,104
    8a90:	f800283a 	ret
    8a94:	30800c20 	cmpeqi	r2,r6,48
    8a98:	1000ef1e 	bne	r2,zero,8e58 <___vfprintf_internal_r+0x4d4>
    8a9c:	30800958 	cmpnei	r2,r6,37
    8aa0:	103fe626 	beq	r2,zero,8a3c <___vfprintf_internal_r+0xb8>
    8aa4:	217ff404 	addi	r5,r4,-48
    8aa8:	29403fcc 	andi	r5,r5,255
    8aac:	288002a8 	cmpgeui	r2,r5,10
    8ab0:	10000b1e 	bne	r2,zero,8ae0 <___vfprintf_internal_r+0x15c>
    8ab4:	88bfffe0 	cmpeqi	r2,r17,-1
    8ab8:	1000071e 	bne	r2,zero,8ad8 <___vfprintf_internal_r+0x154>
    8abc:	880490ba 	slli	r2,r17,2
    8ac0:	1463883a 	add	r17,r2,r17
    8ac4:	8822907a 	slli	r17,r17,1
    8ac8:	2c63883a 	add	r17,r5,r17
    8acc:	003fd706 	br	8a2c <___vfprintf_internal_r+0xa8>
    8ad0:	b5800044 	addi	r22,r22,1
    8ad4:	003fc606 	br	89f0 <___vfprintf_internal_r+0x6c>
    8ad8:	0023883a 	mov	r17,zero
    8adc:	003ffa06 	br	8ac8 <___vfprintf_internal_r+0x144>
    8ae0:	30800ba0 	cmpeqi	r2,r6,46
    8ae4:	1000e11e 	bne	r2,zero,8e6c <___vfprintf_internal_r+0x4e8>
    8ae8:	00800084 	movi	r2,2
    8aec:	213ff404 	addi	r4,r4,-48
    8af0:	21003fcc 	andi	r4,r4,255
    8af4:	214002a8 	cmpgeui	r5,r4,10
    8af8:	2800091e 	bne	r5,zero,8b20 <___vfprintf_internal_r+0x19c>
    8afc:	917fffe0 	cmpeqi	r5,r18,-1
    8b00:	2800051e 	bne	r5,zero,8b18 <___vfprintf_internal_r+0x194>
    8b04:	900a90ba 	slli	r5,r18,2
    8b08:	2ca5883a 	add	r18,r5,r18
    8b0c:	9024907a 	slli	r18,r18,1
    8b10:	24a5883a 	add	r18,r4,r18
    8b14:	003fb606 	br	89f0 <___vfprintf_internal_r+0x6c>
    8b18:	0025883a 	mov	r18,zero
    8b1c:	003ffc06 	br	8b10 <___vfprintf_internal_r+0x18c>
    8b20:	30801b20 	cmpeqi	r2,r6,108
    8b24:	1000cf1e 	bne	r2,zero,8e64 <___vfprintf_internal_r+0x4e0>
    8b28:	90bfffe0 	cmpeqi	r2,r18,-1
    8b2c:	10000f1e 	bne	r2,zero,8b6c <___vfprintf_internal_r+0x1e8>
    8b30:	d8000015 	stw	zero,0(sp)
    8b34:	30801be0 	cmpeqi	r2,r6,111
    8b38:	1000ce1e 	bne	r2,zero,8e74 <___vfprintf_internal_r+0x4f0>
    8b3c:	30801c08 	cmpgei	r2,r6,112
    8b40:	1000171e 	bne	r2,zero,8ba0 <___vfprintf_internal_r+0x21c>
    8b44:	308018e0 	cmpeqi	r2,r6,99
    8b48:	1000a31e 	bne	r2,zero,8dd8 <___vfprintf_internal_r+0x454>
    8b4c:	30801908 	cmpgei	r2,r6,100
    8b50:	1000081e 	bne	r2,zero,8b74 <___vfprintf_internal_r+0x1f0>
    8b54:	31801620 	cmpeqi	r6,r6,88
    8b58:	303fa126 	beq	r6,zero,89e0 <___vfprintf_internal_r+0x5c>
    8b5c:	00800044 	movi	r2,1
    8b60:	d8800215 	stw	r2,8(sp)
    8b64:	05000404 	movi	r20,16
    8b68:	0000c306 	br	8e78 <___vfprintf_internal_r+0x4f4>
    8b6c:	04800044 	movi	r18,1
    8b70:	003ff006 	br	8b34 <___vfprintf_internal_r+0x1b0>
    8b74:	30801920 	cmpeqi	r2,r6,100
    8b78:	1000021e 	bne	r2,zero,8b84 <___vfprintf_internal_r+0x200>
    8b7c:	31801a60 	cmpeqi	r6,r6,105
    8b80:	303f9726 	beq	r6,zero,89e0 <___vfprintf_internal_r+0x5c>
    8b84:	e0800104 	addi	r2,fp,4
    8b88:	d8800415 	stw	r2,16(sp)
    8b8c:	9800ba26 	beq	r19,zero,8e78 <___vfprintf_internal_r+0x4f4>
    8b90:	e5400017 	ldw	r21,0(fp)
    8b94:	a8002216 	blt	r21,zero,8c20 <___vfprintf_internal_r+0x29c>
    8b98:	04c00044 	movi	r19,1
    8b9c:	0000ba06 	br	8e88 <___vfprintf_internal_r+0x504>
    8ba0:	30801d60 	cmpeqi	r2,r6,117
    8ba4:	1000b41e 	bne	r2,zero,8e78 <___vfprintf_internal_r+0x4f4>
    8ba8:	30801e20 	cmpeqi	r2,r6,120
    8bac:	103fed1e 	bne	r2,zero,8b64 <___vfprintf_internal_r+0x1e0>
    8bb0:	31801ce0 	cmpeqi	r6,r6,115
    8bb4:	303f8a26 	beq	r6,zero,89e0 <___vfprintf_internal_r+0x5c>
    8bb8:	e5400017 	ldw	r21,0(fp)
    8bbc:	e0800104 	addi	r2,fp,4
    8bc0:	d8800315 	stw	r2,12(sp)
    8bc4:	a809883a 	mov	r4,r21
    8bc8:	00088fc0 	call	88fc <strlen>
    8bcc:	888fc83a 	sub	r7,r17,r2
    8bd0:	1039883a 	mov	fp,r2
    8bd4:	01c0080e 	bge	zero,r7,8bf8 <___vfprintf_internal_r+0x274>
    8bd8:	01800804 	movi	r6,32
    8bdc:	b80b883a 	mov	r5,r23
    8be0:	8009883a 	mov	r4,r16
    8be4:	d9c00415 	stw	r7,16(sp)
    8be8:	00089180 	call	8918 <print_repeat>
    8bec:	103f9b1e 	bne	r2,zero,8a5c <___vfprintf_internal_r+0xd8>
    8bf0:	d9c00417 	ldw	r7,16(sp)
    8bf4:	b1ed883a 	add	r22,r22,r7
    8bf8:	b8800117 	ldw	r2,4(r23)
    8bfc:	e00f883a 	mov	r7,fp
    8c00:	a80d883a 	mov	r6,r21
    8c04:	b80b883a 	mov	r5,r23
    8c08:	8009883a 	mov	r4,r16
    8c0c:	103ee83a 	callr	r2
    8c10:	103f921e 	bne	r2,zero,8a5c <___vfprintf_internal_r+0xd8>
    8c14:	b72d883a 	add	r22,r22,fp
    8c18:	df000317 	ldw	fp,12(sp)
    8c1c:	003f7406 	br	89f0 <___vfprintf_internal_r+0x6c>
    8c20:	056bc83a 	sub	r21,zero,r21
    8c24:	04c00044 	movi	r19,1
    8c28:	00c00044 	movi	r3,1
    8c2c:	df000804 	addi	fp,sp,32
    8c30:	e00d883a 	mov	r6,fp
    8c34:	a8002e1e 	bne	r21,zero,8cf0 <___vfprintf_internal_r+0x36c>
    8c38:	e185c83a 	sub	r2,fp,r6
    8c3c:	d8800315 	stw	r2,12(sp)
    8c40:	9085c83a 	sub	r2,r18,r2
    8c44:	0080090e 	bge	zero,r2,8c6c <___vfprintf_internal_r+0x2e8>
    8c48:	e085883a 	add	r2,fp,r2
    8c4c:	d9001004 	addi	r4,sp,64
    8c50:	e100042e 	bgeu	fp,r4,8c64 <___vfprintf_internal_r+0x2e0>
    8c54:	e7000044 	addi	fp,fp,1
    8c58:	01000c04 	movi	r4,48
    8c5c:	e13fffc5 	stb	r4,-1(fp)
    8c60:	e0bffa1e 	bne	fp,r2,8c4c <___vfprintf_internal_r+0x2c8>
    8c64:	e185c83a 	sub	r2,fp,r6
    8c68:	d8800315 	stw	r2,12(sp)
    8c6c:	d8800317 	ldw	r2,12(sp)
    8c70:	1897883a 	add	r11,r3,r2
    8c74:	d8800017 	ldw	r2,0(sp)
    8c78:	8aebc83a 	sub	r21,r17,r11
    8c7c:	10003526 	beq	r2,zero,8d54 <___vfprintf_internal_r+0x3d0>
    8c80:	18000a26 	beq	r3,zero,8cac <___vfprintf_internal_r+0x328>
    8c84:	00800b44 	movi	r2,45
    8c88:	d88007c5 	stb	r2,31(sp)
    8c8c:	b8800117 	ldw	r2,4(r23)
    8c90:	01c00044 	movi	r7,1
    8c94:	d98007c4 	addi	r6,sp,31
    8c98:	b80b883a 	mov	r5,r23
    8c9c:	8009883a 	mov	r4,r16
    8ca0:	103ee83a 	callr	r2
    8ca4:	103f6d1e 	bne	r2,zero,8a5c <___vfprintf_internal_r+0xd8>
    8ca8:	b5800044 	addi	r22,r22,1
    8cac:	0540070e 	bge	zero,r21,8ccc <___vfprintf_internal_r+0x348>
    8cb0:	a80f883a 	mov	r7,r21
    8cb4:	01800c04 	movi	r6,48
    8cb8:	b80b883a 	mov	r5,r23
    8cbc:	8009883a 	mov	r4,r16
    8cc0:	00089180 	call	8918 <print_repeat>
    8cc4:	103f651e 	bne	r2,zero,8a5c <___vfprintf_internal_r+0xd8>
    8cc8:	b56d883a 	add	r22,r22,r21
    8ccc:	d8800317 	ldw	r2,12(sp)
    8cd0:	b72d883a 	add	r22,r22,fp
    8cd4:	172bc83a 	sub	r21,r2,fp
    8cd8:	af05883a 	add	r2,r21,fp
    8cdc:	b707c83a 	sub	r3,r22,fp
    8ce0:	00803216 	blt	zero,r2,8dac <___vfprintf_internal_r+0x428>
    8ce4:	df000417 	ldw	fp,16(sp)
    8ce8:	182d883a 	mov	r22,r3
    8cec:	003f3c06 	br	89e0 <___vfprintf_internal_r+0x5c>
    8cf0:	a809883a 	mov	r4,r21
    8cf4:	a00b883a 	mov	r5,r20
    8cf8:	d8c00615 	stw	r3,24(sp)
    8cfc:	00087080 	call	8708 <__udivsi3>
    8d00:	1009883a 	mov	r4,r2
    8d04:	a00b883a 	mov	r5,r20
    8d08:	d8800315 	stw	r2,12(sp)
    8d0c:	00090440 	call	9044 <__mulsi3>
    8d10:	a8abc83a 	sub	r21,r21,r2
    8d14:	a8800288 	cmpgei	r2,r21,10
    8d18:	d9000317 	ldw	r4,12(sp)
    8d1c:	d8c00617 	ldw	r3,24(sp)
    8d20:	d9800804 	addi	r6,sp,32
    8d24:	1000051e 	bne	r2,zero,8d3c <___vfprintf_internal_r+0x3b8>
    8d28:	ad400c04 	addi	r21,r21,48
    8d2c:	e7000044 	addi	fp,fp,1
    8d30:	e57fffc5 	stb	r21,-1(fp)
    8d34:	202b883a 	mov	r21,r4
    8d38:	003fbe06 	br	8c34 <___vfprintf_internal_r+0x2b0>
    8d3c:	d8800217 	ldw	r2,8(sp)
    8d40:	10000226 	beq	r2,zero,8d4c <___vfprintf_internal_r+0x3c8>
    8d44:	ad400dc4 	addi	r21,r21,55
    8d48:	003ff806 	br	8d2c <___vfprintf_internal_r+0x3a8>
    8d4c:	ad4015c4 	addi	r21,r21,87
    8d50:	003ff606 	br	8d2c <___vfprintf_internal_r+0x3a8>
    8d54:	0540090e 	bge	zero,r21,8d7c <___vfprintf_internal_r+0x3f8>
    8d58:	a80f883a 	mov	r7,r21
    8d5c:	01800804 	movi	r6,32
    8d60:	b80b883a 	mov	r5,r23
    8d64:	8009883a 	mov	r4,r16
    8d68:	d8c00615 	stw	r3,24(sp)
    8d6c:	00089180 	call	8918 <print_repeat>
    8d70:	103f3a1e 	bne	r2,zero,8a5c <___vfprintf_internal_r+0xd8>
    8d74:	d8c00617 	ldw	r3,24(sp)
    8d78:	b56d883a 	add	r22,r22,r21
    8d7c:	183fd326 	beq	r3,zero,8ccc <___vfprintf_internal_r+0x348>
    8d80:	00800b44 	movi	r2,45
    8d84:	d88007c5 	stb	r2,31(sp)
    8d88:	b8800117 	ldw	r2,4(r23)
    8d8c:	01c00044 	movi	r7,1
    8d90:	d98007c4 	addi	r6,sp,31
    8d94:	b80b883a 	mov	r5,r23
    8d98:	8009883a 	mov	r4,r16
    8d9c:	103ee83a 	callr	r2
    8da0:	103f2e1e 	bne	r2,zero,8a5c <___vfprintf_internal_r+0xd8>
    8da4:	b5800044 	addi	r22,r22,1
    8da8:	003fc806 	br	8ccc <___vfprintf_internal_r+0x348>
    8dac:	e0bfffc3 	ldbu	r2,-1(fp)
    8db0:	01c00044 	movi	r7,1
    8db4:	d98007c4 	addi	r6,sp,31
    8db8:	d88007c5 	stb	r2,31(sp)
    8dbc:	b8800117 	ldw	r2,4(r23)
    8dc0:	b80b883a 	mov	r5,r23
    8dc4:	8009883a 	mov	r4,r16
    8dc8:	e73fffc4 	addi	fp,fp,-1
    8dcc:	103ee83a 	callr	r2
    8dd0:	103fc126 	beq	r2,zero,8cd8 <___vfprintf_internal_r+0x354>
    8dd4:	003f2106 	br	8a5c <___vfprintf_internal_r+0xd8>
    8dd8:	88800090 	cmplti	r2,r17,2
    8ddc:	1000081e 	bne	r2,zero,8e00 <___vfprintf_internal_r+0x47c>
    8de0:	8d7fffc4 	addi	r21,r17,-1
    8de4:	a80f883a 	mov	r7,r21
    8de8:	01800804 	movi	r6,32
    8dec:	b80b883a 	mov	r5,r23
    8df0:	8009883a 	mov	r4,r16
    8df4:	00089180 	call	8918 <print_repeat>
    8df8:	103f181e 	bne	r2,zero,8a5c <___vfprintf_internal_r+0xd8>
    8dfc:	b56d883a 	add	r22,r22,r21
    8e00:	e0800017 	ldw	r2,0(fp)
    8e04:	01c00044 	movi	r7,1
    8e08:	d9800804 	addi	r6,sp,32
    8e0c:	d8800805 	stb	r2,32(sp)
    8e10:	b8800117 	ldw	r2,4(r23)
    8e14:	b80b883a 	mov	r5,r23
    8e18:	8009883a 	mov	r4,r16
    8e1c:	e5400104 	addi	r21,fp,4
    8e20:	103ee83a 	callr	r2
    8e24:	103f0d1e 	bne	r2,zero,8a5c <___vfprintf_internal_r+0xd8>
    8e28:	b5800044 	addi	r22,r22,1
    8e2c:	a839883a 	mov	fp,r21
    8e30:	003eef06 	br	89f0 <___vfprintf_internal_r+0x6c>
    8e34:	d8000215 	stw	zero,8(sp)
    8e38:	d8000115 	stw	zero,4(sp)
    8e3c:	d8000015 	stw	zero,0(sp)
    8e40:	04c00044 	movi	r19,1
    8e44:	05000284 	movi	r20,10
    8e48:	04bfffc4 	movi	r18,-1
    8e4c:	047fffc4 	movi	r17,-1
    8e50:	00800044 	movi	r2,1
    8e54:	003ee606 	br	89f0 <___vfprintf_internal_r+0x6c>
    8e58:	00800044 	movi	r2,1
    8e5c:	d8800015 	stw	r2,0(sp)
    8e60:	003ef206 	br	8a2c <___vfprintf_internal_r+0xa8>
    8e64:	00800044 	movi	r2,1
    8e68:	d8800115 	stw	r2,4(sp)
    8e6c:	008000c4 	movi	r2,3
    8e70:	003edf06 	br	89f0 <___vfprintf_internal_r+0x6c>
    8e74:	05000204 	movi	r20,8
    8e78:	e0800104 	addi	r2,fp,4
    8e7c:	d8800415 	stw	r2,16(sp)
    8e80:	e5400017 	ldw	r21,0(fp)
    8e84:	0027883a 	mov	r19,zero
    8e88:	0007883a 	mov	r3,zero
    8e8c:	003f6706 	br	8c2c <___vfprintf_internal_r+0x2a8>

00008e90 <__vfprintf_internal>:
    8e90:	00800074 	movhi	r2,1
    8e94:	300f883a 	mov	r7,r6
    8e98:	280d883a 	mov	r6,r5
    8e9c:	200b883a 	mov	r5,r4
    8ea0:	112b3317 	ldw	r4,-21300(r2)
    8ea4:	00089841 	jmpi	8984 <___vfprintf_internal_r>

00008ea8 <__sfvwrite_small_dev>:
    8ea8:	2880000b 	ldhu	r2,0(r5)
    8eac:	1080020c 	andi	r2,r2,8
    8eb0:	10002526 	beq	r2,zero,8f48 <__sfvwrite_small_dev+0xa0>
    8eb4:	2880008f 	ldh	r2,2(r5)
    8eb8:	defffb04 	addi	sp,sp,-20
    8ebc:	dcc00315 	stw	r19,12(sp)
    8ec0:	dc800215 	stw	r18,8(sp)
    8ec4:	dc400115 	stw	r17,4(sp)
    8ec8:	dc000015 	stw	r16,0(sp)
    8ecc:	dfc00415 	stw	ra,16(sp)
    8ed0:	2027883a 	mov	r19,r4
    8ed4:	2821883a 	mov	r16,r5
    8ed8:	3025883a 	mov	r18,r6
    8edc:	3823883a 	mov	r17,r7
    8ee0:	1000100e 	bge	r2,zero,8f24 <__sfvwrite_small_dev+0x7c>
    8ee4:	8080000b 	ldhu	r2,0(r16)
    8ee8:	10801014 	ori	r2,r2,64
    8eec:	8080000d 	sth	r2,0(r16)
    8ef0:	00bfffc4 	movi	r2,-1
    8ef4:	00000d06 	br	8f2c <__sfvwrite_small_dev+0x84>
    8ef8:	88810050 	cmplti	r2,r17,1025
    8efc:	880f883a 	mov	r7,r17
    8f00:	1000011e 	bne	r2,zero,8f08 <__sfvwrite_small_dev+0x60>
    8f04:	01c10004 	movi	r7,1024
    8f08:	8140008f 	ldh	r5,2(r16)
    8f0c:	900d883a 	mov	r6,r18
    8f10:	9809883a 	mov	r4,r19
    8f14:	0008ff40 	call	8ff4 <_write_r>
    8f18:	00bff20e 	bge	zero,r2,8ee4 <__sfvwrite_small_dev+0x3c>
    8f1c:	88a3c83a 	sub	r17,r17,r2
    8f20:	90a5883a 	add	r18,r18,r2
    8f24:	047ff416 	blt	zero,r17,8ef8 <__sfvwrite_small_dev+0x50>
    8f28:	0005883a 	mov	r2,zero
    8f2c:	dfc00417 	ldw	ra,16(sp)
    8f30:	dcc00317 	ldw	r19,12(sp)
    8f34:	dc800217 	ldw	r18,8(sp)
    8f38:	dc400117 	ldw	r17,4(sp)
    8f3c:	dc000017 	ldw	r16,0(sp)
    8f40:	dec00504 	addi	sp,sp,20
    8f44:	f800283a 	ret
    8f48:	00bfffc4 	movi	r2,-1
    8f4c:	f800283a 	ret

00008f50 <putc>:
    8f50:	defffd04 	addi	sp,sp,-12
    8f54:	00800074 	movhi	r2,1
    8f58:	dc000115 	stw	r16,4(sp)
    8f5c:	dfc00215 	stw	ra,8(sp)
    8f60:	10a3aa04 	addi	r2,r2,-29016
    8f64:	28800115 	stw	r2,4(r5)
    8f68:	00800074 	movhi	r2,1
    8f6c:	d90000c5 	stb	r4,3(sp)
    8f70:	2021883a 	mov	r16,r4
    8f74:	112b3317 	ldw	r4,-21300(r2)
    8f78:	01c00044 	movi	r7,1
    8f7c:	d98000c4 	addi	r6,sp,3
    8f80:	0008ea80 	call	8ea8 <__sfvwrite_small_dev>
    8f84:	10ffffe0 	cmpeqi	r3,r2,-1
    8f88:	1800011e 	bne	r3,zero,8f90 <putc+0x40>
    8f8c:	8005883a 	mov	r2,r16
    8f90:	dfc00217 	ldw	ra,8(sp)
    8f94:	dc000117 	ldw	r16,4(sp)
    8f98:	dec00304 	addi	sp,sp,12
    8f9c:	f800283a 	ret

00008fa0 <_putc_r>:
    8fa0:	defffd04 	addi	sp,sp,-12
    8fa4:	00800074 	movhi	r2,1
    8fa8:	dc000115 	stw	r16,4(sp)
    8fac:	dfc00215 	stw	ra,8(sp)
    8fb0:	10a3aa04 	addi	r2,r2,-29016
    8fb4:	30800115 	stw	r2,4(r6)
    8fb8:	00800074 	movhi	r2,1
    8fbc:	112b3317 	ldw	r4,-21300(r2)
    8fc0:	2821883a 	mov	r16,r5
    8fc4:	01c00044 	movi	r7,1
    8fc8:	300b883a 	mov	r5,r6
    8fcc:	d98000c4 	addi	r6,sp,3
    8fd0:	dc0000c5 	stb	r16,3(sp)
    8fd4:	0008ea80 	call	8ea8 <__sfvwrite_small_dev>
    8fd8:	10ffffe0 	cmpeqi	r3,r2,-1
    8fdc:	1800011e 	bne	r3,zero,8fe4 <_putc_r+0x44>
    8fe0:	8005883a 	mov	r2,r16
    8fe4:	dfc00217 	ldw	ra,8(sp)
    8fe8:	dc000117 	ldw	r16,4(sp)
    8fec:	dec00304 	addi	sp,sp,12
    8ff0:	f800283a 	ret

00008ff4 <_write_r>:
    8ff4:	defffe04 	addi	sp,sp,-8
    8ff8:	dc000015 	stw	r16,0(sp)
    8ffc:	00800074 	movhi	r2,1
    9000:	2021883a 	mov	r16,r4
    9004:	2809883a 	mov	r4,r5
    9008:	300b883a 	mov	r5,r6
    900c:	380d883a 	mov	r6,r7
    9010:	dfc00115 	stw	ra,4(sp)
    9014:	102bf815 	stw	zero,-20512(r2)
    9018:	00092300 	call	9230 <write>
    901c:	10ffffd8 	cmpnei	r3,r2,-1
    9020:	1800041e 	bne	r3,zero,9034 <_write_r+0x40>
    9024:	00c00074 	movhi	r3,1
    9028:	18ebf817 	ldw	r3,-20512(r3)
    902c:	18000126 	beq	r3,zero,9034 <_write_r+0x40>
    9030:	80c00015 	stw	r3,0(r16)
    9034:	dfc00117 	ldw	ra,4(sp)
    9038:	dc000017 	ldw	r16,0(sp)
    903c:	dec00204 	addi	sp,sp,8
    9040:	f800283a 	ret

00009044 <__mulsi3>:
    9044:	0005883a 	mov	r2,zero
    9048:	20000726 	beq	r4,zero,9068 <__mulsi3+0x24>
    904c:	20c0004c 	andi	r3,r4,1
    9050:	2008d07a 	srli	r4,r4,1
    9054:	18000126 	beq	r3,zero,905c <__mulsi3+0x18>
    9058:	1145883a 	add	r2,r2,r5
    905c:	294b883a 	add	r5,r5,r5
    9060:	203ffa1e 	bne	r4,zero,904c <__mulsi3+0x8>
    9064:	f800283a 	ret
    9068:	f800283a 	ret

0000906c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    906c:	defffc04 	addi	sp,sp,-16
    9070:	df000315 	stw	fp,12(sp)
    9074:	df000304 	addi	fp,sp,12
    9078:	e13fff15 	stw	r4,-4(fp)
    907c:	e17ffe15 	stw	r5,-8(fp)
    9080:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
    9084:	e0fffe17 	ldw	r3,-8(fp)
    9088:	e0bfff17 	ldw	r2,-4(fp)
    908c:	18800c26 	beq	r3,r2,90c0 <alt_load_section+0x54>
  {
    while( to != end )
    9090:	00000806 	br	90b4 <alt_load_section+0x48>
    {
      *to++ = *from++;
    9094:	e0ffff17 	ldw	r3,-4(fp)
    9098:	18800104 	addi	r2,r3,4
    909c:	e0bfff15 	stw	r2,-4(fp)
    90a0:	e0bffe17 	ldw	r2,-8(fp)
    90a4:	11000104 	addi	r4,r2,4
    90a8:	e13ffe15 	stw	r4,-8(fp)
    90ac:	18c00017 	ldw	r3,0(r3)
    90b0:	10c00015 	stw	r3,0(r2)
    while( to != end )
    90b4:	e0fffe17 	ldw	r3,-8(fp)
    90b8:	e0bffd17 	ldw	r2,-12(fp)
    90bc:	18bff51e 	bne	r3,r2,9094 <alt_load_section+0x28>
    }
  }
}
    90c0:	0001883a 	nop
    90c4:	e037883a 	mov	sp,fp
    90c8:	df000017 	ldw	fp,0(sp)
    90cc:	dec00104 	addi	sp,sp,4
    90d0:	f800283a 	ret

000090d4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    90d4:	defffe04 	addi	sp,sp,-8
    90d8:	dfc00115 	stw	ra,4(sp)
    90dc:	df000015 	stw	fp,0(sp)
    90e0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    90e4:	01800074 	movhi	r6,1
    90e8:	31ab3d04 	addi	r6,r6,-21260
    90ec:	01400074 	movhi	r5,1
    90f0:	296a8404 	addi	r5,r5,-22000
    90f4:	01000074 	movhi	r4,1
    90f8:	212b3d04 	addi	r4,r4,-21260
    90fc:	000906c0 	call	906c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    9100:	01800074 	movhi	r6,1
    9104:	31a08e04 	addi	r6,r6,-32200
    9108:	01400074 	movhi	r5,1
    910c:	29600804 	addi	r5,r5,-32736
    9110:	01000074 	movhi	r4,1
    9114:	21200804 	addi	r4,r4,-32736
    9118:	000906c0 	call	906c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    911c:	01800074 	movhi	r6,1
    9120:	31aa8404 	addi	r6,r6,-22000
    9124:	01400074 	movhi	r5,1
    9128:	296a4004 	addi	r5,r5,-22272
    912c:	01000074 	movhi	r4,1
    9130:	212a4004 	addi	r4,r4,-22272
    9134:	000906c0 	call	906c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    9138:	00099a40 	call	99a4 <alt_dcache_flush_all>
  alt_icache_flush_all();
    913c:	0009b000 	call	9b00 <alt_icache_flush_all>
}
    9140:	0001883a 	nop
    9144:	e037883a 	mov	sp,fp
    9148:	dfc00117 	ldw	ra,4(sp)
    914c:	df000017 	ldw	fp,0(sp)
    9150:	dec00204 	addi	sp,sp,8
    9154:	f800283a 	ret

00009158 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    9158:	defffd04 	addi	sp,sp,-12
    915c:	dfc00215 	stw	ra,8(sp)
    9160:	df000115 	stw	fp,4(sp)
    9164:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    9168:	0009883a 	mov	r4,zero
    916c:	00093680 	call	9368 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    9170:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    9174:	00093a40 	call	93a4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    9178:	01800074 	movhi	r6,1
    917c:	31aa7904 	addi	r6,r6,-22044
    9180:	01400074 	movhi	r5,1
    9184:	296a7904 	addi	r5,r5,-22044
    9188:	01000074 	movhi	r4,1
    918c:	212a7904 	addi	r4,r4,-22044
    9190:	0009ea00 	call	9ea0 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    9194:	d0a0c717 	ldw	r2,-31972(gp)
    9198:	d0e0c817 	ldw	r3,-31968(gp)
    919c:	d120c917 	ldw	r4,-31964(gp)
    91a0:	200d883a 	mov	r6,r4
    91a4:	180b883a 	mov	r5,r3
    91a8:	1009883a 	mov	r4,r2
    91ac:	00085140 	call	8514 <main>
    91b0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    91b4:	01000044 	movi	r4,1
    91b8:	00098c80 	call	98c8 <close>
  exit (result);
    91bc:	e13fff17 	ldw	r4,-4(fp)
    91c0:	000a74c0 	call	a74c <exit>

000091c4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    91c4:	defffd04 	addi	sp,sp,-12
    91c8:	dfc00215 	stw	ra,8(sp)
    91cc:	df000115 	stw	fp,4(sp)
    91d0:	df000104 	addi	fp,sp,4
    91d4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    91d8:	e13fff17 	ldw	r4,-4(fp)
    91dc:	00097340 	call	9734 <alt_busy_sleep>
}
    91e0:	e037883a 	mov	sp,fp
    91e4:	dfc00117 	ldw	ra,4(sp)
    91e8:	df000017 	ldw	fp,0(sp)
    91ec:	dec00204 	addi	sp,sp,8
    91f0:	f800283a 	ret

000091f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    91f4:	defffe04 	addi	sp,sp,-8
    91f8:	dfc00115 	stw	ra,4(sp)
    91fc:	df000015 	stw	fp,0(sp)
    9200:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9204:	d0a00717 	ldw	r2,-32740(gp)
    9208:	10000326 	beq	r2,zero,9218 <alt_get_errno+0x24>
    920c:	d0a00717 	ldw	r2,-32740(gp)
    9210:	103ee83a 	callr	r2
    9214:	00000106 	br	921c <alt_get_errno+0x28>
    9218:	d0a0c604 	addi	r2,gp,-31976
}
    921c:	e037883a 	mov	sp,fp
    9220:	dfc00117 	ldw	ra,4(sp)
    9224:	df000017 	ldw	fp,0(sp)
    9228:	dec00204 	addi	sp,sp,8
    922c:	f800283a 	ret

00009230 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    9230:	defff904 	addi	sp,sp,-28
    9234:	dfc00615 	stw	ra,24(sp)
    9238:	df000515 	stw	fp,20(sp)
    923c:	df000504 	addi	fp,sp,20
    9240:	e13ffd15 	stw	r4,-12(fp)
    9244:	e17ffc15 	stw	r5,-16(fp)
    9248:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    924c:	e0bffd17 	ldw	r2,-12(fp)
    9250:	10000916 	blt	r2,zero,9278 <write+0x48>
    9254:	e0fffd17 	ldw	r3,-12(fp)
    9258:	1805883a 	mov	r2,r3
    925c:	1085883a 	add	r2,r2,r2
    9260:	10c5883a 	add	r2,r2,r3
    9264:	100490ba 	slli	r2,r2,2
    9268:	00c00074 	movhi	r3,1
    926c:	18ead204 	addi	r3,r3,-21688
    9270:	10c5883a 	add	r2,r2,r3
    9274:	00000106 	br	927c <write+0x4c>
    9278:	0005883a 	mov	r2,zero
    927c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    9280:	e0bfff17 	ldw	r2,-4(fp)
    9284:	10002126 	beq	r2,zero,930c <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    9288:	e0bfff17 	ldw	r2,-4(fp)
    928c:	10800217 	ldw	r2,8(r2)
    9290:	108000cc 	andi	r2,r2,3
    9294:	10001826 	beq	r2,zero,92f8 <write+0xc8>
    9298:	e0bfff17 	ldw	r2,-4(fp)
    929c:	10800017 	ldw	r2,0(r2)
    92a0:	10800617 	ldw	r2,24(r2)
    92a4:	10001426 	beq	r2,zero,92f8 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    92a8:	e0bfff17 	ldw	r2,-4(fp)
    92ac:	10800017 	ldw	r2,0(r2)
    92b0:	10800617 	ldw	r2,24(r2)
    92b4:	e0fffb17 	ldw	r3,-20(fp)
    92b8:	180d883a 	mov	r6,r3
    92bc:	e17ffc17 	ldw	r5,-16(fp)
    92c0:	e13fff17 	ldw	r4,-4(fp)
    92c4:	103ee83a 	callr	r2
    92c8:	e0bffe15 	stw	r2,-8(fp)
    92cc:	e0bffe17 	ldw	r2,-8(fp)
    92d0:	1000070e 	bge	r2,zero,92f0 <write+0xc0>
      {
        ALT_ERRNO = -rval;
    92d4:	00091f40 	call	91f4 <alt_get_errno>
    92d8:	1007883a 	mov	r3,r2
    92dc:	e0bffe17 	ldw	r2,-8(fp)
    92e0:	0085c83a 	sub	r2,zero,r2
    92e4:	18800015 	stw	r2,0(r3)
        return -1;
    92e8:	00bfffc4 	movi	r2,-1
    92ec:	00000c06 	br	9320 <write+0xf0>
      }
      return rval;
    92f0:	e0bffe17 	ldw	r2,-8(fp)
    92f4:	00000a06 	br	9320 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
    92f8:	00091f40 	call	91f4 <alt_get_errno>
    92fc:	1007883a 	mov	r3,r2
    9300:	00800344 	movi	r2,13
    9304:	18800015 	stw	r2,0(r3)
    9308:	00000406 	br	931c <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    930c:	00091f40 	call	91f4 <alt_get_errno>
    9310:	1007883a 	mov	r3,r2
    9314:	00801444 	movi	r2,81
    9318:	18800015 	stw	r2,0(r3)
  }
  return -1;
    931c:	00bfffc4 	movi	r2,-1
}
    9320:	e037883a 	mov	sp,fp
    9324:	dfc00117 	ldw	ra,4(sp)
    9328:	df000017 	ldw	fp,0(sp)
    932c:	dec00204 	addi	sp,sp,8
    9330:	f800283a 	ret

00009334 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    9334:	defffd04 	addi	sp,sp,-12
    9338:	dfc00215 	stw	ra,8(sp)
    933c:	df000115 	stw	fp,4(sp)
    9340:	df000104 	addi	fp,sp,4
    9344:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    9348:	d1600404 	addi	r5,gp,-32752
    934c:	e13fff17 	ldw	r4,-4(fp)
    9350:	0009a580 	call	9a58 <alt_dev_llist_insert>
}
    9354:	e037883a 	mov	sp,fp
    9358:	dfc00117 	ldw	ra,4(sp)
    935c:	df000017 	ldw	fp,0(sp)
    9360:	dec00204 	addi	sp,sp,8
    9364:	f800283a 	ret

00009368 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    9368:	defffd04 	addi	sp,sp,-12
    936c:	dfc00215 	stw	ra,8(sp)
    9370:	df000115 	stw	fp,4(sp)
    9374:	df000104 	addi	fp,sp,4
    9378:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    937c:	000a3b00 	call	a3b0 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    9380:	00800044 	movi	r2,1
    9384:	1001703a 	wrctl	status,r2
}
    9388:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
    938c:	0001883a 	nop
    9390:	e037883a 	mov	sp,fp
    9394:	dfc00117 	ldw	ra,4(sp)
    9398:	df000017 	ldw	fp,0(sp)
    939c:	dec00204 	addi	sp,sp,8
    93a0:	f800283a 	ret

000093a4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    93a4:	defffe04 	addi	sp,sp,-8
    93a8:	dfc00115 	stw	ra,4(sp)
    93ac:	df000015 	stw	fp,0(sp)
    93b0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
    93b4:	01c0fa04 	movi	r7,1000
    93b8:	01800044 	movi	r6,1
    93bc:	000b883a 	mov	r5,zero
    93c0:	01000074 	movhi	r4,1
    93c4:	21040004 	addi	r4,r4,4096
    93c8:	00096b00 	call	96b0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    93cc:	01000074 	movhi	r4,1
    93d0:	212abd04 	addi	r4,r4,-21772
    93d4:	00093340 	call	9334 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    93d8:	0001883a 	nop
}
    93dc:	0001883a 	nop
    93e0:	e037883a 	mov	sp,fp
    93e4:	dfc00117 	ldw	ra,4(sp)
    93e8:	df000017 	ldw	fp,0(sp)
    93ec:	dec00204 	addi	sp,sp,8
    93f0:	f800283a 	ret

000093f4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    93f4:	defffa04 	addi	sp,sp,-24
    93f8:	dfc00515 	stw	ra,20(sp)
    93fc:	df000415 	stw	fp,16(sp)
    9400:	df000404 	addi	fp,sp,16
    9404:	e13ffe15 	stw	r4,-8(fp)
    9408:	e17ffd15 	stw	r5,-12(fp)
    940c:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9410:	e0bffe17 	ldw	r2,-8(fp)
    9414:	10800017 	ldw	r2,0(r2)
    9418:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    941c:	e0bfff17 	ldw	r2,-4(fp)
    9420:	10c00a04 	addi	r3,r2,40
    9424:	e0bffe17 	ldw	r2,-8(fp)
    9428:	10800217 	ldw	r2,8(r2)
    942c:	100f883a 	mov	r7,r2
    9430:	e1bffc17 	ldw	r6,-16(fp)
    9434:	e17ffd17 	ldw	r5,-12(fp)
    9438:	1809883a 	mov	r4,r3
    943c:	00094b40 	call	94b4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    9440:	e037883a 	mov	sp,fp
    9444:	dfc00117 	ldw	ra,4(sp)
    9448:	df000017 	ldw	fp,0(sp)
    944c:	dec00204 	addi	sp,sp,8
    9450:	f800283a 	ret

00009454 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    9454:	defffa04 	addi	sp,sp,-24
    9458:	dfc00515 	stw	ra,20(sp)
    945c:	df000415 	stw	fp,16(sp)
    9460:	df000404 	addi	fp,sp,16
    9464:	e13ffe15 	stw	r4,-8(fp)
    9468:	e17ffd15 	stw	r5,-12(fp)
    946c:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9470:	e0bffe17 	ldw	r2,-8(fp)
    9474:	10800017 	ldw	r2,0(r2)
    9478:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    947c:	e0bfff17 	ldw	r2,-4(fp)
    9480:	10c00a04 	addi	r3,r2,40
    9484:	e0bffe17 	ldw	r2,-8(fp)
    9488:	10800217 	ldw	r2,8(r2)
    948c:	100f883a 	mov	r7,r2
    9490:	e1bffc17 	ldw	r6,-16(fp)
    9494:	e17ffd17 	ldw	r5,-12(fp)
    9498:	1809883a 	mov	r4,r3
    949c:	00095a00 	call	95a0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    94a0:	e037883a 	mov	sp,fp
    94a4:	dfc00117 	ldw	ra,4(sp)
    94a8:	df000017 	ldw	fp,0(sp)
    94ac:	dec00204 	addi	sp,sp,8
    94b0:	f800283a 	ret

000094b4 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    94b4:	defff704 	addi	sp,sp,-36
    94b8:	df000815 	stw	fp,32(sp)
    94bc:	df000804 	addi	fp,sp,32
    94c0:	e13ffb15 	stw	r4,-20(fp)
    94c4:	e17ffa15 	stw	r5,-24(fp)
    94c8:	e1bff915 	stw	r6,-28(fp)
    94cc:	e1fff815 	stw	r7,-32(fp)
  unsigned int base = sp->base;
    94d0:	e0bffb17 	ldw	r2,-20(fp)
    94d4:	10800017 	ldw	r2,0(r2)
    94d8:	e0bffe15 	stw	r2,-8(fp)

  char * ptr = buffer;
    94dc:	e0bffa17 	ldw	r2,-24(fp)
    94e0:	e0bfff15 	stw	r2,-4(fp)
  char * end = buffer + space;
    94e4:	e0bff917 	ldw	r2,-28(fp)
    94e8:	e0fffa17 	ldw	r3,-24(fp)
    94ec:	1885883a 	add	r2,r3,r2
    94f0:	e0bffd15 	stw	r2,-12(fp)

  while (ptr < end)
    94f4:	00001206 	br	9540 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    94f8:	e0bffe17 	ldw	r2,-8(fp)
    94fc:	10800037 	ldwio	r2,0(r2)
    9500:	e0bffc15 	stw	r2,-16(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    9504:	e0bffc17 	ldw	r2,-16(fp)
    9508:	10a0000c 	andi	r2,r2,32768
    950c:	10000626 	beq	r2,zero,9528 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    9510:	e0bfff17 	ldw	r2,-4(fp)
    9514:	10c00044 	addi	r3,r2,1
    9518:	e0ffff15 	stw	r3,-4(fp)
    951c:	e0fffc17 	ldw	r3,-16(fp)
    9520:	10c00005 	stb	r3,0(r2)
    9524:	00000606 	br	9540 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    9528:	e0ffff17 	ldw	r3,-4(fp)
    952c:	e0bffa17 	ldw	r2,-24(fp)
    9530:	1880071e 	bne	r3,r2,9550 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    9534:	e0bff817 	ldw	r2,-32(fp)
    9538:	1090000c 	andi	r2,r2,16384
    953c:	1000061e 	bne	r2,zero,9558 <altera_avalon_jtag_uart_read+0xa4>
  while (ptr < end)
    9540:	e0ffff17 	ldw	r3,-4(fp)
    9544:	e0bffd17 	ldw	r2,-12(fp)
    9548:	18bfeb36 	bltu	r3,r2,94f8 <altera_avalon_jtag_uart_read+0x44>
    954c:	00000306 	br	955c <altera_avalon_jtag_uart_read+0xa8>
      break;
    9550:	0001883a 	nop
    9554:	00000106 	br	955c <altera_avalon_jtag_uart_read+0xa8>
      break;   
    9558:	0001883a 	nop
    
  }

  if (ptr != buffer)
    955c:	e0ffff17 	ldw	r3,-4(fp)
    9560:	e0bffa17 	ldw	r2,-24(fp)
    9564:	18800426 	beq	r3,r2,9578 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    9568:	e0ffff17 	ldw	r3,-4(fp)
    956c:	e0bffa17 	ldw	r2,-24(fp)
    9570:	1885c83a 	sub	r2,r3,r2
    9574:	00000606 	br	9590 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    9578:	e0bff817 	ldw	r2,-32(fp)
    957c:	1090000c 	andi	r2,r2,16384
    9580:	10000226 	beq	r2,zero,958c <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    9584:	00bffd44 	movi	r2,-11
    9588:	00000106 	br	9590 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    958c:	00bffec4 	movi	r2,-5
}
    9590:	e037883a 	mov	sp,fp
    9594:	df000017 	ldw	fp,0(sp)
    9598:	dec00104 	addi	sp,sp,4
    959c:	f800283a 	ret

000095a0 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    95a0:	defff904 	addi	sp,sp,-28
    95a4:	df000615 	stw	fp,24(sp)
    95a8:	df000604 	addi	fp,sp,24
    95ac:	e13ffd15 	stw	r4,-12(fp)
    95b0:	e17ffc15 	stw	r5,-16(fp)
    95b4:	e1bffb15 	stw	r6,-20(fp)
    95b8:	e1fffa15 	stw	r7,-24(fp)
  unsigned int base = sp->base;
    95bc:	e0bffd17 	ldw	r2,-12(fp)
    95c0:	10800017 	ldw	r2,0(r2)
    95c4:	e0bfff15 	stw	r2,-4(fp)

  const char * end = ptr + count;
    95c8:	e0bffb17 	ldw	r2,-20(fp)
    95cc:	e0fffc17 	ldw	r3,-16(fp)
    95d0:	1885883a 	add	r2,r3,r2
    95d4:	e0bffe15 	stw	r2,-8(fp)

  while (ptr < end)
    95d8:	00000e06 	br	9614 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    95dc:	e0bfff17 	ldw	r2,-4(fp)
    95e0:	10800104 	addi	r2,r2,4
    95e4:	10800037 	ldwio	r2,0(r2)
    95e8:	10bfffec 	andhi	r2,r2,65535
    95ec:	10000926 	beq	r2,zero,9614 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    95f0:	e0ffff17 	ldw	r3,-4(fp)
    95f4:	e0bffc17 	ldw	r2,-16(fp)
    95f8:	11000044 	addi	r4,r2,1
    95fc:	e13ffc15 	stw	r4,-16(fp)
    9600:	10800003 	ldbu	r2,0(r2)
    9604:	10803fcc 	andi	r2,r2,255
    9608:	1080201c 	xori	r2,r2,128
    960c:	10bfe004 	addi	r2,r2,-128
    9610:	18800035 	stwio	r2,0(r3)
  while (ptr < end)
    9614:	e0fffc17 	ldw	r3,-16(fp)
    9618:	e0bffe17 	ldw	r2,-8(fp)
    961c:	18bfef36 	bltu	r3,r2,95dc <altera_avalon_jtag_uart_write+0x3c>

  return count;
    9620:	e0bffb17 	ldw	r2,-20(fp)
}
    9624:	e037883a 	mov	sp,fp
    9628:	df000017 	ldw	fp,0(sp)
    962c:	dec00104 	addi	sp,sp,4
    9630:	f800283a 	ret

00009634 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    9634:	defffa04 	addi	sp,sp,-24
    9638:	dfc00515 	stw	ra,20(sp)
    963c:	df000415 	stw	fp,16(sp)
    9640:	df000404 	addi	fp,sp,16
    9644:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    9648:	0007883a 	mov	r3,zero
    964c:	e0bffc17 	ldw	r2,-16(fp)
    9650:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    9654:	e0bffc17 	ldw	r2,-16(fp)
    9658:	10800104 	addi	r2,r2,4
    965c:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
    9660:	0005303a 	rdctl	r2,status
    9664:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9668:	e0fffd17 	ldw	r3,-12(fp)
    966c:	00bfff84 	movi	r2,-2
    9670:	1884703a 	and	r2,r3,r2
    9674:	1001703a 	wrctl	status,r2
  return context;
    9678:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    967c:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
    9680:	000a2a80 	call	a2a8 <alt_tick>
    9684:	e0bfff17 	ldw	r2,-4(fp)
    9688:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    968c:	e0bffe17 	ldw	r2,-8(fp)
    9690:	1001703a 	wrctl	status,r2
}
    9694:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
    9698:	0001883a 	nop
    969c:	e037883a 	mov	sp,fp
    96a0:	dfc00117 	ldw	ra,4(sp)
    96a4:	df000017 	ldw	fp,0(sp)
    96a8:	dec00204 	addi	sp,sp,8
    96ac:	f800283a 	ret

000096b0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    96b0:	defff804 	addi	sp,sp,-32
    96b4:	dfc00715 	stw	ra,28(sp)
    96b8:	df000615 	stw	fp,24(sp)
    96bc:	df000604 	addi	fp,sp,24
    96c0:	e13ffe15 	stw	r4,-8(fp)
    96c4:	e17ffd15 	stw	r5,-12(fp)
    96c8:	e1bffc15 	stw	r6,-16(fp)
    96cc:	e1fffb15 	stw	r7,-20(fp)
    96d0:	e0bffb17 	ldw	r2,-20(fp)
    96d4:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    96d8:	d0a0cb17 	ldw	r2,-31956(gp)
    96dc:	1000031e 	bne	r2,zero,96ec <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
    96e0:	e0bfff17 	ldw	r2,-4(fp)
    96e4:	d0a0cb15 	stw	r2,-31956(gp)
    return 0;
    96e8:	00000106 	br	96f0 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
    96ec:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    96f0:	e0bffe17 	ldw	r2,-8(fp)
    96f4:	10800104 	addi	r2,r2,4
    96f8:	00c001c4 	movi	r3,7
    96fc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    9700:	d8000015 	stw	zero,0(sp)
    9704:	e1fffe17 	ldw	r7,-8(fp)
    9708:	01800074 	movhi	r6,1
    970c:	31a58d04 	addi	r6,r6,-27084
    9710:	e17ffc17 	ldw	r5,-16(fp)
    9714:	e13ffd17 	ldw	r4,-12(fp)
    9718:	0009b340 	call	9b34 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    971c:	0001883a 	nop
    9720:	e037883a 	mov	sp,fp
    9724:	dfc00117 	ldw	ra,4(sp)
    9728:	df000017 	ldw	fp,0(sp)
    972c:	dec00204 	addi	sp,sp,8
    9730:	f800283a 	ret

00009734 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    9734:	defffa04 	addi	sp,sp,-24
    9738:	dfc00515 	stw	ra,20(sp)
    973c:	df000415 	stw	fp,16(sp)
    9740:	df000404 	addi	fp,sp,16
    9744:	e13ffc15 	stw	r4,-16(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    9748:	008000c4 	movi	r2,3
    974c:	e0bffe15 	stw	r2,-8(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    9750:	014003f4 	movhi	r5,15
    9754:	29509004 	addi	r5,r5,16960
    9758:	e13ffe17 	ldw	r4,-8(fp)
    975c:	00090440 	call	9044 <__mulsi3>
    9760:	100b883a 	mov	r5,r2
    9764:	0100bef4 	movhi	r4,763
    9768:	213c2004 	addi	r4,r4,-3968
    976c:	00087080 	call	8708 <__udivsi3>
  big_loops = us / (INT_MAX/
    9770:	100b883a 	mov	r5,r2
    9774:	01200034 	movhi	r4,32768
    9778:	213fffc4 	addi	r4,r4,-1
    977c:	00087080 	call	8708 <__udivsi3>
    9780:	100b883a 	mov	r5,r2
    9784:	e13ffc17 	ldw	r4,-16(fp)
    9788:	00087080 	call	8708 <__udivsi3>
    978c:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
    9790:	e0bffd17 	ldw	r2,-12(fp)
    9794:	10002a26 	beq	r2,zero,9840 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    9798:	e03fff15 	stw	zero,-4(fp)
    979c:	00001706 	br	97fc <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    97a0:	00a00034 	movhi	r2,32768
    97a4:	10bfffc4 	addi	r2,r2,-1
    97a8:	10bfffc4 	addi	r2,r2,-1
    97ac:	103ffe1e 	bne	r2,zero,97a8 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    97b0:	014003f4 	movhi	r5,15
    97b4:	29509004 	addi	r5,r5,16960
    97b8:	e13ffe17 	ldw	r4,-8(fp)
    97bc:	00090440 	call	9044 <__mulsi3>
      us -= (INT_MAX/(ALT_CPU_FREQ/
    97c0:	100b883a 	mov	r5,r2
    97c4:	0100bef4 	movhi	r4,763
    97c8:	213c2004 	addi	r4,r4,-3968
    97cc:	00087080 	call	8708 <__udivsi3>
    97d0:	100b883a 	mov	r5,r2
    97d4:	01200034 	movhi	r4,32768
    97d8:	213fffc4 	addi	r4,r4,-1
    97dc:	00087080 	call	8708 <__udivsi3>
    97e0:	1007883a 	mov	r3,r2
    97e4:	e0bffc17 	ldw	r2,-16(fp)
    97e8:	10c5c83a 	sub	r2,r2,r3
    97ec:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
    97f0:	e0bfff17 	ldw	r2,-4(fp)
    97f4:	10800044 	addi	r2,r2,1
    97f8:	e0bfff15 	stw	r2,-4(fp)
    97fc:	e0ffff17 	ldw	r3,-4(fp)
    9800:	e0bffd17 	ldw	r2,-12(fp)
    9804:	18bfe616 	blt	r3,r2,97a0 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    9808:	014003f4 	movhi	r5,15
    980c:	29509004 	addi	r5,r5,16960
    9810:	e13ffe17 	ldw	r4,-8(fp)
    9814:	00090440 	call	9044 <__mulsi3>
    9818:	100b883a 	mov	r5,r2
    981c:	0100bef4 	movhi	r4,763
    9820:	213c2004 	addi	r4,r4,-3968
    9824:	00087080 	call	8708 <__udivsi3>
    9828:	e17ffc17 	ldw	r5,-16(fp)
    982c:	1009883a 	mov	r4,r2
    9830:	00090440 	call	9044 <__mulsi3>
    __asm__ volatile (
    9834:	10bfffc4 	addi	r2,r2,-1
    9838:	103ffe1e 	bne	r2,zero,9834 <alt_busy_sleep+0x100>
    983c:	00000d06 	br	9874 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    9840:	014003f4 	movhi	r5,15
    9844:	29509004 	addi	r5,r5,16960
    9848:	e13ffe17 	ldw	r4,-8(fp)
    984c:	00090440 	call	9044 <__mulsi3>
    9850:	100b883a 	mov	r5,r2
    9854:	0100bef4 	movhi	r4,763
    9858:	213c2004 	addi	r4,r4,-3968
    985c:	00087080 	call	8708 <__udivsi3>
    9860:	e17ffc17 	ldw	r5,-16(fp)
    9864:	1009883a 	mov	r4,r2
    9868:	00090440 	call	9044 <__mulsi3>
    __asm__ volatile (
    986c:	10bfffc4 	addi	r2,r2,-1
    9870:	00bffe16 	blt	zero,r2,986c <alt_busy_sleep+0x138>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    9874:	0005883a 	mov	r2,zero
}
    9878:	e037883a 	mov	sp,fp
    987c:	dfc00117 	ldw	ra,4(sp)
    9880:	df000017 	ldw	fp,0(sp)
    9884:	dec00204 	addi	sp,sp,8
    9888:	f800283a 	ret

0000988c <alt_get_errno>:
{
    988c:	defffe04 	addi	sp,sp,-8
    9890:	dfc00115 	stw	ra,4(sp)
    9894:	df000015 	stw	fp,0(sp)
    9898:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    989c:	d0a00717 	ldw	r2,-32740(gp)
    98a0:	10000326 	beq	r2,zero,98b0 <alt_get_errno+0x24>
    98a4:	d0a00717 	ldw	r2,-32740(gp)
    98a8:	103ee83a 	callr	r2
    98ac:	00000106 	br	98b4 <alt_get_errno+0x28>
    98b0:	d0a0c604 	addi	r2,gp,-31976
}
    98b4:	e037883a 	mov	sp,fp
    98b8:	dfc00117 	ldw	ra,4(sp)
    98bc:	df000017 	ldw	fp,0(sp)
    98c0:	dec00204 	addi	sp,sp,8
    98c4:	f800283a 	ret

000098c8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    98c8:	defffb04 	addi	sp,sp,-20
    98cc:	dfc00415 	stw	ra,16(sp)
    98d0:	df000315 	stw	fp,12(sp)
    98d4:	df000304 	addi	fp,sp,12
    98d8:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    98dc:	e0bffd17 	ldw	r2,-12(fp)
    98e0:	10000916 	blt	r2,zero,9908 <close+0x40>
    98e4:	e0fffd17 	ldw	r3,-12(fp)
    98e8:	1805883a 	mov	r2,r3
    98ec:	1085883a 	add	r2,r2,r2
    98f0:	10c5883a 	add	r2,r2,r3
    98f4:	100490ba 	slli	r2,r2,2
    98f8:	00c00074 	movhi	r3,1
    98fc:	18ead204 	addi	r3,r3,-21688
    9900:	10c5883a 	add	r2,r2,r3
    9904:	00000106 	br	990c <close+0x44>
    9908:	0005883a 	mov	r2,zero
    990c:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
    9910:	e0bfff17 	ldw	r2,-4(fp)
    9914:	10001926 	beq	r2,zero,997c <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9918:	e0bfff17 	ldw	r2,-4(fp)
    991c:	10800017 	ldw	r2,0(r2)
    9920:	10800417 	ldw	r2,16(r2)
    9924:	10000626 	beq	r2,zero,9940 <close+0x78>
    9928:	e0bfff17 	ldw	r2,-4(fp)
    992c:	10800017 	ldw	r2,0(r2)
    9930:	10800417 	ldw	r2,16(r2)
    9934:	e13fff17 	ldw	r4,-4(fp)
    9938:	103ee83a 	callr	r2
    993c:	00000106 	br	9944 <close+0x7c>
    9940:	0005883a 	mov	r2,zero
    9944:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9948:	e13ffd17 	ldw	r4,-12(fp)
    994c:	000a1940 	call	a194 <alt_release_fd>
    if (rval < 0)
    9950:	e0bffe17 	ldw	r2,-8(fp)
    9954:	1000070e 	bge	r2,zero,9974 <close+0xac>
    {
      ALT_ERRNO = -rval;
    9958:	000988c0 	call	988c <alt_get_errno>
    995c:	1007883a 	mov	r3,r2
    9960:	e0bffe17 	ldw	r2,-8(fp)
    9964:	0085c83a 	sub	r2,zero,r2
    9968:	18800015 	stw	r2,0(r3)
      return -1;
    996c:	00bfffc4 	movi	r2,-1
    9970:	00000706 	br	9990 <close+0xc8>
    }
    return 0;
    9974:	0005883a 	mov	r2,zero
    9978:	00000506 	br	9990 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    997c:	000988c0 	call	988c <alt_get_errno>
    9980:	1007883a 	mov	r3,r2
    9984:	00801444 	movi	r2,81
    9988:	18800015 	stw	r2,0(r3)
    return -1;
    998c:	00bfffc4 	movi	r2,-1
  }
}
    9990:	e037883a 	mov	sp,fp
    9994:	dfc00117 	ldw	ra,4(sp)
    9998:	df000017 	ldw	fp,0(sp)
    999c:	dec00204 	addi	sp,sp,8
    99a0:	f800283a 	ret

000099a4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    99a4:	defffe04 	addi	sp,sp,-8
    99a8:	df000115 	stw	fp,4(sp)
    99ac:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    99b0:	e03fff15 	stw	zero,-4(fp)
    99b4:	00000506 	br	99cc <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    99b8:	e0bfff17 	ldw	r2,-4(fp)
    99bc:	1000003b 	flushd	0(r2)
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    99c0:	e0bfff17 	ldw	r2,-4(fp)
    99c4:	10800804 	addi	r2,r2,32
    99c8:	e0bfff15 	stw	r2,-4(fp)
    99cc:	e0bfff17 	ldw	r2,-4(fp)
    99d0:	10820030 	cmpltui	r2,r2,2048
    99d4:	103ff81e 	bne	r2,zero,99b8 <alt_dcache_flush_all+0x14>
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    99d8:	0001883a 	nop
    99dc:	0001883a 	nop
    99e0:	e037883a 	mov	sp,fp
    99e4:	df000017 	ldw	fp,0(sp)
    99e8:	dec00104 	addi	sp,sp,4
    99ec:	f800283a 	ret

000099f0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    99f0:	defffc04 	addi	sp,sp,-16
    99f4:	df000315 	stw	fp,12(sp)
    99f8:	df000304 	addi	fp,sp,12
    99fc:	e13fff15 	stw	r4,-4(fp)
    9a00:	e17ffe15 	stw	r5,-8(fp)
    9a04:	e1bffd15 	stw	r6,-12(fp)
  return len;
    9a08:	e0bffd17 	ldw	r2,-12(fp)
}
    9a0c:	e037883a 	mov	sp,fp
    9a10:	df000017 	ldw	fp,0(sp)
    9a14:	dec00104 	addi	sp,sp,4
    9a18:	f800283a 	ret

00009a1c <alt_get_errno>:
{
    9a1c:	defffe04 	addi	sp,sp,-8
    9a20:	dfc00115 	stw	ra,4(sp)
    9a24:	df000015 	stw	fp,0(sp)
    9a28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9a2c:	d0a00717 	ldw	r2,-32740(gp)
    9a30:	10000326 	beq	r2,zero,9a40 <alt_get_errno+0x24>
    9a34:	d0a00717 	ldw	r2,-32740(gp)
    9a38:	103ee83a 	callr	r2
    9a3c:	00000106 	br	9a44 <alt_get_errno+0x28>
    9a40:	d0a0c604 	addi	r2,gp,-31976
}
    9a44:	e037883a 	mov	sp,fp
    9a48:	dfc00117 	ldw	ra,4(sp)
    9a4c:	df000017 	ldw	fp,0(sp)
    9a50:	dec00204 	addi	sp,sp,8
    9a54:	f800283a 	ret

00009a58 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    9a58:	defffa04 	addi	sp,sp,-24
    9a5c:	dfc00515 	stw	ra,20(sp)
    9a60:	df000415 	stw	fp,16(sp)
    9a64:	df000404 	addi	fp,sp,16
    9a68:	e13ffd15 	stw	r4,-12(fp)
    9a6c:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    9a70:	e0bffd17 	ldw	r2,-12(fp)
    9a74:	10000326 	beq	r2,zero,9a84 <alt_dev_llist_insert+0x2c>
    9a78:	e0bffd17 	ldw	r2,-12(fp)
    9a7c:	10800217 	ldw	r2,8(r2)
    9a80:	1000061e 	bne	r2,zero,9a9c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    9a84:	0009a1c0 	call	9a1c <alt_get_errno>
    9a88:	1007883a 	mov	r3,r2
    9a8c:	00800584 	movi	r2,22
    9a90:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    9a94:	00bffa84 	movi	r2,-22
    9a98:	00001406 	br	9aec <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    9a9c:	e0bffd17 	ldw	r2,-12(fp)
    9aa0:	e0fffc17 	ldw	r3,-16(fp)
    9aa4:	e0ffff15 	stw	r3,-4(fp)
    9aa8:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    9aac:	e0bffe17 	ldw	r2,-8(fp)
    9ab0:	e0ffff17 	ldw	r3,-4(fp)
    9ab4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    9ab8:	e0bfff17 	ldw	r2,-4(fp)
    9abc:	10c00017 	ldw	r3,0(r2)
    9ac0:	e0bffe17 	ldw	r2,-8(fp)
    9ac4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    9ac8:	e0bfff17 	ldw	r2,-4(fp)
    9acc:	10800017 	ldw	r2,0(r2)
    9ad0:	e0fffe17 	ldw	r3,-8(fp)
    9ad4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    9ad8:	e0bfff17 	ldw	r2,-4(fp)
    9adc:	e0fffe17 	ldw	r3,-8(fp)
    9ae0:	10c00015 	stw	r3,0(r2)
}
    9ae4:	0001883a 	nop

  return 0;  
    9ae8:	0005883a 	mov	r2,zero
}
    9aec:	e037883a 	mov	sp,fp
    9af0:	dfc00117 	ldw	ra,4(sp)
    9af4:	df000017 	ldw	fp,0(sp)
    9af8:	dec00204 	addi	sp,sp,8
    9afc:	f800283a 	ret

00009b00 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    9b00:	defffe04 	addi	sp,sp,-8
    9b04:	dfc00115 	stw	ra,4(sp)
    9b08:	df000015 	stw	fp,0(sp)
    9b0c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    9b10:	01420004 	movi	r5,2048
    9b14:	0009883a 	mov	r4,zero
    9b18:	000a6240 	call	a624 <alt_icache_flush>
#endif
}
    9b1c:	0001883a 	nop
    9b20:	e037883a 	mov	sp,fp
    9b24:	dfc00117 	ldw	ra,4(sp)
    9b28:	df000017 	ldw	fp,0(sp)
    9b2c:	dec00204 	addi	sp,sp,8
    9b30:	f800283a 	ret

00009b34 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9b34:	defff904 	addi	sp,sp,-28
    9b38:	dfc00615 	stw	ra,24(sp)
    9b3c:	df000515 	stw	fp,20(sp)
    9b40:	df000504 	addi	fp,sp,20
    9b44:	e13fff15 	stw	r4,-4(fp)
    9b48:	e17ffe15 	stw	r5,-8(fp)
    9b4c:	e1bffd15 	stw	r6,-12(fp)
    9b50:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    9b54:	e0800217 	ldw	r2,8(fp)
    9b58:	d8800015 	stw	r2,0(sp)
    9b5c:	e1fffc17 	ldw	r7,-16(fp)
    9b60:	e1bffd17 	ldw	r6,-12(fp)
    9b64:	e17ffe17 	ldw	r5,-8(fp)
    9b68:	e13fff17 	ldw	r4,-4(fp)
    9b6c:	0009ce40 	call	9ce4 <alt_iic_isr_register>
}  
    9b70:	e037883a 	mov	sp,fp
    9b74:	dfc00117 	ldw	ra,4(sp)
    9b78:	df000017 	ldw	fp,0(sp)
    9b7c:	dec00204 	addi	sp,sp,8
    9b80:	f800283a 	ret

00009b84 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    9b84:	defff904 	addi	sp,sp,-28
    9b88:	df000615 	stw	fp,24(sp)
    9b8c:	df000604 	addi	fp,sp,24
    9b90:	e13ffb15 	stw	r4,-20(fp)
    9b94:	e17ffa15 	stw	r5,-24(fp)
    9b98:	e0bffa17 	ldw	r2,-24(fp)
    9b9c:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
    9ba0:	0005303a 	rdctl	r2,status
    9ba4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9ba8:	e0fffe17 	ldw	r3,-8(fp)
    9bac:	00bfff84 	movi	r2,-2
    9bb0:	1884703a 	and	r2,r3,r2
    9bb4:	1001703a 	wrctl	status,r2
  return context;
    9bb8:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    9bbc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    9bc0:	00c00044 	movi	r3,1
    9bc4:	e0bfff17 	ldw	r2,-4(fp)
    9bc8:	1884983a 	sll	r2,r3,r2
    9bcc:	1007883a 	mov	r3,r2
    9bd0:	d0a0ca17 	ldw	r2,-31960(gp)
    9bd4:	1884b03a 	or	r2,r3,r2
    9bd8:	d0a0ca15 	stw	r2,-31960(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9bdc:	d0a0ca17 	ldw	r2,-31960(gp)
    9be0:	100170fa 	wrctl	ienable,r2
    9be4:	e0bffd17 	ldw	r2,-12(fp)
    9be8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    9bec:	e0bffc17 	ldw	r2,-16(fp)
    9bf0:	1001703a 	wrctl	status,r2
}
    9bf4:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
    9bf8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    9bfc:	e037883a 	mov	sp,fp
    9c00:	df000017 	ldw	fp,0(sp)
    9c04:	dec00104 	addi	sp,sp,4
    9c08:	f800283a 	ret

00009c0c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    9c0c:	defff904 	addi	sp,sp,-28
    9c10:	df000615 	stw	fp,24(sp)
    9c14:	df000604 	addi	fp,sp,24
    9c18:	e13ffb15 	stw	r4,-20(fp)
    9c1c:	e17ffa15 	stw	r5,-24(fp)
    9c20:	e0bffa17 	ldw	r2,-24(fp)
    9c24:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
    9c28:	0005303a 	rdctl	r2,status
    9c2c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9c30:	e0fffe17 	ldw	r3,-8(fp)
    9c34:	00bfff84 	movi	r2,-2
    9c38:	1884703a 	and	r2,r3,r2
    9c3c:	1001703a 	wrctl	status,r2
  return context;
    9c40:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
    9c44:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
    9c48:	00c00044 	movi	r3,1
    9c4c:	e0bfff17 	ldw	r2,-4(fp)
    9c50:	1884983a 	sll	r2,r3,r2
    9c54:	0084303a 	nor	r2,zero,r2
    9c58:	1007883a 	mov	r3,r2
    9c5c:	d0a0ca17 	ldw	r2,-31960(gp)
    9c60:	1884703a 	and	r2,r3,r2
    9c64:	d0a0ca15 	stw	r2,-31960(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9c68:	d0a0ca17 	ldw	r2,-31960(gp)
    9c6c:	100170fa 	wrctl	ienable,r2
    9c70:	e0bffd17 	ldw	r2,-12(fp)
    9c74:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    9c78:	e0bffc17 	ldw	r2,-16(fp)
    9c7c:	1001703a 	wrctl	status,r2
}
    9c80:	0001883a 	nop
  return 0;
    9c84:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    9c88:	e037883a 	mov	sp,fp
    9c8c:	df000017 	ldw	fp,0(sp)
    9c90:	dec00104 	addi	sp,sp,4
    9c94:	f800283a 	ret

00009c98 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    9c98:	defffc04 	addi	sp,sp,-16
    9c9c:	df000315 	stw	fp,12(sp)
    9ca0:	df000304 	addi	fp,sp,12
    9ca4:	e13ffe15 	stw	r4,-8(fp)
    9ca8:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    9cac:	000530fa 	rdctl	r2,ienable
    9cb0:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    9cb4:	00c00044 	movi	r3,1
    9cb8:	e0bffd17 	ldw	r2,-12(fp)
    9cbc:	1884983a 	sll	r2,r3,r2
    9cc0:	1007883a 	mov	r3,r2
    9cc4:	e0bfff17 	ldw	r2,-4(fp)
    9cc8:	1884703a 	and	r2,r3,r2
    9ccc:	1004c03a 	cmpne	r2,r2,zero
    9cd0:	10803fcc 	andi	r2,r2,255
}
    9cd4:	e037883a 	mov	sp,fp
    9cd8:	df000017 	ldw	fp,0(sp)
    9cdc:	dec00104 	addi	sp,sp,4
    9ce0:	f800283a 	ret

00009ce4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9ce4:	defff504 	addi	sp,sp,-44
    9ce8:	dfc00a15 	stw	ra,40(sp)
    9cec:	df000915 	stw	fp,36(sp)
    9cf0:	df000904 	addi	fp,sp,36
    9cf4:	e13ffa15 	stw	r4,-24(fp)
    9cf8:	e17ff915 	stw	r5,-28(fp)
    9cfc:	e1bff815 	stw	r6,-32(fp)
    9d00:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
    9d04:	00bffa84 	movi	r2,-22
    9d08:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    9d0c:	e0bff917 	ldw	r2,-28(fp)
    9d10:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    9d14:	e0bffe17 	ldw	r2,-8(fp)
    9d18:	10800808 	cmpgei	r2,r2,32
    9d1c:	1000251e 	bne	r2,zero,9db4 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
    9d20:	0005303a 	rdctl	r2,status
    9d24:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9d28:	e0fffc17 	ldw	r3,-16(fp)
    9d2c:	00bfff84 	movi	r2,-2
    9d30:	1884703a 	and	r2,r3,r2
    9d34:	1001703a 	wrctl	status,r2
  return context;
    9d38:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    9d3c:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
    9d40:	e0bffe17 	ldw	r2,-8(fp)
    9d44:	100890fa 	slli	r4,r2,3
    9d48:	e0fff817 	ldw	r3,-32(fp)
    9d4c:	00800074 	movhi	r2,1
    9d50:	2085883a 	add	r2,r4,r2
    9d54:	10ec0015 	stw	r3,-20480(r2)
    alt_irq[id].context = isr_context;
    9d58:	e0bffe17 	ldw	r2,-8(fp)
    9d5c:	100890fa 	slli	r4,r2,3
    9d60:	e0fff717 	ldw	r3,-36(fp)
    9d64:	00800074 	movhi	r2,1
    9d68:	2085883a 	add	r2,r4,r2
    9d6c:	10ec0115 	stw	r3,-20476(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    9d70:	e0bff817 	ldw	r2,-32(fp)
    9d74:	10000526 	beq	r2,zero,9d8c <alt_iic_isr_register+0xa8>
    9d78:	e0bffe17 	ldw	r2,-8(fp)
    9d7c:	100b883a 	mov	r5,r2
    9d80:	e13ffa17 	ldw	r4,-24(fp)
    9d84:	0009b840 	call	9b84 <alt_ic_irq_enable>
    9d88:	00000406 	br	9d9c <alt_iic_isr_register+0xb8>
    9d8c:	e0bffe17 	ldw	r2,-8(fp)
    9d90:	100b883a 	mov	r5,r2
    9d94:	e13ffa17 	ldw	r4,-24(fp)
    9d98:	0009c0c0 	call	9c0c <alt_ic_irq_disable>
    9d9c:	e0bfff15 	stw	r2,-4(fp)
    9da0:	e0bffd17 	ldw	r2,-12(fp)
    9da4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    9da8:	e0bffb17 	ldw	r2,-20(fp)
    9dac:	1001703a 	wrctl	status,r2
}
    9db0:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
    9db4:	e0bfff17 	ldw	r2,-4(fp)
}
    9db8:	e037883a 	mov	sp,fp
    9dbc:	dfc00117 	ldw	ra,4(sp)
    9dc0:	df000017 	ldw	fp,0(sp)
    9dc4:	dec00204 	addi	sp,sp,8
    9dc8:	f800283a 	ret

00009dcc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    9dcc:	defff904 	addi	sp,sp,-28
    9dd0:	dfc00615 	stw	ra,24(sp)
    9dd4:	df000515 	stw	fp,20(sp)
    9dd8:	df000504 	addi	fp,sp,20
    9ddc:	e13ffe15 	stw	r4,-8(fp)
    9de0:	e17ffd15 	stw	r5,-12(fp)
    9de4:	e1bffc15 	stw	r6,-16(fp)
    9de8:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
    9dec:	e1bffb17 	ldw	r6,-20(fp)
    9df0:	e17ffc17 	ldw	r5,-16(fp)
    9df4:	e13ffd17 	ldw	r4,-12(fp)
    9df8:	000a0340 	call	a034 <open>
    9dfc:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
    9e00:	e0bfff17 	ldw	r2,-4(fp)
    9e04:	10002016 	blt	r2,zero,9e88 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
    9e08:	e0ffff17 	ldw	r3,-4(fp)
    9e0c:	1805883a 	mov	r2,r3
    9e10:	1085883a 	add	r2,r2,r2
    9e14:	10c5883a 	add	r2,r2,r3
    9e18:	100490ba 	slli	r2,r2,2
    9e1c:	00c00074 	movhi	r3,1
    9e20:	10c7883a 	add	r3,r2,r3
    9e24:	18ead217 	ldw	r3,-21688(r3)
    9e28:	e0bffe17 	ldw	r2,-8(fp)
    9e2c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    9e30:	e0ffff17 	ldw	r3,-4(fp)
    9e34:	1805883a 	mov	r2,r3
    9e38:	1085883a 	add	r2,r2,r2
    9e3c:	10c5883a 	add	r2,r2,r3
    9e40:	100490ba 	slli	r2,r2,2
    9e44:	00c00074 	movhi	r3,1
    9e48:	10c7883a 	add	r3,r2,r3
    9e4c:	18ead317 	ldw	r3,-21684(r3)
    9e50:	e0bffe17 	ldw	r2,-8(fp)
    9e54:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    9e58:	e0ffff17 	ldw	r3,-4(fp)
    9e5c:	1805883a 	mov	r2,r3
    9e60:	1085883a 	add	r2,r2,r2
    9e64:	10c5883a 	add	r2,r2,r3
    9e68:	100490ba 	slli	r2,r2,2
    9e6c:	00c00074 	movhi	r3,1
    9e70:	10c7883a 	add	r3,r2,r3
    9e74:	18ead417 	ldw	r3,-21680(r3)
    9e78:	e0bffe17 	ldw	r2,-8(fp)
    9e7c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    9e80:	e13fff17 	ldw	r4,-4(fp)
    9e84:	000a1940 	call	a194 <alt_release_fd>
  }
} 
    9e88:	0001883a 	nop
    9e8c:	e037883a 	mov	sp,fp
    9e90:	dfc00117 	ldw	ra,4(sp)
    9e94:	df000017 	ldw	fp,0(sp)
    9e98:	dec00204 	addi	sp,sp,8
    9e9c:	f800283a 	ret

00009ea0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    9ea0:	defffb04 	addi	sp,sp,-20
    9ea4:	dfc00415 	stw	ra,16(sp)
    9ea8:	df000315 	stw	fp,12(sp)
    9eac:	df000304 	addi	fp,sp,12
    9eb0:	e13fff15 	stw	r4,-4(fp)
    9eb4:	e17ffe15 	stw	r5,-8(fp)
    9eb8:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    9ebc:	01c07fc4 	movi	r7,511
    9ec0:	01800044 	movi	r6,1
    9ec4:	e17fff17 	ldw	r5,-4(fp)
    9ec8:	01000074 	movhi	r4,1
    9ecc:	212ad504 	addi	r4,r4,-21676
    9ed0:	0009dcc0 	call	9dcc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    9ed4:	01c07fc4 	movi	r7,511
    9ed8:	000d883a 	mov	r6,zero
    9edc:	e17ffe17 	ldw	r5,-8(fp)
    9ee0:	01000074 	movhi	r4,1
    9ee4:	212ad204 	addi	r4,r4,-21688
    9ee8:	0009dcc0 	call	9dcc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    9eec:	01c07fc4 	movi	r7,511
    9ef0:	01800044 	movi	r6,1
    9ef4:	e17ffd17 	ldw	r5,-12(fp)
    9ef8:	01000074 	movhi	r4,1
    9efc:	212ad804 	addi	r4,r4,-21664
    9f00:	0009dcc0 	call	9dcc <alt_open_fd>
}  
    9f04:	0001883a 	nop
    9f08:	e037883a 	mov	sp,fp
    9f0c:	dfc00117 	ldw	ra,4(sp)
    9f10:	df000017 	ldw	fp,0(sp)
    9f14:	dec00204 	addi	sp,sp,8
    9f18:	f800283a 	ret

00009f1c <alt_get_errno>:
{
    9f1c:	defffe04 	addi	sp,sp,-8
    9f20:	dfc00115 	stw	ra,4(sp)
    9f24:	df000015 	stw	fp,0(sp)
    9f28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9f2c:	d0a00717 	ldw	r2,-32740(gp)
    9f30:	10000326 	beq	r2,zero,9f40 <alt_get_errno+0x24>
    9f34:	d0a00717 	ldw	r2,-32740(gp)
    9f38:	103ee83a 	callr	r2
    9f3c:	00000106 	br	9f44 <alt_get_errno+0x28>
    9f40:	d0a0c604 	addi	r2,gp,-31976
}
    9f44:	e037883a 	mov	sp,fp
    9f48:	dfc00117 	ldw	ra,4(sp)
    9f4c:	df000017 	ldw	fp,0(sp)
    9f50:	dec00204 	addi	sp,sp,8
    9f54:	f800283a 	ret

00009f58 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    9f58:	defffd04 	addi	sp,sp,-12
    9f5c:	df000215 	stw	fp,8(sp)
    9f60:	df000204 	addi	fp,sp,8
    9f64:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    9f68:	e0bffe17 	ldw	r2,-8(fp)
    9f6c:	10800217 	ldw	r2,8(r2)
    9f70:	10d00034 	orhi	r3,r2,16384
    9f74:	e0bffe17 	ldw	r2,-8(fp)
    9f78:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9f7c:	e03fff15 	stw	zero,-4(fp)
    9f80:	00002306 	br	a010 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9f84:	e0ffff17 	ldw	r3,-4(fp)
    9f88:	1805883a 	mov	r2,r3
    9f8c:	1085883a 	add	r2,r2,r2
    9f90:	10c5883a 	add	r2,r2,r3
    9f94:	100490ba 	slli	r2,r2,2
    9f98:	00c00074 	movhi	r3,1
    9f9c:	10c7883a 	add	r3,r2,r3
    9fa0:	18ead217 	ldw	r3,-21688(r3)
    9fa4:	e0bffe17 	ldw	r2,-8(fp)
    9fa8:	10800017 	ldw	r2,0(r2)
    9fac:	1880151e 	bne	r3,r2,a004 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    9fb0:	e0ffff17 	ldw	r3,-4(fp)
    9fb4:	1805883a 	mov	r2,r3
    9fb8:	1085883a 	add	r2,r2,r2
    9fbc:	10c5883a 	add	r2,r2,r3
    9fc0:	100490ba 	slli	r2,r2,2
    9fc4:	00c00074 	movhi	r3,1
    9fc8:	10c7883a 	add	r3,r2,r3
    9fcc:	18aad417 	ldw	r2,-21680(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
    9fd0:	10000c0e 	bge	r2,zero,a004 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
    9fd4:	e0ffff17 	ldw	r3,-4(fp)
    9fd8:	1805883a 	mov	r2,r3
    9fdc:	1085883a 	add	r2,r2,r2
    9fe0:	10c5883a 	add	r2,r2,r3
    9fe4:	100490ba 	slli	r2,r2,2
    9fe8:	00c00074 	movhi	r3,1
    9fec:	18ead204 	addi	r3,r3,-21688
    9ff0:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    9ff4:	e0fffe17 	ldw	r3,-8(fp)
    9ff8:	18800226 	beq	r3,r2,a004 <alt_file_locked+0xac>
    {
      return -EACCES;
    9ffc:	00bffcc4 	movi	r2,-13
    a000:	00000806 	br	a024 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
    a004:	e0bfff17 	ldw	r2,-4(fp)
    a008:	10800044 	addi	r2,r2,1
    a00c:	e0bfff15 	stw	r2,-4(fp)
    a010:	d0a00617 	ldw	r2,-32744(gp)
    a014:	1007883a 	mov	r3,r2
    a018:	e0bfff17 	ldw	r2,-4(fp)
    a01c:	18bfd92e 	bgeu	r3,r2,9f84 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    a020:	0005883a 	mov	r2,zero
}
    a024:	e037883a 	mov	sp,fp
    a028:	df000017 	ldw	fp,0(sp)
    a02c:	dec00104 	addi	sp,sp,4
    a030:	f800283a 	ret

0000a034 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    a034:	defff604 	addi	sp,sp,-40
    a038:	dfc00915 	stw	ra,36(sp)
    a03c:	df000815 	stw	fp,32(sp)
    a040:	df000804 	addi	fp,sp,32
    a044:	e13ffa15 	stw	r4,-24(fp)
    a048:	e17ff915 	stw	r5,-28(fp)
    a04c:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    a050:	00bfffc4 	movi	r2,-1
    a054:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
    a058:	00bffb44 	movi	r2,-19
    a05c:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
    a060:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    a064:	d1600404 	addi	r5,gp,-32752
    a068:	e13ffa17 	ldw	r4,-24(fp)
    a06c:	000a3d40 	call	a3d4 <alt_find_dev>
    a070:	e0bfff15 	stw	r2,-4(fp)
    a074:	e0bfff17 	ldw	r2,-4(fp)
    a078:	1000051e 	bne	r2,zero,a090 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    a07c:	e13ffa17 	ldw	r4,-24(fp)
    a080:	000a4640 	call	a464 <alt_find_file>
    a084:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
    a088:	00800044 	movi	r2,1
    a08c:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    a090:	e0bfff17 	ldw	r2,-4(fp)
    a094:	10002c26 	beq	r2,zero,a148 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
    a098:	e13fff17 	ldw	r4,-4(fp)
    a09c:	000a56c0 	call	a56c <alt_get_fd>
    a0a0:	e0bffe15 	stw	r2,-8(fp)
    a0a4:	e0bffe17 	ldw	r2,-8(fp)
    a0a8:	1000030e 	bge	r2,zero,a0b8 <open+0x84>
    {
      status = index;
    a0ac:	e0bffe17 	ldw	r2,-8(fp)
    a0b0:	e0bffd15 	stw	r2,-12(fp)
    a0b4:	00002606 	br	a150 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
    a0b8:	e0fffe17 	ldw	r3,-8(fp)
    a0bc:	1805883a 	mov	r2,r3
    a0c0:	1085883a 	add	r2,r2,r2
    a0c4:	10c5883a 	add	r2,r2,r3
    a0c8:	100490ba 	slli	r2,r2,2
    a0cc:	00c00074 	movhi	r3,1
    a0d0:	18ead204 	addi	r3,r3,-21688
    a0d4:	10c5883a 	add	r2,r2,r3
    a0d8:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    a0dc:	e0fff917 	ldw	r3,-28(fp)
    a0e0:	00900034 	movhi	r2,16384
    a0e4:	10bfffc4 	addi	r2,r2,-1
    a0e8:	1886703a 	and	r3,r3,r2
    a0ec:	e0bffb17 	ldw	r2,-20(fp)
    a0f0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    a0f4:	e0bffc17 	ldw	r2,-16(fp)
    a0f8:	1000051e 	bne	r2,zero,a110 <open+0xdc>
    a0fc:	e13ffb17 	ldw	r4,-20(fp)
    a100:	0009f580 	call	9f58 <alt_file_locked>
    a104:	e0bffd15 	stw	r2,-12(fp)
    a108:	e0bffd17 	ldw	r2,-12(fp)
    a10c:	10001016 	blt	r2,zero,a150 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    a110:	e0bfff17 	ldw	r2,-4(fp)
    a114:	10800317 	ldw	r2,12(r2)
    a118:	10000826 	beq	r2,zero,a13c <open+0x108>
    a11c:	e0bfff17 	ldw	r2,-4(fp)
    a120:	10800317 	ldw	r2,12(r2)
    a124:	e1fff817 	ldw	r7,-32(fp)
    a128:	e1bff917 	ldw	r6,-28(fp)
    a12c:	e17ffa17 	ldw	r5,-24(fp)
    a130:	e13ffb17 	ldw	r4,-20(fp)
    a134:	103ee83a 	callr	r2
    a138:	00000106 	br	a140 <open+0x10c>
    a13c:	0005883a 	mov	r2,zero
    a140:	e0bffd15 	stw	r2,-12(fp)
    a144:	00000206 	br	a150 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    a148:	00bffb44 	movi	r2,-19
    a14c:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    a150:	e0bffd17 	ldw	r2,-12(fp)
    a154:	1000090e 	bge	r2,zero,a17c <open+0x148>
  {
    alt_release_fd (index);  
    a158:	e13ffe17 	ldw	r4,-8(fp)
    a15c:	000a1940 	call	a194 <alt_release_fd>
    ALT_ERRNO = -status;
    a160:	0009f1c0 	call	9f1c <alt_get_errno>
    a164:	1007883a 	mov	r3,r2
    a168:	e0bffd17 	ldw	r2,-12(fp)
    a16c:	0085c83a 	sub	r2,zero,r2
    a170:	18800015 	stw	r2,0(r3)
    return -1;
    a174:	00bfffc4 	movi	r2,-1
    a178:	00000106 	br	a180 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
    a17c:	e0bffe17 	ldw	r2,-8(fp)
}
    a180:	e037883a 	mov	sp,fp
    a184:	dfc00117 	ldw	ra,4(sp)
    a188:	df000017 	ldw	fp,0(sp)
    a18c:	dec00204 	addi	sp,sp,8
    a190:	f800283a 	ret

0000a194 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    a194:	defffe04 	addi	sp,sp,-8
    a198:	df000115 	stw	fp,4(sp)
    a19c:	df000104 	addi	fp,sp,4
    a1a0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    a1a4:	e0bfff17 	ldw	r2,-4(fp)
    a1a8:	108000d0 	cmplti	r2,r2,3
    a1ac:	1000101e 	bne	r2,zero,a1f0 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
    a1b0:	e0ffff17 	ldw	r3,-4(fp)
    a1b4:	1805883a 	mov	r2,r3
    a1b8:	1085883a 	add	r2,r2,r2
    a1bc:	10c5883a 	add	r2,r2,r3
    a1c0:	100490ba 	slli	r2,r2,2
    a1c4:	00c00074 	movhi	r3,1
    a1c8:	10c7883a 	add	r3,r2,r3
    a1cc:	182ad415 	stw	zero,-21680(r3)
    alt_fd_list[fd].dev      = 0;
    a1d0:	e0ffff17 	ldw	r3,-4(fp)
    a1d4:	1805883a 	mov	r2,r3
    a1d8:	1085883a 	add	r2,r2,r2
    a1dc:	10c5883a 	add	r2,r2,r3
    a1e0:	100490ba 	slli	r2,r2,2
    a1e4:	00c00074 	movhi	r3,1
    a1e8:	10c7883a 	add	r3,r2,r3
    a1ec:	182ad215 	stw	zero,-21688(r3)
  }
}
    a1f0:	0001883a 	nop
    a1f4:	e037883a 	mov	sp,fp
    a1f8:	df000017 	ldw	fp,0(sp)
    a1fc:	dec00104 	addi	sp,sp,4
    a200:	f800283a 	ret

0000a204 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    a204:	defffa04 	addi	sp,sp,-24
    a208:	df000515 	stw	fp,20(sp)
    a20c:	df000504 	addi	fp,sp,20
    a210:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
    a214:	0005303a 	rdctl	r2,status
    a218:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a21c:	e0fffc17 	ldw	r3,-16(fp)
    a220:	00bfff84 	movi	r2,-2
    a224:	1884703a 	and	r2,r3,r2
    a228:	1001703a 	wrctl	status,r2
  return context;
    a22c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    a230:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
    a234:	e0bffb17 	ldw	r2,-20(fp)
    a238:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    a23c:	e0bffd17 	ldw	r2,-12(fp)
    a240:	10800017 	ldw	r2,0(r2)
    a244:	e0fffd17 	ldw	r3,-12(fp)
    a248:	18c00117 	ldw	r3,4(r3)
    a24c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    a250:	e0bffd17 	ldw	r2,-12(fp)
    a254:	10800117 	ldw	r2,4(r2)
    a258:	e0fffd17 	ldw	r3,-12(fp)
    a25c:	18c00017 	ldw	r3,0(r3)
    a260:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    a264:	e0bffd17 	ldw	r2,-12(fp)
    a268:	e0fffd17 	ldw	r3,-12(fp)
    a26c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    a270:	e0bffd17 	ldw	r2,-12(fp)
    a274:	e0fffd17 	ldw	r3,-12(fp)
    a278:	10c00015 	stw	r3,0(r2)
} 
    a27c:	0001883a 	nop
    a280:	e0bfff17 	ldw	r2,-4(fp)
    a284:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    a288:	e0bffe17 	ldw	r2,-8(fp)
    a28c:	1001703a 	wrctl	status,r2
}
    a290:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
    a294:	0001883a 	nop
    a298:	e037883a 	mov	sp,fp
    a29c:	df000017 	ldw	fp,0(sp)
    a2a0:	dec00104 	addi	sp,sp,4
    a2a4:	f800283a 	ret

0000a2a8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    a2a8:	defffb04 	addi	sp,sp,-20
    a2ac:	dfc00415 	stw	ra,16(sp)
    a2b0:	df000315 	stw	fp,12(sp)
    a2b4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    a2b8:	d0a00917 	ldw	r2,-32732(gp)
    a2bc:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    a2c0:	d0a0cc17 	ldw	r2,-31952(gp)
    a2c4:	10800044 	addi	r2,r2,1
    a2c8:	d0a0cc15 	stw	r2,-31952(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a2cc:	00002e06 	br	a388 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    a2d0:	e0bfff17 	ldw	r2,-4(fp)
    a2d4:	10800017 	ldw	r2,0(r2)
    a2d8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    a2dc:	e0bfff17 	ldw	r2,-4(fp)
    a2e0:	10800403 	ldbu	r2,16(r2)
    a2e4:	10803fcc 	andi	r2,r2,255
    a2e8:	10000426 	beq	r2,zero,a2fc <alt_tick+0x54>
    a2ec:	d0a0cc17 	ldw	r2,-31952(gp)
    a2f0:	1000021e 	bne	r2,zero,a2fc <alt_tick+0x54>
    {
      alarm->rollover = 0;
    a2f4:	e0bfff17 	ldw	r2,-4(fp)
    a2f8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    a2fc:	e0bfff17 	ldw	r2,-4(fp)
    a300:	10800217 	ldw	r2,8(r2)
    a304:	d0e0cc17 	ldw	r3,-31952(gp)
    a308:	18801d36 	bltu	r3,r2,a380 <alt_tick+0xd8>
    a30c:	e0bfff17 	ldw	r2,-4(fp)
    a310:	10800403 	ldbu	r2,16(r2)
    a314:	10803fcc 	andi	r2,r2,255
    a318:	1000191e 	bne	r2,zero,a380 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    a31c:	e0bfff17 	ldw	r2,-4(fp)
    a320:	10800317 	ldw	r2,12(r2)
    a324:	e0ffff17 	ldw	r3,-4(fp)
    a328:	18c00517 	ldw	r3,20(r3)
    a32c:	1809883a 	mov	r4,r3
    a330:	103ee83a 	callr	r2
    a334:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    a338:	e0bffd17 	ldw	r2,-12(fp)
    a33c:	1000031e 	bne	r2,zero,a34c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    a340:	e13fff17 	ldw	r4,-4(fp)
    a344:	000a2040 	call	a204 <alt_alarm_stop>
    a348:	00000d06 	br	a380 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    a34c:	e0bfff17 	ldw	r2,-4(fp)
    a350:	10c00217 	ldw	r3,8(r2)
    a354:	e0bffd17 	ldw	r2,-12(fp)
    a358:	1887883a 	add	r3,r3,r2
    a35c:	e0bfff17 	ldw	r2,-4(fp)
    a360:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    a364:	e0bfff17 	ldw	r2,-4(fp)
    a368:	10c00217 	ldw	r3,8(r2)
    a36c:	d0a0cc17 	ldw	r2,-31952(gp)
    a370:	1880032e 	bgeu	r3,r2,a380 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    a374:	e0bfff17 	ldw	r2,-4(fp)
    a378:	00c00044 	movi	r3,1
    a37c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    a380:	e0bffe17 	ldw	r2,-8(fp)
    a384:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
    a388:	e0ffff17 	ldw	r3,-4(fp)
    a38c:	d0a00904 	addi	r2,gp,-32732
    a390:	18bfcf1e 	bne	r3,r2,a2d0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    a394:	0001883a 	nop
}
    a398:	0001883a 	nop
    a39c:	e037883a 	mov	sp,fp
    a3a0:	dfc00117 	ldw	ra,4(sp)
    a3a4:	df000017 	ldw	fp,0(sp)
    a3a8:	dec00204 	addi	sp,sp,8
    a3ac:	f800283a 	ret

0000a3b0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    a3b0:	deffff04 	addi	sp,sp,-4
    a3b4:	df000015 	stw	fp,0(sp)
    a3b8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    a3bc:	000170fa 	wrctl	ienable,zero
}
    a3c0:	0001883a 	nop
    a3c4:	e037883a 	mov	sp,fp
    a3c8:	df000017 	ldw	fp,0(sp)
    a3cc:	dec00104 	addi	sp,sp,4
    a3d0:	f800283a 	ret

0000a3d4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    a3d4:	defffa04 	addi	sp,sp,-24
    a3d8:	dfc00515 	stw	ra,20(sp)
    a3dc:	df000415 	stw	fp,16(sp)
    a3e0:	df000404 	addi	fp,sp,16
    a3e4:	e13ffd15 	stw	r4,-12(fp)
    a3e8:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
    a3ec:	e0bffc17 	ldw	r2,-16(fp)
    a3f0:	10800017 	ldw	r2,0(r2)
    a3f4:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    a3f8:	e13ffd17 	ldw	r4,-12(fp)
    a3fc:	00088fc0 	call	88fc <strlen>
    a400:	10800044 	addi	r2,r2,1
    a404:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a408:	00000d06 	br	a440 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    a40c:	e0bfff17 	ldw	r2,-4(fp)
    a410:	10800217 	ldw	r2,8(r2)
    a414:	e0fffe17 	ldw	r3,-8(fp)
    a418:	180d883a 	mov	r6,r3
    a41c:	e17ffd17 	ldw	r5,-12(fp)
    a420:	1009883a 	mov	r4,r2
    a424:	000a76c0 	call	a76c <memcmp>
    a428:	1000021e 	bne	r2,zero,a434 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    a42c:	e0bfff17 	ldw	r2,-4(fp)
    a430:	00000706 	br	a450 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    a434:	e0bfff17 	ldw	r2,-4(fp)
    a438:	10800017 	ldw	r2,0(r2)
    a43c:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
    a440:	e0ffff17 	ldw	r3,-4(fp)
    a444:	e0bffc17 	ldw	r2,-16(fp)
    a448:	18bff01e 	bne	r3,r2,a40c <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
    a44c:	0005883a 	mov	r2,zero
}
    a450:	e037883a 	mov	sp,fp
    a454:	dfc00117 	ldw	ra,4(sp)
    a458:	df000017 	ldw	fp,0(sp)
    a45c:	dec00204 	addi	sp,sp,8
    a460:	f800283a 	ret

0000a464 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    a464:	defffb04 	addi	sp,sp,-20
    a468:	dfc00415 	stw	ra,16(sp)
    a46c:	df000315 	stw	fp,12(sp)
    a470:	df000304 	addi	fp,sp,12
    a474:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    a478:	d0a00217 	ldw	r2,-32760(gp)
    a47c:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a480:	00003106 	br	a548 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    a484:	e0bfff17 	ldw	r2,-4(fp)
    a488:	10800217 	ldw	r2,8(r2)
    a48c:	1009883a 	mov	r4,r2
    a490:	00088fc0 	call	88fc <strlen>
    a494:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    a498:	e0bfff17 	ldw	r2,-4(fp)
    a49c:	10c00217 	ldw	r3,8(r2)
    a4a0:	e0bffe17 	ldw	r2,-8(fp)
    a4a4:	10bfffc4 	addi	r2,r2,-1
    a4a8:	1885883a 	add	r2,r3,r2
    a4ac:	10800003 	ldbu	r2,0(r2)
    a4b0:	10803fcc 	andi	r2,r2,255
    a4b4:	1080201c 	xori	r2,r2,128
    a4b8:	10bfe004 	addi	r2,r2,-128
    a4bc:	10800bd8 	cmpnei	r2,r2,47
    a4c0:	1000031e 	bne	r2,zero,a4d0 <alt_find_file+0x6c>
    {
      len -= 1;
    a4c4:	e0bffe17 	ldw	r2,-8(fp)
    a4c8:	10bfffc4 	addi	r2,r2,-1
    a4cc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a4d0:	e0bffe17 	ldw	r2,-8(fp)
    a4d4:	e0fffd17 	ldw	r3,-12(fp)
    a4d8:	1885883a 	add	r2,r3,r2
    a4dc:	10800003 	ldbu	r2,0(r2)
    a4e0:	10803fcc 	andi	r2,r2,255
    a4e4:	1080201c 	xori	r2,r2,128
    a4e8:	10bfe004 	addi	r2,r2,-128
    a4ec:	10800be0 	cmpeqi	r2,r2,47
    a4f0:	1000081e 	bne	r2,zero,a514 <alt_find_file+0xb0>
    a4f4:	e0bffe17 	ldw	r2,-8(fp)
    a4f8:	e0fffd17 	ldw	r3,-12(fp)
    a4fc:	1885883a 	add	r2,r3,r2
    a500:	10800003 	ldbu	r2,0(r2)
    a504:	10803fcc 	andi	r2,r2,255
    a508:	1080201c 	xori	r2,r2,128
    a50c:	10bfe004 	addi	r2,r2,-128
    a510:	10000a1e 	bne	r2,zero,a53c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    a514:	e0bfff17 	ldw	r2,-4(fp)
    a518:	10800217 	ldw	r2,8(r2)
    a51c:	e0fffe17 	ldw	r3,-8(fp)
    a520:	180d883a 	mov	r6,r3
    a524:	e17ffd17 	ldw	r5,-12(fp)
    a528:	1009883a 	mov	r4,r2
    a52c:	000a76c0 	call	a76c <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
    a530:	1000021e 	bne	r2,zero,a53c <alt_find_file+0xd8>
    {
      /* match found */

      return next;
    a534:	e0bfff17 	ldw	r2,-4(fp)
    a538:	00000706 	br	a558 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    a53c:	e0bfff17 	ldw	r2,-4(fp)
    a540:	10800017 	ldw	r2,0(r2)
    a544:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
    a548:	e0ffff17 	ldw	r3,-4(fp)
    a54c:	d0a00204 	addi	r2,gp,-32760
    a550:	18bfcc1e 	bne	r3,r2,a484 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
    a554:	0005883a 	mov	r2,zero
}
    a558:	e037883a 	mov	sp,fp
    a55c:	dfc00117 	ldw	ra,4(sp)
    a560:	df000017 	ldw	fp,0(sp)
    a564:	dec00204 	addi	sp,sp,8
    a568:	f800283a 	ret

0000a56c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    a56c:	defffc04 	addi	sp,sp,-16
    a570:	df000315 	stw	fp,12(sp)
    a574:	df000304 	addi	fp,sp,12
    a578:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
    a57c:	00bffa04 	movi	r2,-24
    a580:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a584:	e03fff15 	stw	zero,-4(fp)
    a588:	00001d06 	br	a600 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    a58c:	e0ffff17 	ldw	r3,-4(fp)
    a590:	1805883a 	mov	r2,r3
    a594:	1085883a 	add	r2,r2,r2
    a598:	10c5883a 	add	r2,r2,r3
    a59c:	100490ba 	slli	r2,r2,2
    a5a0:	00c00074 	movhi	r3,1
    a5a4:	10c7883a 	add	r3,r2,r3
    a5a8:	18aad217 	ldw	r2,-21688(r3)
    a5ac:	1000111e 	bne	r2,zero,a5f4 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    a5b0:	e0ffff17 	ldw	r3,-4(fp)
    a5b4:	1805883a 	mov	r2,r3
    a5b8:	1085883a 	add	r2,r2,r2
    a5bc:	10c5883a 	add	r2,r2,r3
    a5c0:	100490ba 	slli	r2,r2,2
    a5c4:	e13ffd17 	ldw	r4,-12(fp)
    a5c8:	00c00074 	movhi	r3,1
    a5cc:	10c7883a 	add	r3,r2,r3
    a5d0:	192ad215 	stw	r4,-21688(r3)
      if (i > alt_max_fd)
    a5d4:	d0e00617 	ldw	r3,-32744(gp)
    a5d8:	e0bfff17 	ldw	r2,-4(fp)
    a5dc:	1880020e 	bge	r3,r2,a5e8 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    a5e0:	e0bfff17 	ldw	r2,-4(fp)
    a5e4:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
    a5e8:	e0bfff17 	ldw	r2,-4(fp)
    a5ec:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    a5f0:	00000706 	br	a610 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
    a5f4:	e0bfff17 	ldw	r2,-4(fp)
    a5f8:	10800044 	addi	r2,r2,1
    a5fc:	e0bfff15 	stw	r2,-4(fp)
    a600:	e0bfff17 	ldw	r2,-4(fp)
    a604:	10800810 	cmplti	r2,r2,32
    a608:	103fe01e 	bne	r2,zero,a58c <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
    a60c:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    a610:	e0bffe17 	ldw	r2,-8(fp)
}
    a614:	e037883a 	mov	sp,fp
    a618:	df000017 	ldw	fp,0(sp)
    a61c:	dec00104 	addi	sp,sp,4
    a620:	f800283a 	ret

0000a624 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    a624:	defffb04 	addi	sp,sp,-20
    a628:	df000415 	stw	fp,16(sp)
    a62c:	df000404 	addi	fp,sp,16
    a630:	e13ffd15 	stw	r4,-12(fp)
    a634:	e17ffc15 	stw	r5,-16(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    a638:	e0bffc17 	ldw	r2,-16(fp)
    a63c:	10820070 	cmpltui	r2,r2,2049
    a640:	1000021e 	bne	r2,zero,a64c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    a644:	00820004 	movi	r2,2048
    a648:	e0bffc15 	stw	r2,-16(fp)
  }

  end = ((char*) start) + len;
    a64c:	e0fffd17 	ldw	r3,-12(fp)
    a650:	e0bffc17 	ldw	r2,-16(fp)
    a654:	1885883a 	add	r2,r3,r2
    a658:	e0bffe15 	stw	r2,-8(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    a65c:	e0bffd17 	ldw	r2,-12(fp)
    a660:	e0bfff15 	stw	r2,-4(fp)
    a664:	00000506 	br	a67c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    a668:	e0bfff17 	ldw	r2,-4(fp)
    a66c:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    a670:	e0bfff17 	ldw	r2,-4(fp)
    a674:	10800804 	addi	r2,r2,32
    a678:	e0bfff15 	stw	r2,-4(fp)
    a67c:	e0ffff17 	ldw	r3,-4(fp)
    a680:	e0bffe17 	ldw	r2,-8(fp)
    a684:	18bff836 	bltu	r3,r2,a668 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    a688:	e0bffd17 	ldw	r2,-12(fp)
    a68c:	108007cc 	andi	r2,r2,31
    a690:	10000226 	beq	r2,zero,a69c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    a694:	e0bfff17 	ldw	r2,-4(fp)
    a698:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    a69c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    a6a0:	0001883a 	nop
    a6a4:	e037883a 	mov	sp,fp
    a6a8:	df000017 	ldw	fp,0(sp)
    a6ac:	dec00104 	addi	sp,sp,4
    a6b0:	f800283a 	ret

0000a6b4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    a6b4:	defffe04 	addi	sp,sp,-8
    a6b8:	df000115 	stw	fp,4(sp)
    a6bc:	df000104 	addi	fp,sp,4
    a6c0:	e13fff15 	stw	r4,-4(fp)
    a6c4:	e0bfff17 	ldw	r2,-4(fp)
    a6c8:	10bffe84 	addi	r2,r2,-6
    a6cc:	10c00428 	cmpgeui	r3,r2,16
    a6d0:	1800191e 	bne	r3,zero,a738 <alt_exception_cause_generated_bad_addr+0x84>
    a6d4:	100690ba 	slli	r3,r2,2
    a6d8:	00800074 	movhi	r2,1
    a6dc:	1885883a 	add	r2,r3,r2
    a6e0:	10a9ba17 	ldw	r2,-22808(r2)
    a6e4:	1000683a 	jmp	r2
    a6e8:	0000a728 	cmpgeui	zero,zero,668
    a6ec:	0000a728 	cmpgeui	zero,zero,668
    a6f0:	0000a738 	rdprs	zero,zero,668
    a6f4:	0000a738 	rdprs	zero,zero,668
    a6f8:	0000a738 	rdprs	zero,zero,668
    a6fc:	0000a728 	cmpgeui	zero,zero,668
    a700:	0000a730 	cmpltui	zero,zero,668
    a704:	0000a738 	rdprs	zero,zero,668
    a708:	0000a728 	cmpgeui	zero,zero,668
    a70c:	0000a728 	cmpgeui	zero,zero,668
    a710:	0000a738 	rdprs	zero,zero,668
    a714:	0000a728 	cmpgeui	zero,zero,668
    a718:	0000a730 	cmpltui	zero,zero,668
    a71c:	0000a738 	rdprs	zero,zero,668
    a720:	0000a738 	rdprs	zero,zero,668
    a724:	0000a728 	cmpgeui	zero,zero,668
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    a728:	00800044 	movi	r2,1
    a72c:	00000306 	br	a73c <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    a730:	0005883a 	mov	r2,zero
    a734:	00000106 	br	a73c <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
    a738:	0005883a 	mov	r2,zero
  }
}
    a73c:	e037883a 	mov	sp,fp
    a740:	df000017 	ldw	fp,0(sp)
    a744:	dec00104 	addi	sp,sp,4
    a748:	f800283a 	ret

0000a74c <exit>:
    a74c:	defffe04 	addi	sp,sp,-8
    a750:	000b883a 	mov	r5,zero
    a754:	dc000015 	stw	r16,0(sp)
    a758:	dfc00115 	stw	ra,4(sp)
    a75c:	2021883a 	mov	r16,r4
    a760:	000a79c0 	call	a79c <__call_exitprocs>
    a764:	8009883a 	mov	r4,r16
    a768:	000a8c80 	call	a8c8 <_exit>

0000a76c <memcmp>:
    a76c:	0007883a 	mov	r3,zero
    a770:	30c0021e 	bne	r6,r3,a77c <memcmp+0x10>
    a774:	0005883a 	mov	r2,zero
    a778:	f800283a 	ret
    a77c:	20c5883a 	add	r2,r4,r3
    a780:	18c00044 	addi	r3,r3,1
    a784:	28cf883a 	add	r7,r5,r3
    a788:	10800003 	ldbu	r2,0(r2)
    a78c:	39ffffc3 	ldbu	r7,-1(r7)
    a790:	11fff726 	beq	r2,r7,a770 <memcmp+0x4>
    a794:	11c5c83a 	sub	r2,r2,r7
    a798:	f800283a 	ret

0000a79c <__call_exitprocs>:
    a79c:	defff604 	addi	sp,sp,-40
    a7a0:	00800074 	movhi	r2,1
    a7a4:	dd800615 	stw	r22,24(sp)
    a7a8:	15ab3217 	ldw	r22,-21304(r2)
    a7ac:	dd400515 	stw	r21,20(sp)
    a7b0:	dd000415 	stw	r20,16(sp)
    a7b4:	dfc00915 	stw	ra,36(sp)
    a7b8:	df000815 	stw	fp,32(sp)
    a7bc:	ddc00715 	stw	r23,28(sp)
    a7c0:	dcc00315 	stw	r19,12(sp)
    a7c4:	dc800215 	stw	r18,8(sp)
    a7c8:	dc400115 	stw	r17,4(sp)
    a7cc:	dc000015 	stw	r16,0(sp)
    a7d0:	202b883a 	mov	r21,r4
    a7d4:	2829883a 	mov	r20,r5
    a7d8:	b4400d17 	ldw	r17,52(r22)
    a7dc:	88000726 	beq	r17,zero,a7fc <__call_exitprocs+0x60>
    a7e0:	8c000117 	ldw	r16,4(r17)
    a7e4:	8cc02217 	ldw	r19,136(r17)
    a7e8:	84bfffc4 	addi	r18,r16,-1
    a7ec:	802090ba 	slli	r16,r16,2
    a7f0:	9c2f883a 	add	r23,r19,r16
    a7f4:	8c21883a 	add	r16,r17,r16
    a7f8:	90000c0e 	bge	r18,zero,a82c <__call_exitprocs+0x90>
    a7fc:	dfc00917 	ldw	ra,36(sp)
    a800:	df000817 	ldw	fp,32(sp)
    a804:	ddc00717 	ldw	r23,28(sp)
    a808:	dd800617 	ldw	r22,24(sp)
    a80c:	dd400517 	ldw	r21,20(sp)
    a810:	dd000417 	ldw	r20,16(sp)
    a814:	dcc00317 	ldw	r19,12(sp)
    a818:	dc800217 	ldw	r18,8(sp)
    a81c:	dc400117 	ldw	r17,4(sp)
    a820:	dc000017 	ldw	r16,0(sp)
    a824:	dec00a04 	addi	sp,sp,40
    a828:	f800283a 	ret
    a82c:	a0000726 	beq	r20,zero,a84c <__call_exitprocs+0xb0>
    a830:	9800041e 	bne	r19,zero,a844 <__call_exitprocs+0xa8>
    a834:	94bfffc4 	addi	r18,r18,-1
    a838:	bdffff04 	addi	r23,r23,-4
    a83c:	843fff04 	addi	r16,r16,-4
    a840:	003fed06 	br	a7f8 <__call_exitprocs+0x5c>
    a844:	b8c01f17 	ldw	r3,124(r23)
    a848:	1d3ffa1e 	bne	r3,r20,a834 <__call_exitprocs+0x98>
    a84c:	89000117 	ldw	r4,4(r17)
    a850:	80c00117 	ldw	r3,4(r16)
    a854:	213fffc4 	addi	r4,r4,-1
    a858:	24800f1e 	bne	r4,r18,a898 <__call_exitprocs+0xfc>
    a85c:	8c800115 	stw	r18,4(r17)
    a860:	183ff426 	beq	r3,zero,a834 <__call_exitprocs+0x98>
    a864:	8f000117 	ldw	fp,4(r17)
    a868:	98000526 	beq	r19,zero,a880 <__call_exitprocs+0xe4>
    a86c:	00800044 	movi	r2,1
    a870:	148c983a 	sll	r6,r2,r18
    a874:	99004017 	ldw	r4,256(r19)
    a878:	3108703a 	and	r4,r6,r4
    a87c:	2000081e 	bne	r4,zero,a8a0 <__call_exitprocs+0x104>
    a880:	183ee83a 	callr	r3
    a884:	89000117 	ldw	r4,4(r17)
    a888:	b0c00d17 	ldw	r3,52(r22)
    a88c:	273fd21e 	bne	r4,fp,a7d8 <__call_exitprocs+0x3c>
    a890:	88ffe826 	beq	r17,r3,a834 <__call_exitprocs+0x98>
    a894:	003fd006 	br	a7d8 <__call_exitprocs+0x3c>
    a898:	80000115 	stw	zero,4(r16)
    a89c:	003ff006 	br	a860 <__call_exitprocs+0xc4>
    a8a0:	99404117 	ldw	r5,260(r19)
    a8a4:	b93fff17 	ldw	r4,-4(r23)
    a8a8:	314c703a 	and	r6,r6,r5
    a8ac:	3000041e 	bne	r6,zero,a8c0 <__call_exitprocs+0x124>
    a8b0:	200b883a 	mov	r5,r4
    a8b4:	a809883a 	mov	r4,r21
    a8b8:	183ee83a 	callr	r3
    a8bc:	003ff106 	br	a884 <__call_exitprocs+0xe8>
    a8c0:	183ee83a 	callr	r3
    a8c4:	003fef06 	br	a884 <__call_exitprocs+0xe8>

0000a8c8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    a8c8:	defffd04 	addi	sp,sp,-12
    a8cc:	df000215 	stw	fp,8(sp)
    a8d0:	df000204 	addi	fp,sp,8
    a8d4:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    a8d8:	0001883a 	nop
    a8dc:	e0bffe17 	ldw	r2,-8(fp)
    a8e0:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    a8e4:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    a8e8:	10000226 	beq	r2,zero,a8f4 <_exit+0x2c>
    ALT_SIM_FAIL();
    a8ec:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
    a8f0:	00000106 	br	a8f8 <_exit+0x30>
    ALT_SIM_PASS();
    a8f4:	002af0b0 	cmpltui	zero,zero,43970
}
    a8f8:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    a8fc:	003fff06 	br	a8fc <_exit+0x34>
