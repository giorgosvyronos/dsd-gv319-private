
hello_world.elf:     file format elf32-littlenios2
hello_world.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008238

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00003520 memsz 0x00003520 flags r-x
    LOAD off    0x00004540 vaddr 0x0000b540 paddr 0x0000b824 align 2**12
         filesz 0x000002e4 memsz 0x000002e4 flags rw-
    LOAD off    0x00004b08 vaddr 0x0000bb08 paddr 0x0000bb08 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000218  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000031ac  00008238  00008238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000015c  0000b3e4  0000b3e4  000043e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e4  0000b540  0000b824  00004540  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  0000bb08  0000bb08  00004b08  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  0000bc28  0000bc28  00004824  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00004824  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000006d0  00000000  00000000  00004858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   0000936c  00000000  00000000  00004f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003579  00000000  00000000  0000e294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   0000503e  00000000  00000000  0001180d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00000ce8  00000000  00000000  0001684c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    0000229b  00000000  00000000  00017534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00003aa3  00000000  00000000  000197cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000030  00000000  00000000  0001d274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000708  00000000  00000000  0001d2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  0001f572  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0001f575  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001f578  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001f579  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001f57a  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001f57e  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001f582  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0001f586  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0001f58f  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0001f598  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  0001f5a1  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002b  00000000  00000000  0001f5b3  2**0
                  CONTENTS, READONLY
 29 .jdi          00005099  00000000  00000000  0001f5de  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003ccf6  00000000  00000000  00024677  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008238 l    d  .text	00000000 .text
0000b3e4 l    d  .rodata	00000000 .rodata
0000b540 l    d  .rwdata	00000000 .rwdata
0000bb08 l    d  .bss	00000000 .bss
0000bc28 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hello_world_bsp//obj/HAL/src/crt0.o
00008280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000959c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000b540 l     O .rwdata	000000e4 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00009c24 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_times.c
00009d7c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
00009e30 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00009f70 l     F .text	00000034 alt_dev_reg
0000b624 l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000a270 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
0000a370 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000a4d4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000a500 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000a8b0 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000aa00 l     F .text	0000003c alt_get_errno
0000aa3c l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000bb24 g     O .bss	00000004 alt_instruction_exception_handler
00009d10 g     F .text	0000006c alt_main
000094f0 g     F .text	00000080 _puts_r
0000bb28 g     O .bss	00000100 alt_irq
0000b824 g       *ABS*	00000000 __flash_rwdata_start
000094a8 g     F .text	00000048 printf
00008b8c g     F .text	000003f4 .hidden __divsf3
00009380 g     F .text	00000070 .hidden __fixsfsi
0000ae94 g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000001c __reset
00009db8 g     F .text	00000078 times
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000bb08 g     O .bss	00000004 errno
0000bb10 g     O .bss	00000004 alt_argv
000137f8 g       *ABS*	00000000 _gp
0000b678 g     O .rwdata	00000180 alt_fd_list
0000aeb8 g     F .text	00000090 alt_find_dev
0000a984 g     F .text	0000007c alt_io_redirect
00009570 g     F .text	00000010 puts
0000b198 g     F .text	00000098 alt_exception_cause_generated_bad_addr
0000a0f0 g     F .text	000000ec altera_avalon_jtag_uart_read
0000946c g     F .text	0000003c _printf_r
00008660 g     F .text	00000064 .hidden __udivsi3
0000b108 g     F .text	00000090 alt_icache_flush
0000b810 g     O .rwdata	00000004 alt_max_fd
0000b7f8 g     O .rwdata	00000004 _global_impure_ptr
0000bc28 g       *ABS*	00000000 __bss_end
0000a7c8 g     F .text	000000e8 alt_iic_isr_register
0000ad8c g     F .text	00000108 alt_tick
0000a77c g     F .text	0000004c alt_ic_irq_enabled
0000ace8 g     F .text	000000a4 alt_alarm_stop
0000bb18 g     O .bss	00000004 alt_irq_active
00008000 g       *ABS*	00000000 __alt_mem_onchip_mem
000080fc g     F .exceptions	000000c8 alt_irq_handler
0000b650 g     O .rwdata	00000028 alt_dev_null
0000a488 g     F .text	0000004c alt_dcache_flush_all
0000b824 g       *ABS*	00000000 __ram_rwdata_end
0000b808 g     O .rwdata	00000008 alt_dev_list
00009e6c g     F .text	00000104 write
0000b540 g       *ABS*	00000000 __ram_rodata_end
000086c4 g     F .text	0000005c .hidden __umodsi3
0000bc28 g       *ABS*	00000000 end
000081c4 g     F .exceptions	00000074 alt_instruction_exception_entry
00010000 g       *ABS*	00000000 __alt_stack_pointer
0000a2ec g     F .text	00000084 alt_avalon_timer_sc_init
000093f0 g     F .text	00000054 .hidden __clzsi2
0000a1dc g     F .text	00000094 altera_avalon_jtag_uart_write
00009608 g     F .text	0000050c ___vfprintf_internal_r
0000b280 g     F .text	0000012c __call_exitprocs
00008238 g     F .text	0000004c _start
0000bb1c g     O .bss	00000004 _alt_tick_rate
0000bb20 g     O .bss	00000004 _alt_nticks
00009fe0 g     F .text	00000050 alt_sys_init
00009444 g     F .text	00000028 .hidden __mulsi3
0000b540 g       *ABS*	00000000 __ram_rwdata_start
0000b3e4 g       *ABS*	00000000 __ram_rodata_start
0000a030 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000b050 g     F .text	000000b8 alt_get_fd
00008284 g     F .text	000000a8 generateVector
0000b250 g     F .text	00000030 memcmp
0000bc28 g       *ABS*	00000000 __alt_stack_base
0000af48 g     F .text	00000108 alt_find_file
0000a53c g     F .text	000000a8 alt_dev_llist_insert
00009b2c g     F .text	000000a8 __sfvwrite_small_dev
0000bb08 g       *ABS*	00000000 __bss_start
00008404 g     F .text	00000168 main
0000bb14 g     O .bss	00000004 alt_envp
0000a090 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000b814 g     O .rwdata	00000004 alt_errno
0000856c g     F .text	00000080 .hidden __divsi3
00008f80 g     F .text	00000400 .hidden __mulsf3
0000b3e4 g       *ABS*	00000000 __flash_rodata_start
00009fa4 g     F .text	0000003c alt_irq_init
0000ac78 g     F .text	00000070 alt_release_fd
0000b410 g     O .rodata	00000100 .hidden __clz_tab
0000832c g     F .text	000000d8 sumVector
00009bd4 g     F .text	00000050 _write_r
0000b7fc g     O .rwdata	00000004 _impure_ptr
0000bb0c g     O .bss	00000004 alt_argc
00008020 g       .exceptions	00000000 alt_irq_entry
0000b800 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000a618 g     F .text	00000050 alt_ic_isr_register
0000b824 g       *ABS*	00000000 _edata
0000bc28 g       *ABS*	00000000 _end
00008238 g       *ABS*	00000000 __ram_exceptions_end
0000a6f0 g     F .text	0000008c alt_ic_irq_disable
0000b230 g     F .text	00000020 exit
000085ec g     F .text	00000074 .hidden __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000b3ac g     F .text	00000038 _exit
00009580 g     F .text	0000001c strlen
0000ab18 g     F .text	00000160 open
0000a5e4 g     F .text	00000034 alt_icache_flush_all
0000b818 g     O .rwdata	00000004 alt_priority_mask
0000a668 g     F .text	00000088 alt_ic_irq_enable
00009b14 g     F .text	00000018 __vfprintf_internal
0000b81c g     O .rwdata	00000008 alt_alarm_list
0000a3ac g     F .text	000000dc close
00008720 g     F .text	0000046c .hidden __addsf3
00009c8c g     F .text	00000084 alt_load



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08608e14 	ori	at,at,33336
    jmp r1
    8018:	0800683a 	jmp	at
    801c:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080fc0 	call	80fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000706 	br	80a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    808c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    8094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    8098:	00081c40 	call	81c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    809c:	1000021e 	bne	r2,zero,80a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    80a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    80a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    80a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    80ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80f8:	ef80083a 	eret

000080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80fc:	defff904 	addi	sp,sp,-28
    8100:	dfc00615 	stw	ra,24(sp)
    8104:	df000515 	stw	fp,20(sp)
    8108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    810c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8110:	0005313a 	rdctl	r2,ipending
    8114:	e0bffc15 	stw	r2,-16(fp)

  return active;
    8118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    811c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
    8120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8124:	00800044 	movi	r2,1
    8128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    812c:	e0ffff17 	ldw	r3,-4(fp)
    8130:	e0bffe17 	ldw	r2,-8(fp)
    8134:	1884703a 	and	r2,r3,r2
    8138:	10001126 	beq	r2,zero,8180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    813c:	e0bffd17 	ldw	r2,-12(fp)
    8140:	100690fa 	slli	r3,r2,3
    8144:	00800074 	movhi	r2,1
    8148:	1885883a 	add	r2,r3,r2
    814c:	10eeca17 	ldw	r3,-17624(r2)
    8150:	e0bffd17 	ldw	r2,-12(fp)
    8154:	100890fa 	slli	r4,r2,3
    8158:	00800074 	movhi	r2,1
    815c:	2085883a 	add	r2,r4,r2
    8160:	10aecb17 	ldw	r2,-17620(r2)
    8164:	1009883a 	mov	r4,r2
    8168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    816c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
    8170:	0005313a 	rdctl	r2,ipending
    8174:	e0bffb15 	stw	r2,-20(fp)
  return active;
    8178:	e0bffb17 	ldw	r2,-20(fp)
    817c:	00000706 	br	819c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
    8180:	e0bffe17 	ldw	r2,-8(fp)
    8184:	1085883a 	add	r2,r2,r2
    8188:	e0bffe15 	stw	r2,-8(fp)
      i++;
    818c:	e0bffd17 	ldw	r2,-12(fp)
    8190:	10800044 	addi	r2,r2,1
    8194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
    8198:	003fe406 	br	812c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
    819c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
    81a0:	e0bfff17 	ldw	r2,-4(fp)
    81a4:	103fde1e 	bne	r2,zero,8120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    81a8:	0001883a 	nop
}
    81ac:	0001883a 	nop
    81b0:	e037883a 	mov	sp,fp
    81b4:	dfc00117 	ldw	ra,4(sp)
    81b8:	df000017 	ldw	fp,0(sp)
    81bc:	dec00204 	addi	sp,sp,8
    81c0:	f800283a 	ret

000081c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
    81c4:	defffb04 	addi	sp,sp,-20
    81c8:	dfc00415 	stw	ra,16(sp)
    81cc:	df000315 	stw	fp,12(sp)
    81d0:	df000304 	addi	fp,sp,12
    81d4:	e13ffd15 	stw	r4,-12(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
    81d8:	000531fa 	rdctl	r2,exception
    81dc:	e0bfff15 	stw	r2,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
    81e0:	e0bfff17 	ldw	r2,-4(fp)
    81e4:	1004d0ba 	srli	r2,r2,2
    81e8:	108007cc 	andi	r2,r2,31
    81ec:	e0bfff15 	stw	r2,-4(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
    81f0:	0005333a 	rdctl	r2,badaddr
    81f4:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    81f8:	d0a0cb17 	ldw	r2,-31956(gp)
    81fc:	10000726 	beq	r2,zero,821c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    8200:	d0a0cb17 	ldw	r2,-31956(gp)
    8204:	e0ffff17 	ldw	r3,-4(fp)
    8208:	e1bffe17 	ldw	r6,-8(fp)
    820c:	e17ffd17 	ldw	r5,-12(fp)
    8210:	1809883a 	mov	r4,r3
    8214:	103ee83a 	callr	r2
    8218:	00000206 	br	8224 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    821c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
    8220:	0005883a 	mov	r2,zero
}
    8224:	e037883a 	mov	sp,fp
    8228:	dfc00117 	ldw	ra,4(sp)
    822c:	df000017 	ldw	fp,0(sp)
    8230:	dec00204 	addi	sp,sp,8
    8234:	f800283a 	ret

Disassembly of section .text:

00008238 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    8238:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
    823c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    8240:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
    8244:	00bffd16 	blt	zero,r2,823c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8248:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    824c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    8250:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    8254:	d68dfe14 	ori	gp,gp,14328
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8258:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    825c:	10aec214 	ori	r2,r2,47880

    movhi r3, %hi(__bss_end)
    8260:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    8264:	18ef0a14 	ori	r3,r3,48168

    beq r2, r3, 1f
    8268:	10c00326 	beq	r2,r3,8278 <_start+0x40>

0:
    stw zero, (r2)
    826c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    8274:	10fffd36 	bltu	r2,r3,826c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8278:	0009c8c0 	call	9c8c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    827c:	0009d100 	call	9d10 <alt_main>

00008280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8280:	003fff06 	br	8280 <alt_after_alt_main>

00008284 <generateVector>:
//#define step 1/1024.0
//#define N 261121


// Generates the vector x and stores it in the memory
void generateVector(float x[N]){
    8284:	defffb04 	addi	sp,sp,-20
    8288:	dfc00415 	stw	ra,16(sp)
    828c:	df000315 	stw	fp,12(sp)
    8290:	dc000215 	stw	r16,8(sp)
    8294:	df000304 	addi	fp,sp,12
    8298:	e13ffd15 	stw	r4,-12(fp)
	int i;
	x[0] = 0;
    829c:	e0bffd17 	ldw	r2,-12(fp)
    82a0:	10000015 	stw	zero,0(r2)
	for(i=1;i<N;i++){
    82a4:	00800044 	movi	r2,1
    82a8:	e0bffe15 	stw	r2,-8(fp)
    82ac:	00001406 	br	8300 <generateVector+0x7c>
		x[i] = x[i-1] + step;
    82b0:	e0fffe17 	ldw	r3,-8(fp)
    82b4:	00900034 	movhi	r2,16384
    82b8:	10bfffc4 	addi	r2,r2,-1
    82bc:	1885883a 	add	r2,r3,r2
    82c0:	100490ba 	slli	r2,r2,2
    82c4:	e0fffd17 	ldw	r3,-12(fp)
    82c8:	1885883a 	add	r2,r3,r2
    82cc:	11000017 	ldw	r4,0(r2)
    82d0:	e0bffe17 	ldw	r2,-8(fp)
    82d4:	100490ba 	slli	r2,r2,2
    82d8:	e0fffd17 	ldw	r3,-12(fp)
    82dc:	18a1883a 	add	r16,r3,r2
    82e0:	01502834 	movhi	r5,16544
    82e4:	00087200 	call	8720 <__addsf3>
    82e8:	1007883a 	mov	r3,r2
    82ec:	1805883a 	mov	r2,r3
    82f0:	80800015 	stw	r2,0(r16)
	for(i=1;i<N;i++){
    82f4:	e0bffe17 	ldw	r2,-8(fp)
    82f8:	10800044 	addi	r2,r2,1
    82fc:	e0bffe15 	stw	r2,-8(fp)
    8300:	e0bffe17 	ldw	r2,-8(fp)
    8304:	10800d10 	cmplti	r2,r2,52
    8308:	103fe91e 	bne	r2,zero,82b0 <generateVector+0x2c>
	}
}
    830c:	0001883a 	nop
    8310:	0001883a 	nop
    8314:	e6ffff04 	addi	sp,fp,-4
    8318:	dfc00217 	ldw	ra,8(sp)
    831c:	df000117 	ldw	fp,4(sp)
    8320:	dc000017 	ldw	r16,0(sp)
    8324:	dec00304 	addi	sp,sp,12
    8328:	f800283a 	ret

0000832c <sumVector>:
float sumVector(float x[], int M){
    832c:	defff904 	addi	sp,sp,-28
    8330:	dfc00615 	stw	ra,24(sp)
    8334:	df000515 	stw	fp,20(sp)
    8338:	dc000415 	stw	r16,16(sp)
    833c:	df000504 	addi	fp,sp,20
    8340:	e13ffc15 	stw	r4,-16(fp)
    8344:	e17ffb15 	stw	r5,-20(fp)
	//YOUR CODE GOES HERE
	float y=0;
    8348:	e03ffe15 	stw	zero,-8(fp)
	for(int i=0;i<M;i++){
    834c:	e03ffd15 	stw	zero,-12(fp)
    8350:	00002006 	br	83d4 <sumVector+0xa8>
		y += x[i]+ x[i]*x[i];
    8354:	e0bffd17 	ldw	r2,-12(fp)
    8358:	100490ba 	slli	r2,r2,2
    835c:	e0fffc17 	ldw	r3,-16(fp)
    8360:	1885883a 	add	r2,r3,r2
    8364:	14000017 	ldw	r16,0(r2)
    8368:	e0bffd17 	ldw	r2,-12(fp)
    836c:	100490ba 	slli	r2,r2,2
    8370:	e0fffc17 	ldw	r3,-16(fp)
    8374:	1885883a 	add	r2,r3,r2
    8378:	11000017 	ldw	r4,0(r2)
    837c:	e0bffd17 	ldw	r2,-12(fp)
    8380:	100490ba 	slli	r2,r2,2
    8384:	e0fffc17 	ldw	r3,-16(fp)
    8388:	1885883a 	add	r2,r3,r2
    838c:	10c00017 	ldw	r3,0(r2)
    8390:	180b883a 	mov	r5,r3
    8394:	0008f800 	call	8f80 <__mulsf3>
    8398:	1007883a 	mov	r3,r2
    839c:	1805883a 	mov	r2,r3
    83a0:	100b883a 	mov	r5,r2
    83a4:	8009883a 	mov	r4,r16
    83a8:	00087200 	call	8720 <__addsf3>
    83ac:	1007883a 	mov	r3,r2
    83b0:	1805883a 	mov	r2,r3
    83b4:	100b883a 	mov	r5,r2
    83b8:	e13ffe17 	ldw	r4,-8(fp)
    83bc:	00087200 	call	8720 <__addsf3>
    83c0:	1007883a 	mov	r3,r2
    83c4:	e0fffe15 	stw	r3,-8(fp)
	for(int i=0;i<M;i++){
    83c8:	e0bffd17 	ldw	r2,-12(fp)
    83cc:	10800044 	addi	r2,r2,1
    83d0:	e0bffd15 	stw	r2,-12(fp)
    83d4:	e0fffd17 	ldw	r3,-12(fp)
    83d8:	e0bffb17 	ldw	r2,-20(fp)
    83dc:	18bfdd16 	blt	r3,r2,8354 <sumVector+0x28>
	}
	return y;
    83e0:	e0bffe17 	ldw	r2,-8(fp)
    83e4:	1007883a 	mov	r3,r2
}
    83e8:	1805883a 	mov	r2,r3
    83ec:	e6ffff04 	addi	sp,fp,-4
    83f0:	dfc00217 	ldw	ra,8(sp)
    83f4:	df000117 	ldw	fp,4(sp)
    83f8:	dc000017 	ldw	r16,0(sp)
    83fc:	dec00304 	addi	sp,sp,12
    8400:	f800283a 	ret

00008404 <main>:
int main()
{
    8404:	deffba04 	addi	sp,sp,-280
    8408:	dfc04515 	stw	ra,276(sp)
    840c:	df004415 	stw	fp,272(sp)
    8410:	df004404 	addi	fp,sp,272
	printf("Task2 - Time\n");
    8414:	01000074 	movhi	r4,1
    8418:	212cf904 	addi	r4,r4,-19484
    841c:	00095700 	call	9570 <puts>
	float x[N];

	//Returned result
	float y;

	generateVector(x);
    8420:	e0bfc604 	addi	r2,fp,-232
    8424:	1009883a 	mov	r4,r2
    8428:	00082840 	call	8284 <generateVector>

	//The following is used for timing
	char buf[40];
	clock_t exec_t1, exec_t2, exec_t3;

	exec_t1 = times(NULL); // get system time before starting the process
    842c:	0009883a 	mov	r4,zero
    8430:	0009db80 	call	9db8 <times>
    8434:	e0bffd15 	stw	r2,-12(fp)
	// The code that you want to time goes here
	y = sumVector(x,N);
    8438:	e0bfc604 	addi	r2,fp,-232
    843c:	01400d04 	movi	r5,52
    8440:	1009883a 	mov	r4,r2
    8444:	000832c0 	call	832c <sumVector>
    8448:	e0bfff15 	stw	r2,-4(fp)

	// till here
	exec_t1 = times(NULL) - exec_t1; // get system time after finishing the process
    844c:	0009883a 	mov	r4,zero
    8450:	0009db80 	call	9db8 <times>
    8454:	1007883a 	mov	r3,r2
    8458:	e0bffd17 	ldw	r2,-12(fp)
    845c:	1885c83a 	sub	r2,r3,r2
    8460:	e0bffd15 	stw	r2,-12(fp)

	exec_t2 = times(NULL); // get system time before starting the process
    8464:	0009883a 	mov	r4,zero
    8468:	0009db80 	call	9db8 <times>
    846c:	e0bffc15 	stw	r2,-16(fp)

	// The code that you want to time goes here
	y = sumVector(x,N);
    8470:	e0bfc604 	addi	r2,fp,-232
    8474:	01400d04 	movi	r5,52
    8478:	1009883a 	mov	r4,r2
    847c:	000832c0 	call	832c <sumVector>
    8480:	e0bfff15 	stw	r2,-4(fp)

	// till here
	exec_t2 = times(NULL) - exec_t2; // get system time after finishing the process
    8484:	0009883a 	mov	r4,zero
    8488:	0009db80 	call	9db8 <times>
    848c:	1007883a 	mov	r3,r2
    8490:	e0bffc17 	ldw	r2,-16(fp)
    8494:	1885c83a 	sub	r2,r3,r2
    8498:	e0bffc15 	stw	r2,-16(fp)

	exec_t3 = times(NULL); // get system time before starting the process
    849c:	0009883a 	mov	r4,zero
    84a0:	0009db80 	call	9db8 <times>
    84a4:	e0bffb15 	stw	r2,-20(fp)

	// The code that you want to time goes here
	y = sumVector(x,N);
    84a8:	e0bfc604 	addi	r2,fp,-232
    84ac:	01400d04 	movi	r5,52
    84b0:	1009883a 	mov	r4,r2
    84b4:	000832c0 	call	832c <sumVector>
    84b8:	e0bfff15 	stw	r2,-4(fp)

	// till here
	exec_t3 = times(NULL) - exec_t3; // get system time after finishing the process
    84bc:	0009883a 	mov	r4,zero
    84c0:	0009db80 	call	9db8 <times>
    84c4:	1007883a 	mov	r3,r2
    84c8:	e0bffb17 	ldw	r2,-20(fp)
    84cc:	1885c83a 	sub	r2,r3,r2
    84d0:	e0bffb15 	stw	r2,-20(fp)

	clock_t exec_tall = (exec_t1 + exec_t2 + exec_t3)/3;
    84d4:	e0fffd17 	ldw	r3,-12(fp)
    84d8:	e0bffc17 	ldw	r2,-16(fp)
    84dc:	1887883a 	add	r3,r3,r2
    84e0:	e0bffb17 	ldw	r2,-20(fp)
    84e4:	1885883a 	add	r2,r3,r2
    84e8:	014000c4 	movi	r5,3
    84ec:	1009883a 	mov	r4,r2
    84f0:	00086600 	call	8660 <__udivsi3>
    84f4:	e0bffa15 	stw	r2,-24(fp)

//	gcvt((exec_t2 - exec_t1),10,buf);
//	alt_putstr(" proc time = "); alt_putst(buf); alt_putstr("ticks \n");
//
	int i;
	for (i=0;i<10;i++){
    84f8:	e03ffe15 	stw	zero,-8(fp)
    84fc:	00000806 	br	8520 <main+0x11c>
		y =y/2.0;
    8500:	01500034 	movhi	r5,16384
    8504:	e13fff17 	ldw	r4,-4(fp)
    8508:	0008b8c0 	call	8b8c <__divsf3>
    850c:	1007883a 	mov	r3,r2
    8510:	e0ffff15 	stw	r3,-4(fp)
	for (i=0;i<10;i++){
    8514:	e0bffe17 	ldw	r2,-8(fp)
    8518:	10800044 	addi	r2,r2,1
    851c:	e0bffe15 	stw	r2,-8(fp)
    8520:	e0bffe17 	ldw	r2,-8(fp)
    8524:	10800290 	cmplti	r2,r2,10
    8528:	103ff51e 	bne	r2,zero,8500 <main+0xfc>
	}

	printf("Result: %d\n",(int) y);
    852c:	e13fff17 	ldw	r4,-4(fp)
    8530:	00093800 	call	9380 <__fixsfsi>
    8534:	100b883a 	mov	r5,r2
    8538:	01000074 	movhi	r4,1
    853c:	212cfd04 	addi	r4,r4,-19468
    8540:	00094a80 	call	94a8 <printf>
	printf("Time taken: %d\n", exec_tall);
    8544:	e17ffa17 	ldw	r5,-24(fp)
    8548:	01000074 	movhi	r4,1
    854c:	212d0004 	addi	r4,r4,-19456
    8550:	00094a80 	call	94a8 <printf>
	return 0;
    8554:	0005883a 	mov	r2,zero
}
    8558:	e037883a 	mov	sp,fp
    855c:	dfc00117 	ldw	ra,4(sp)
    8560:	df000017 	ldw	fp,0(sp)
    8564:	dec00204 	addi	sp,sp,8
    8568:	f800283a 	ret

0000856c <__divsi3>:
    856c:	20001a16 	blt	r4,zero,85d8 <__divsi3+0x6c>
    8570:	000f883a 	mov	r7,zero
    8574:	2800020e 	bge	r5,zero,8580 <__divsi3+0x14>
    8578:	014bc83a 	sub	r5,zero,r5
    857c:	39c0005c 	xori	r7,r7,1
    8580:	200d883a 	mov	r6,r4
    8584:	00c00044 	movi	r3,1
    8588:	2900092e 	bgeu	r5,r4,85b0 <__divsi3+0x44>
    858c:	00800804 	movi	r2,32
    8590:	00c00044 	movi	r3,1
    8594:	00000106 	br	859c <__divsi3+0x30>
    8598:	10001226 	beq	r2,zero,85e4 <__divsi3+0x78>
    859c:	294b883a 	add	r5,r5,r5
    85a0:	10bfffc4 	addi	r2,r2,-1
    85a4:	18c7883a 	add	r3,r3,r3
    85a8:	293ffb36 	bltu	r5,r4,8598 <__divsi3+0x2c>
    85ac:	18000d26 	beq	r3,zero,85e4 <__divsi3+0x78>
    85b0:	0005883a 	mov	r2,zero
    85b4:	31400236 	bltu	r6,r5,85c0 <__divsi3+0x54>
    85b8:	314dc83a 	sub	r6,r6,r5
    85bc:	10c4b03a 	or	r2,r2,r3
    85c0:	1806d07a 	srli	r3,r3,1
    85c4:	280ad07a 	srli	r5,r5,1
    85c8:	183ffa1e 	bne	r3,zero,85b4 <__divsi3+0x48>
    85cc:	38000126 	beq	r7,zero,85d4 <__divsi3+0x68>
    85d0:	0085c83a 	sub	r2,zero,r2
    85d4:	f800283a 	ret
    85d8:	0109c83a 	sub	r4,zero,r4
    85dc:	01c00044 	movi	r7,1
    85e0:	003fe406 	br	8574 <__divsi3+0x8>
    85e4:	0005883a 	mov	r2,zero
    85e8:	003ff806 	br	85cc <__divsi3+0x60>

000085ec <__modsi3>:
    85ec:	20001916 	blt	r4,zero,8654 <__modsi3+0x68>
    85f0:	000f883a 	mov	r7,zero
    85f4:	2005883a 	mov	r2,r4
    85f8:	2800010e 	bge	r5,zero,8600 <__modsi3+0x14>
    85fc:	014bc83a 	sub	r5,zero,r5
    8600:	00c00044 	movi	r3,1
    8604:	2900092e 	bgeu	r5,r4,862c <__modsi3+0x40>
    8608:	01800804 	movi	r6,32
    860c:	00c00044 	movi	r3,1
    8610:	00000106 	br	8618 <__modsi3+0x2c>
    8614:	30000d26 	beq	r6,zero,864c <__modsi3+0x60>
    8618:	294b883a 	add	r5,r5,r5
    861c:	31bfffc4 	addi	r6,r6,-1
    8620:	18c7883a 	add	r3,r3,r3
    8624:	293ffb36 	bltu	r5,r4,8614 <__modsi3+0x28>
    8628:	18000826 	beq	r3,zero,864c <__modsi3+0x60>
    862c:	1806d07a 	srli	r3,r3,1
    8630:	11400136 	bltu	r2,r5,8638 <__modsi3+0x4c>
    8634:	1145c83a 	sub	r2,r2,r5
    8638:	280ad07a 	srli	r5,r5,1
    863c:	183ffb1e 	bne	r3,zero,862c <__modsi3+0x40>
    8640:	38000126 	beq	r7,zero,8648 <__modsi3+0x5c>
    8644:	0085c83a 	sub	r2,zero,r2
    8648:	f800283a 	ret
    864c:	2005883a 	mov	r2,r4
    8650:	003ffb06 	br	8640 <__modsi3+0x54>
    8654:	0109c83a 	sub	r4,zero,r4
    8658:	01c00044 	movi	r7,1
    865c:	003fe506 	br	85f4 <__modsi3+0x8>

00008660 <__udivsi3>:
    8660:	200d883a 	mov	r6,r4
    8664:	2900152e 	bgeu	r5,r4,86bc <__udivsi3+0x5c>
    8668:	28001416 	blt	r5,zero,86bc <__udivsi3+0x5c>
    866c:	00800804 	movi	r2,32
    8670:	00c00044 	movi	r3,1
    8674:	00000206 	br	8680 <__udivsi3+0x20>
    8678:	10000e26 	beq	r2,zero,86b4 <__udivsi3+0x54>
    867c:	28000516 	blt	r5,zero,8694 <__udivsi3+0x34>
    8680:	294b883a 	add	r5,r5,r5
    8684:	10bfffc4 	addi	r2,r2,-1
    8688:	18c7883a 	add	r3,r3,r3
    868c:	293ffa36 	bltu	r5,r4,8678 <__udivsi3+0x18>
    8690:	18000826 	beq	r3,zero,86b4 <__udivsi3+0x54>
    8694:	0005883a 	mov	r2,zero
    8698:	31400236 	bltu	r6,r5,86a4 <__udivsi3+0x44>
    869c:	314dc83a 	sub	r6,r6,r5
    86a0:	10c4b03a 	or	r2,r2,r3
    86a4:	1806d07a 	srli	r3,r3,1
    86a8:	280ad07a 	srli	r5,r5,1
    86ac:	183ffa1e 	bne	r3,zero,8698 <__udivsi3+0x38>
    86b0:	f800283a 	ret
    86b4:	0005883a 	mov	r2,zero
    86b8:	f800283a 	ret
    86bc:	00c00044 	movi	r3,1
    86c0:	003ff406 	br	8694 <__udivsi3+0x34>

000086c4 <__umodsi3>:
    86c4:	2005883a 	mov	r2,r4
    86c8:	2900132e 	bgeu	r5,r4,8718 <__umodsi3+0x54>
    86cc:	28001216 	blt	r5,zero,8718 <__umodsi3+0x54>
    86d0:	01800804 	movi	r6,32
    86d4:	00c00044 	movi	r3,1
    86d8:	00000206 	br	86e4 <__umodsi3+0x20>
    86dc:	30000c26 	beq	r6,zero,8710 <__umodsi3+0x4c>
    86e0:	28000516 	blt	r5,zero,86f8 <__umodsi3+0x34>
    86e4:	294b883a 	add	r5,r5,r5
    86e8:	31bfffc4 	addi	r6,r6,-1
    86ec:	18c7883a 	add	r3,r3,r3
    86f0:	293ffa36 	bltu	r5,r4,86dc <__umodsi3+0x18>
    86f4:	18000626 	beq	r3,zero,8710 <__umodsi3+0x4c>
    86f8:	1806d07a 	srli	r3,r3,1
    86fc:	11400136 	bltu	r2,r5,8704 <__umodsi3+0x40>
    8700:	1145c83a 	sub	r2,r2,r5
    8704:	280ad07a 	srli	r5,r5,1
    8708:	183ffb1e 	bne	r3,zero,86f8 <__umodsi3+0x34>
    870c:	f800283a 	ret
    8710:	2005883a 	mov	r2,r4
    8714:	f800283a 	ret
    8718:	00c00044 	movi	r3,1
    871c:	003ff606 	br	86f8 <__umodsi3+0x34>

00008720 <__addsf3>:
    8720:	defffc04 	addi	sp,sp,-16
    8724:	2806d5fa 	srli	r3,r5,23
    8728:	dc000015 	stw	r16,0(sp)
    872c:	2020d5fa 	srli	r16,r4,23
    8730:	200cd7fa 	srli	r6,r4,31
    8734:	00802034 	movhi	r2,128
    8738:	2812d7fa 	srli	r9,r5,31
    873c:	10bfffc4 	addi	r2,r2,-1
    8740:	1114703a 	and	r10,r2,r4
    8744:	1b003fcc 	andi	r12,r3,255
    8748:	dc400115 	stw	r17,4(sp)
    874c:	84003fcc 	andi	r16,r16,255
    8750:	115a703a 	and	r13,r2,r5
    8754:	dfc00315 	stw	ra,12(sp)
    8758:	dc800215 	stw	r18,8(sp)
    875c:	500e90fa 	slli	r7,r10,3
    8760:	681090fa 	slli	r8,r13,3
    8764:	5007883a 	mov	r3,r10
    8768:	3023883a 	mov	r17,r6
    876c:	8317c83a 	sub	r11,r16,r12
    8770:	32403926 	beq	r6,r9,8858 <__addsf3+0x138>
    8774:	02c02e0e 	bge	zero,r11,8830 <__addsf3+0x110>
    8778:	60004c26 	beq	r12,zero,88ac <__addsf3+0x18c>
    877c:	80803fe0 	cmpeqi	r2,r16,255
    8780:	1000801e 	bne	r2,zero,8984 <__addsf3+0x264>
    8784:	42010034 	orhi	r8,r8,1024
    8788:	58800710 	cmplti	r2,r11,28
    878c:	10009e1e 	bne	r2,zero,8a08 <__addsf3+0x2e8>
    8790:	01000044 	movi	r4,1
    8794:	3909c83a 	sub	r4,r7,r4
    8798:	2081002c 	andhi	r2,r4,1024
    879c:	10006826 	beq	r2,zero,8940 <__addsf3+0x220>
    87a0:	04810034 	movhi	r18,1024
    87a4:	94bfffc4 	addi	r18,r18,-1
    87a8:	24a4703a 	and	r18,r4,r18
    87ac:	9009883a 	mov	r4,r18
    87b0:	00093f00 	call	93f0 <__clzsi2>
    87b4:	10bffec4 	addi	r2,r2,-5
    87b8:	9088983a 	sll	r4,r18,r2
    87bc:	1400880e 	bge	r2,r16,89e0 <__addsf3+0x2c0>
    87c0:	00ff0034 	movhi	r3,64512
    87c4:	18ffffc4 	addi	r3,r3,-1
    87c8:	80a1c83a 	sub	r16,r16,r2
    87cc:	20c8703a 	and	r4,r4,r3
    87d0:	208001cc 	andi	r2,r4,7
    87d4:	10000426 	beq	r2,zero,87e8 <__addsf3+0xc8>
    87d8:	208003cc 	andi	r2,r4,15
    87dc:	10800120 	cmpeqi	r2,r2,4
    87e0:	1000011e 	bne	r2,zero,87e8 <__addsf3+0xc8>
    87e4:	21000104 	addi	r4,r4,4
    87e8:	2081002c 	andhi	r2,r4,1024
    87ec:	10005626 	beq	r2,zero,8948 <__addsf3+0x228>
    87f0:	84000044 	addi	r16,r16,1
    87f4:	80803fe0 	cmpeqi	r2,r16,255
    87f8:	1000461e 	bne	r2,zero,8914 <__addsf3+0x1f4>
    87fc:	200491ba 	slli	r2,r4,6
    8800:	1006d27a 	srli	r3,r2,9
    8804:	84003fcc 	andi	r16,r16,255
    8808:	800495fa 	slli	r2,r16,23
    880c:	882297fa 	slli	r17,r17,31
    8810:	10c4b03a 	or	r2,r2,r3
    8814:	1444b03a 	or	r2,r2,r17
    8818:	dfc00317 	ldw	ra,12(sp)
    881c:	dc800217 	ldw	r18,8(sp)
    8820:	dc400117 	ldw	r17,4(sp)
    8824:	dc000017 	ldw	r16,0(sp)
    8828:	dec00404 	addi	sp,sp,16
    882c:	f800283a 	ret
    8830:	58002526 	beq	r11,zero,88c8 <__addsf3+0x1a8>
    8834:	6417c83a 	sub	r11,r12,r16
    8838:	8000821e 	bne	r16,zero,8a44 <__addsf3+0x324>
    883c:	38006426 	beq	r7,zero,89d0 <__addsf3+0x2b0>
    8840:	58bfffc4 	addi	r2,r11,-1
    8844:	1000c226 	beq	r2,zero,8b50 <__addsf3+0x430>
    8848:	5ac03fe0 	cmpeqi	r11,r11,255
    884c:	58004b1e 	bne	r11,zero,897c <__addsf3+0x25c>
    8850:	1017883a 	mov	r11,r2
    8854:	00007e06 	br	8a50 <__addsf3+0x330>
    8858:	02c0510e 	bge	zero,r11,89a0 <__addsf3+0x280>
    885c:	60002626 	beq	r12,zero,88f8 <__addsf3+0x1d8>
    8860:	80803fe0 	cmpeqi	r2,r16,255
    8864:	1000471e 	bne	r2,zero,8984 <__addsf3+0x264>
    8868:	42010034 	orhi	r8,r8,1024
    886c:	58800710 	cmplti	r2,r11,28
    8870:	10007e1e 	bne	r2,zero,8a6c <__addsf3+0x34c>
    8874:	01000044 	movi	r4,1
    8878:	21c9883a 	add	r4,r4,r7
    887c:	2081002c 	andhi	r2,r4,1024
    8880:	10002f26 	beq	r2,zero,8940 <__addsf3+0x220>
    8884:	84000044 	addi	r16,r16,1
    8888:	80803fe0 	cmpeqi	r2,r16,255
    888c:	1000211e 	bne	r2,zero,8914 <__addsf3+0x1f4>
    8890:	2004d07a 	srli	r2,r4,1
    8894:	00df8034 	movhi	r3,32256
    8898:	18ffffc4 	addi	r3,r3,-1
    889c:	2100004c 	andi	r4,r4,1
    88a0:	10c4703a 	and	r2,r2,r3
    88a4:	1108b03a 	or	r4,r2,r4
    88a8:	003fc906 	br	87d0 <__addsf3+0xb0>
    88ac:	40004a26 	beq	r8,zero,89d8 <__addsf3+0x2b8>
    88b0:	58bfffc4 	addi	r2,r11,-1
    88b4:	10009326 	beq	r2,zero,8b04 <__addsf3+0x3e4>
    88b8:	59003fe0 	cmpeqi	r4,r11,255
    88bc:	2000311e 	bne	r4,zero,8984 <__addsf3+0x264>
    88c0:	1017883a 	mov	r11,r2
    88c4:	003fb006 	br	8788 <__addsf3+0x68>
    88c8:	81800044 	addi	r6,r16,1
    88cc:	31803f8c 	andi	r6,r6,254
    88d0:	3000541e 	bne	r6,zero,8a24 <__addsf3+0x304>
    88d4:	80007e1e 	bne	r16,zero,8ad0 <__addsf3+0x3b0>
    88d8:	3800a326 	beq	r7,zero,8b68 <__addsf3+0x448>
    88dc:	40009326 	beq	r8,zero,8b2c <__addsf3+0x40c>
    88e0:	3a09c83a 	sub	r4,r7,r8
    88e4:	2081002c 	andhi	r2,r4,1024
    88e8:	1000a626 	beq	r2,zero,8b84 <__addsf3+0x464>
    88ec:	41c9c83a 	sub	r4,r8,r7
    88f0:	4823883a 	mov	r17,r9
    88f4:	003fb606 	br	87d0 <__addsf3+0xb0>
    88f8:	40003726 	beq	r8,zero,89d8 <__addsf3+0x2b8>
    88fc:	58bfffc4 	addi	r2,r11,-1
    8900:	10007b26 	beq	r2,zero,8af0 <__addsf3+0x3d0>
    8904:	5ac03fe0 	cmpeqi	r11,r11,255
    8908:	58001e1e 	bne	r11,zero,8984 <__addsf3+0x264>
    890c:	1017883a 	mov	r11,r2
    8910:	003fd606 	br	886c <__addsf3+0x14c>
    8914:	043fffc4 	movi	r16,-1
    8918:	0007883a 	mov	r3,zero
    891c:	003fb906 	br	8804 <__addsf3+0xe4>
    8920:	80800044 	addi	r2,r16,1
    8924:	11803f8c 	andi	r6,r2,254
    8928:	30005726 	beq	r6,zero,8a88 <__addsf3+0x368>
    892c:	10c03fe0 	cmpeqi	r3,r2,255
    8930:	183ff81e 	bne	r3,zero,8914 <__addsf3+0x1f4>
    8934:	3a09883a 	add	r4,r7,r8
    8938:	2008d07a 	srli	r4,r4,1
    893c:	1021883a 	mov	r16,r2
    8940:	208001cc 	andi	r2,r4,7
    8944:	103fa41e 	bne	r2,zero,87d8 <__addsf3+0xb8>
    8948:	2014d0fa 	srli	r10,r4,3
    894c:	80803fe0 	cmpeqi	r2,r16,255
    8950:	10000c1e 	bne	r2,zero,8984 <__addsf3+0x264>
    8954:	00802034 	movhi	r2,128
    8958:	10bfffc4 	addi	r2,r2,-1
    895c:	5086703a 	and	r3,r10,r2
    8960:	003fa806 	br	8804 <__addsf3+0xe4>
    8964:	38000626 	beq	r7,zero,8980 <__addsf3+0x260>
    8968:	40000626 	beq	r8,zero,8984 <__addsf3+0x264>
    896c:	2080102c 	andhi	r2,r4,64
    8970:	10000426 	beq	r2,zero,8984 <__addsf3+0x264>
    8974:	2940102c 	andhi	r5,r5,64
    8978:	2800021e 	bne	r5,zero,8984 <__addsf3+0x264>
    897c:	4823883a 	mov	r17,r9
    8980:	6815883a 	mov	r10,r13
    8984:	503fe326 	beq	r10,zero,8914 <__addsf3+0x1f4>
    8988:	00802034 	movhi	r2,128
    898c:	50c01034 	orhi	r3,r10,64
    8990:	10bfffc4 	addi	r2,r2,-1
    8994:	1886703a 	and	r3,r3,r2
    8998:	043fffc4 	movi	r16,-1
    899c:	003f9906 	br	8804 <__addsf3+0xe4>
    89a0:	583fdf26 	beq	r11,zero,8920 <__addsf3+0x200>
    89a4:	6417c83a 	sub	r11,r12,r16
    89a8:	80004226 	beq	r16,zero,8ab4 <__addsf3+0x394>
    89ac:	60803fe0 	cmpeqi	r2,r12,255
    89b0:	103ff31e 	bne	r2,zero,8980 <__addsf3+0x260>
    89b4:	39c10034 	orhi	r7,r7,1024
    89b8:	58800710 	cmplti	r2,r11,28
    89bc:	10005d1e 	bne	r2,zero,8b34 <__addsf3+0x414>
    89c0:	01000044 	movi	r4,1
    89c4:	2209883a 	add	r4,r4,r8
    89c8:	6021883a 	mov	r16,r12
    89cc:	003fab06 	br	887c <__addsf3+0x15c>
    89d0:	4823883a 	mov	r17,r9
    89d4:	6815883a 	mov	r10,r13
    89d8:	5821883a 	mov	r16,r11
    89dc:	003fdb06 	br	894c <__addsf3+0x22c>
    89e0:	1405c83a 	sub	r2,r2,r16
    89e4:	14800044 	addi	r18,r2,1
    89e8:	00800804 	movi	r2,32
    89ec:	1485c83a 	sub	r2,r2,r18
    89f0:	2084983a 	sll	r2,r4,r2
    89f4:	2488d83a 	srl	r4,r4,r18
    89f8:	0021883a 	mov	r16,zero
    89fc:	1004c03a 	cmpne	r2,r2,zero
    8a00:	1108b03a 	or	r4,r2,r4
    8a04:	003f7206 	br	87d0 <__addsf3+0xb0>
    8a08:	01000804 	movi	r4,32
    8a0c:	22c9c83a 	sub	r4,r4,r11
    8a10:	4108983a 	sll	r4,r8,r4
    8a14:	42d0d83a 	srl	r8,r8,r11
    8a18:	2008c03a 	cmpne	r4,r4,zero
    8a1c:	2208b03a 	or	r4,r4,r8
    8a20:	003f5c06 	br	8794 <__addsf3+0x74>
    8a24:	3a25c83a 	sub	r18,r7,r8
    8a28:	9081002c 	andhi	r2,r18,1024
    8a2c:	10002d1e 	bne	r2,zero,8ae4 <__addsf3+0x3c4>
    8a30:	903f5e1e 	bne	r18,zero,87ac <__addsf3+0x8c>
    8a34:	0023883a 	mov	r17,zero
    8a38:	0021883a 	mov	r16,zero
    8a3c:	0007883a 	mov	r3,zero
    8a40:	003f7006 	br	8804 <__addsf3+0xe4>
    8a44:	60803fe0 	cmpeqi	r2,r12,255
    8a48:	103fcc1e 	bne	r2,zero,897c <__addsf3+0x25c>
    8a4c:	39c10034 	orhi	r7,r7,1024
    8a50:	58800710 	cmplti	r2,r11,28
    8a54:	10002e1e 	bne	r2,zero,8b10 <__addsf3+0x3f0>
    8a58:	01000044 	movi	r4,1
    8a5c:	4109c83a 	sub	r4,r8,r4
    8a60:	4823883a 	mov	r17,r9
    8a64:	6021883a 	mov	r16,r12
    8a68:	003f4b06 	br	8798 <__addsf3+0x78>
    8a6c:	01000804 	movi	r4,32
    8a70:	22c9c83a 	sub	r4,r4,r11
    8a74:	4108983a 	sll	r4,r8,r4
    8a78:	42d0d83a 	srl	r8,r8,r11
    8a7c:	2008c03a 	cmpne	r4,r4,zero
    8a80:	2208b03a 	or	r4,r4,r8
    8a84:	003f7c06 	br	8878 <__addsf3+0x158>
    8a88:	803fb61e 	bne	r16,zero,8964 <__addsf3+0x244>
    8a8c:	38003a26 	beq	r7,zero,8b78 <__addsf3+0x458>
    8a90:	40002626 	beq	r8,zero,8b2c <__addsf3+0x40c>
    8a94:	3a09883a 	add	r4,r7,r8
    8a98:	2081002c 	andhi	r2,r4,1024
    8a9c:	103fa826 	beq	r2,zero,8940 <__addsf3+0x220>
    8aa0:	00bf0034 	movhi	r2,64512
    8aa4:	10bfffc4 	addi	r2,r2,-1
    8aa8:	2088703a 	and	r4,r4,r2
    8aac:	04000044 	movi	r16,1
    8ab0:	003fa306 	br	8940 <__addsf3+0x220>
    8ab4:	383fc726 	beq	r7,zero,89d4 <__addsf3+0x2b4>
    8ab8:	58bfffc4 	addi	r2,r11,-1
    8abc:	10000c26 	beq	r2,zero,8af0 <__addsf3+0x3d0>
    8ac0:	5ac03fe0 	cmpeqi	r11,r11,255
    8ac4:	583fae1e 	bne	r11,zero,8980 <__addsf3+0x260>
    8ac8:	1017883a 	mov	r11,r2
    8acc:	003fba06 	br	89b8 <__addsf3+0x298>
    8ad0:	383fa51e 	bne	r7,zero,8968 <__addsf3+0x248>
    8ad4:	403fa91e 	bne	r8,zero,897c <__addsf3+0x25c>
    8ad8:	0023883a 	mov	r17,zero
    8adc:	1007883a 	mov	r3,r2
    8ae0:	003fad06 	br	8998 <__addsf3+0x278>
    8ae4:	41e5c83a 	sub	r18,r8,r7
    8ae8:	4823883a 	mov	r17,r9
    8aec:	003f2f06 	br	87ac <__addsf3+0x8c>
    8af0:	3a09883a 	add	r4,r7,r8
    8af4:	2081002c 	andhi	r2,r4,1024
    8af8:	10001926 	beq	r2,zero,8b60 <__addsf3+0x440>
    8afc:	04000084 	movi	r16,2
    8b00:	003f6306 	br	8890 <__addsf3+0x170>
    8b04:	3a09c83a 	sub	r4,r7,r8
    8b08:	04000044 	movi	r16,1
    8b0c:	003f2206 	br	8798 <__addsf3+0x78>
    8b10:	00800804 	movi	r2,32
    8b14:	12c5c83a 	sub	r2,r2,r11
    8b18:	3884983a 	sll	r2,r7,r2
    8b1c:	3aced83a 	srl	r7,r7,r11
    8b20:	1008c03a 	cmpne	r4,r2,zero
    8b24:	21c8b03a 	or	r4,r4,r7
    8b28:	003fcc06 	br	8a5c <__addsf3+0x33c>
    8b2c:	0021883a 	mov	r16,zero
    8b30:	003f3406 	br	8804 <__addsf3+0xe4>
    8b34:	01000804 	movi	r4,32
    8b38:	22c9c83a 	sub	r4,r4,r11
    8b3c:	3908983a 	sll	r4,r7,r4
    8b40:	3aced83a 	srl	r7,r7,r11
    8b44:	2008c03a 	cmpne	r4,r4,zero
    8b48:	21c8b03a 	or	r4,r4,r7
    8b4c:	003f9d06 	br	89c4 <__addsf3+0x2a4>
    8b50:	41c9c83a 	sub	r4,r8,r7
    8b54:	4823883a 	mov	r17,r9
    8b58:	04000044 	movi	r16,1
    8b5c:	003f0e06 	br	8798 <__addsf3+0x78>
    8b60:	04000044 	movi	r16,1
    8b64:	003f7606 	br	8940 <__addsf3+0x220>
    8b68:	403fb226 	beq	r8,zero,8a34 <__addsf3+0x314>
    8b6c:	4823883a 	mov	r17,r9
    8b70:	6807883a 	mov	r3,r13
    8b74:	003f2306 	br	8804 <__addsf3+0xe4>
    8b78:	6807883a 	mov	r3,r13
    8b7c:	0021883a 	mov	r16,zero
    8b80:	003f2006 	br	8804 <__addsf3+0xe4>
    8b84:	203fab26 	beq	r4,zero,8a34 <__addsf3+0x314>
    8b88:	003f6d06 	br	8940 <__addsf3+0x220>

00008b8c <__divsf3>:
    8b8c:	defff604 	addi	sp,sp,-40
    8b90:	2006d5fa 	srli	r3,r4,23
    8b94:	dd400615 	stw	r21,24(sp)
    8b98:	202ad7fa 	srli	r21,r4,31
    8b9c:	00802034 	movhi	r2,128
    8ba0:	dc800315 	stw	r18,12(sp)
    8ba4:	dc000115 	stw	r16,4(sp)
    8ba8:	10bfffc4 	addi	r2,r2,-1
    8bac:	dfc00915 	stw	ra,36(sp)
    8bb0:	ddc00815 	stw	r23,32(sp)
    8bb4:	dd800715 	stw	r22,28(sp)
    8bb8:	dd000515 	stw	r20,20(sp)
    8bbc:	dcc00415 	stw	r19,16(sp)
    8bc0:	dc400215 	stw	r17,8(sp)
    8bc4:	18c03fcc 	andi	r3,r3,255
    8bc8:	1120703a 	and	r16,r2,r4
    8bcc:	a825883a 	mov	r18,r21
    8bd0:	18007b26 	beq	r3,zero,8dc0 <__divsf3+0x234>
    8bd4:	18803fe0 	cmpeqi	r2,r3,255
    8bd8:	10007e1e 	bne	r2,zero,8dd4 <__divsf3+0x248>
    8bdc:	800490fa 	slli	r2,r16,3
    8be0:	1d3fe044 	addi	r20,r3,-127
    8be4:	0023883a 	mov	r17,zero
    8be8:	14010034 	orhi	r16,r2,1024
    8bec:	002d883a 	mov	r22,zero
    8bf0:	2806d5fa 	srli	r3,r5,23
    8bf4:	01002034 	movhi	r4,128
    8bf8:	213fffc4 	addi	r4,r4,-1
    8bfc:	18c03fcc 	andi	r3,r3,255
    8c00:	282ed7fa 	srli	r23,r5,31
    8c04:	2166703a 	and	r19,r4,r5
    8c08:	18005326 	beq	r3,zero,8d58 <__divsf3+0x1cc>
    8c0c:	18803fe0 	cmpeqi	r2,r3,255
    8c10:	10004d1e 	bne	r2,zero,8d48 <__divsf3+0x1bc>
    8c14:	980a90fa 	slli	r5,r19,3
    8c18:	18ffe044 	addi	r3,r3,-127
    8c1c:	a0e9c83a 	sub	r20,r20,r3
    8c20:	2cc10034 	orhi	r19,r5,1024
    8c24:	0007883a 	mov	r3,zero
    8c28:	1c62b03a 	or	r17,r3,r17
    8c2c:	882290ba 	slli	r17,r17,2
    8c30:	00800074 	movhi	r2,1
    8c34:	bd6af03a 	xor	r21,r23,r21
    8c38:	8885883a 	add	r2,r17,r2
    8c3c:	10a31217 	ldw	r2,-29624(r2)
    8c40:	a809883a 	mov	r4,r21
    8c44:	1000683a 	jmp	r2
    8c48:	00008f0c 	andi	zero,zero,572
    8c4c:	00008e4c 	andi	zero,zero,569
    8c50:	00008cfc 	xorhi	zero,zero,563
    8c54:	00008c8c 	andi	zero,zero,562
    8c58:	00008cfc 	xorhi	zero,zero,563
    8c5c:	00008eb8 	rdprs	zero,zero,570
    8c60:	00008cfc 	xorhi	zero,zero,563
    8c64:	00008c8c 	andi	zero,zero,562
    8c68:	00008e4c 	andi	zero,zero,569
    8c6c:	00008e4c 	andi	zero,zero,569
    8c70:	00008eb8 	rdprs	zero,zero,570
    8c74:	00008c8c 	andi	zero,zero,562
    8c78:	00008c98 	cmpnei	zero,zero,562
    8c7c:	00008c98 	cmpnei	zero,zero,562
    8c80:	00008c98 	cmpnei	zero,zero,562
    8c84:	00008ed0 	cmplti	zero,zero,571
    8c88:	0027883a 	mov	r19,zero
    8c8c:	b825883a 	mov	r18,r23
    8c90:	9821883a 	mov	r16,r19
    8c94:	182d883a 	mov	r22,r3
    8c98:	b08000a0 	cmpeqi	r2,r22,2
    8c9c:	1000831e 	bne	r2,zero,8eac <__divsf3+0x320>
    8ca0:	b08000e0 	cmpeqi	r2,r22,3
    8ca4:	1000941e 	bne	r2,zero,8ef8 <__divsf3+0x36c>
    8ca8:	b5800060 	cmpeqi	r22,r22,1
    8cac:	b000141e 	bne	r22,zero,8d00 <__divsf3+0x174>
    8cb0:	a0801fc4 	addi	r2,r20,127
    8cb4:	0080690e 	bge	zero,r2,8e5c <__divsf3+0x2d0>
    8cb8:	80c001cc 	andi	r3,r16,7
    8cbc:	18000426 	beq	r3,zero,8cd0 <__divsf3+0x144>
    8cc0:	80c003cc 	andi	r3,r16,15
    8cc4:	18c00120 	cmpeqi	r3,r3,4
    8cc8:	1800011e 	bne	r3,zero,8cd0 <__divsf3+0x144>
    8ccc:	84000104 	addi	r16,r16,4
    8cd0:	80c2002c 	andhi	r3,r16,2048
    8cd4:	18000426 	beq	r3,zero,8ce8 <__divsf3+0x15c>
    8cd8:	00be0034 	movhi	r2,63488
    8cdc:	10bfffc4 	addi	r2,r2,-1
    8ce0:	80a0703a 	and	r16,r16,r2
    8ce4:	a0802004 	addi	r2,r20,128
    8ce8:	10c03fc8 	cmpgei	r3,r2,255
    8cec:	18006f1e 	bne	r3,zero,8eac <__divsf3+0x320>
    8cf0:	802091ba 	slli	r16,r16,6
    8cf4:	8020d27a 	srli	r16,r16,9
    8cf8:	00000306 	br	8d08 <__divsf3+0x17c>
    8cfc:	a825883a 	mov	r18,r21
    8d00:	0005883a 	mov	r2,zero
    8d04:	0021883a 	mov	r16,zero
    8d08:	10803fcc 	andi	r2,r2,255
    8d0c:	100495fa 	slli	r2,r2,23
    8d10:	902497fa 	slli	r18,r18,31
    8d14:	1404b03a 	or	r2,r2,r16
    8d18:	1484b03a 	or	r2,r2,r18
    8d1c:	dfc00917 	ldw	ra,36(sp)
    8d20:	ddc00817 	ldw	r23,32(sp)
    8d24:	dd800717 	ldw	r22,28(sp)
    8d28:	dd400617 	ldw	r21,24(sp)
    8d2c:	dd000517 	ldw	r20,20(sp)
    8d30:	dcc00417 	ldw	r19,16(sp)
    8d34:	dc800317 	ldw	r18,12(sp)
    8d38:	dc400217 	ldw	r17,8(sp)
    8d3c:	dc000117 	ldw	r16,4(sp)
    8d40:	dec00a04 	addi	sp,sp,40
    8d44:	f800283a 	ret
    8d48:	a53fc044 	addi	r20,r20,-255
    8d4c:	98003d1e 	bne	r19,zero,8e44 <__divsf3+0x2b8>
    8d50:	00c00084 	movi	r3,2
    8d54:	00000206 	br	8d60 <__divsf3+0x1d4>
    8d58:	9800321e 	bne	r19,zero,8e24 <__divsf3+0x298>
    8d5c:	00c00044 	movi	r3,1
    8d60:	1c62b03a 	or	r17,r3,r17
    8d64:	882290ba 	slli	r17,r17,2
    8d68:	00800074 	movhi	r2,1
    8d6c:	bd6af03a 	xor	r21,r23,r21
    8d70:	8885883a 	add	r2,r17,r2
    8d74:	10a36017 	ldw	r2,-29312(r2)
    8d78:	a809883a 	mov	r4,r21
    8d7c:	1000683a 	jmp	r2
    8d80:	00008e4c 	andi	zero,zero,569
    8d84:	00008e4c 	andi	zero,zero,569
    8d88:	00008cfc 	xorhi	zero,zero,563
    8d8c:	00008c88 	cmpgei	zero,zero,562
    8d90:	00008cfc 	xorhi	zero,zero,563
    8d94:	00008eb8 	rdprs	zero,zero,570
    8d98:	00008cfc 	xorhi	zero,zero,563
    8d9c:	00008c88 	cmpgei	zero,zero,562
    8da0:	00008e4c 	andi	zero,zero,569
    8da4:	00008e4c 	andi	zero,zero,569
    8da8:	00008eb8 	rdprs	zero,zero,570
    8dac:	00008c88 	cmpgei	zero,zero,562
    8db0:	00008c98 	cmpnei	zero,zero,562
    8db4:	00008c98 	cmpnei	zero,zero,562
    8db8:	00008c98 	cmpnei	zero,zero,562
    8dbc:	00008ecc 	andi	zero,zero,571
    8dc0:	80000d1e 	bne	r16,zero,8df8 <__divsf3+0x26c>
    8dc4:	04400104 	movi	r17,4
    8dc8:	0029883a 	mov	r20,zero
    8dcc:	05800044 	movi	r22,1
    8dd0:	003f8706 	br	8bf0 <__divsf3+0x64>
    8dd4:	8000041e 	bne	r16,zero,8de8 <__divsf3+0x25c>
    8dd8:	04400204 	movi	r17,8
    8ddc:	05003fc4 	movi	r20,255
    8de0:	05800084 	movi	r22,2
    8de4:	003f8206 	br	8bf0 <__divsf3+0x64>
    8de8:	04400304 	movi	r17,12
    8dec:	05003fc4 	movi	r20,255
    8df0:	058000c4 	movi	r22,3
    8df4:	003f7e06 	br	8bf0 <__divsf3+0x64>
    8df8:	8009883a 	mov	r4,r16
    8dfc:	d9400015 	stw	r5,0(sp)
    8e00:	00093f00 	call	93f0 <__clzsi2>
    8e04:	10fffec4 	addi	r3,r2,-5
    8e08:	80e0983a 	sll	r16,r16,r3
    8e0c:	00ffe284 	movi	r3,-118
    8e10:	d9400017 	ldw	r5,0(sp)
    8e14:	18a9c83a 	sub	r20,r3,r2
    8e18:	0023883a 	mov	r17,zero
    8e1c:	002d883a 	mov	r22,zero
    8e20:	003f7306 	br	8bf0 <__divsf3+0x64>
    8e24:	9809883a 	mov	r4,r19
    8e28:	00093f00 	call	93f0 <__clzsi2>
    8e2c:	a087883a 	add	r3,r20,r2
    8e30:	113ffec4 	addi	r4,r2,-5
    8e34:	1d001d84 	addi	r20,r3,118
    8e38:	9926983a 	sll	r19,r19,r4
    8e3c:	0007883a 	mov	r3,zero
    8e40:	003f7906 	br	8c28 <__divsf3+0x9c>
    8e44:	00c000c4 	movi	r3,3
    8e48:	003f7706 	br	8c28 <__divsf3+0x9c>
    8e4c:	2025883a 	mov	r18,r4
    8e50:	00bfffc4 	movi	r2,-1
    8e54:	0021883a 	mov	r16,zero
    8e58:	003fab06 	br	8d08 <__divsf3+0x17c>
    8e5c:	00c00044 	movi	r3,1
    8e60:	1885c83a 	sub	r2,r3,r2
    8e64:	10c00708 	cmpgei	r3,r2,28
    8e68:	183fa51e 	bne	r3,zero,8d00 <__divsf3+0x174>
    8e6c:	a0c02784 	addi	r3,r20,158
    8e70:	80c6983a 	sll	r3,r16,r3
    8e74:	8084d83a 	srl	r2,r16,r2
    8e78:	1820c03a 	cmpne	r16,r3,zero
    8e7c:	1404b03a 	or	r2,r2,r16
    8e80:	10c001cc 	andi	r3,r2,7
    8e84:	18000426 	beq	r3,zero,8e98 <__divsf3+0x30c>
    8e88:	10c003cc 	andi	r3,r2,15
    8e8c:	18c00120 	cmpeqi	r3,r3,4
    8e90:	1800011e 	bne	r3,zero,8e98 <__divsf3+0x30c>
    8e94:	10800104 	addi	r2,r2,4
    8e98:	10c1002c 	andhi	r3,r2,1024
    8e9c:	18003426 	beq	r3,zero,8f70 <__divsf3+0x3e4>
    8ea0:	00800044 	movi	r2,1
    8ea4:	0021883a 	mov	r16,zero
    8ea8:	003f9706 	br	8d08 <__divsf3+0x17c>
    8eac:	00bfffc4 	movi	r2,-1
    8eb0:	0021883a 	mov	r16,zero
    8eb4:	003f9406 	br	8d08 <__divsf3+0x17c>
    8eb8:	04002034 	movhi	r16,128
    8ebc:	0025883a 	mov	r18,zero
    8ec0:	843fffc4 	addi	r16,r16,-1
    8ec4:	00bfffc4 	movi	r2,-1
    8ec8:	003f8f06 	br	8d08 <__divsf3+0x17c>
    8ecc:	0027883a 	mov	r19,zero
    8ed0:	8080102c 	andhi	r2,r16,64
    8ed4:	10000826 	beq	r2,zero,8ef8 <__divsf3+0x36c>
    8ed8:	9880102c 	andhi	r2,r19,64
    8edc:	1000061e 	bne	r2,zero,8ef8 <__divsf3+0x36c>
    8ee0:	00802034 	movhi	r2,128
    8ee4:	9c001034 	orhi	r16,r19,64
    8ee8:	10bfffc4 	addi	r2,r2,-1
    8eec:	80a0703a 	and	r16,r16,r2
    8ef0:	b825883a 	mov	r18,r23
    8ef4:	003ff306 	br	8ec4 <__divsf3+0x338>
    8ef8:	00802034 	movhi	r2,128
    8efc:	84001034 	orhi	r16,r16,64
    8f00:	10bfffc4 	addi	r2,r2,-1
    8f04:	80a0703a 	and	r16,r16,r2
    8f08:	003fee06 	br	8ec4 <__divsf3+0x338>
    8f0c:	8004917a 	slli	r2,r16,5
    8f10:	980a917a 	slli	r5,r19,5
    8f14:	1140122e 	bgeu	r2,r5,8f60 <__divsf3+0x3d4>
    8f18:	a53fffc4 	addi	r20,r20,-1
    8f1c:	010006c4 	movi	r4,27
    8f20:	0021883a 	mov	r16,zero
    8f24:	1007883a 	mov	r3,r2
    8f28:	213fffc4 	addi	r4,r4,-1
    8f2c:	1085883a 	add	r2,r2,r2
    8f30:	8421883a 	add	r16,r16,r16
    8f34:	18000116 	blt	r3,zero,8f3c <__divsf3+0x3b0>
    8f38:	11400236 	bltu	r2,r5,8f44 <__divsf3+0x3b8>
    8f3c:	1145c83a 	sub	r2,r2,r5
    8f40:	84000054 	ori	r16,r16,1
    8f44:	203ff71e 	bne	r4,zero,8f24 <__divsf3+0x398>
    8f48:	1004c03a 	cmpne	r2,r2,zero
    8f4c:	1420b03a 	or	r16,r2,r16
    8f50:	a0801fc4 	addi	r2,r20,127
    8f54:	a825883a 	mov	r18,r21
    8f58:	00bf5716 	blt	zero,r2,8cb8 <__divsf3+0x12c>
    8f5c:	003fbf06 	br	8e5c <__divsf3+0x2d0>
    8f60:	1145c83a 	sub	r2,r2,r5
    8f64:	01000684 	movi	r4,26
    8f68:	04000044 	movi	r16,1
    8f6c:	003fed06 	br	8f24 <__divsf3+0x398>
    8f70:	102091ba 	slli	r16,r2,6
    8f74:	0005883a 	mov	r2,zero
    8f78:	8020d27a 	srli	r16,r16,9
    8f7c:	003f6206 	br	8d08 <__divsf3+0x17c>

00008f80 <__mulsf3>:
    8f80:	defff504 	addi	sp,sp,-44
    8f84:	dc400215 	stw	r17,8(sp)
    8f88:	2022d5fa 	srli	r17,r4,23
    8f8c:	dc000115 	stw	r16,4(sp)
    8f90:	04002034 	movhi	r16,128
    8f94:	dd800715 	stw	r22,28(sp)
    8f98:	843fffc4 	addi	r16,r16,-1
    8f9c:	dfc00a15 	stw	ra,40(sp)
    8fa0:	df000915 	stw	fp,36(sp)
    8fa4:	ddc00815 	stw	r23,32(sp)
    8fa8:	dd400615 	stw	r21,24(sp)
    8fac:	dd000515 	stw	r20,20(sp)
    8fb0:	dcc00415 	stw	r19,16(sp)
    8fb4:	dc800315 	stw	r18,12(sp)
    8fb8:	8c403fcc 	andi	r17,r17,255
    8fbc:	202cd7fa 	srli	r22,r4,31
    8fc0:	8120703a 	and	r16,r16,r4
    8fc4:	88008d26 	beq	r17,zero,91fc <__mulsf3+0x27c>
    8fc8:	88803fe0 	cmpeqi	r2,r17,255
    8fcc:	1000901e 	bne	r2,zero,9210 <__mulsf3+0x290>
    8fd0:	802090fa 	slli	r16,r16,3
    8fd4:	8c7fe044 	addi	r17,r17,-127
    8fd8:	0025883a 	mov	r18,zero
    8fdc:	84010034 	orhi	r16,r16,1024
    8fe0:	0029883a 	mov	r20,zero
    8fe4:	2804d5fa 	srli	r2,r5,23
    8fe8:	01002034 	movhi	r4,128
    8fec:	213fffc4 	addi	r4,r4,-1
    8ff0:	10803fcc 	andi	r2,r2,255
    8ff4:	282ed7fa 	srli	r23,r5,31
    8ff8:	2166703a 	and	r19,r4,r5
    8ffc:	10007b26 	beq	r2,zero,91ec <__mulsf3+0x26c>
    9000:	10c03fe0 	cmpeqi	r3,r2,255
    9004:	1800871e 	bne	r3,zero,9224 <__mulsf3+0x2a4>
    9008:	980890fa 	slli	r4,r19,3
    900c:	10bfe044 	addi	r2,r2,-127
    9010:	88a3883a 	add	r17,r17,r2
    9014:	24c10034 	orhi	r19,r4,1024
    9018:	0007883a 	mov	r3,zero
    901c:	90800428 	cmpgeui	r2,r18,16
    9020:	b5eaf03a 	xor	r21,r22,r23
    9024:	8f000044 	addi	fp,r17,1
    9028:	1000341e 	bne	r2,zero,90fc <__mulsf3+0x17c>
    902c:	902490ba 	slli	r18,r18,2
    9030:	00800074 	movhi	r2,1
    9034:	9085883a 	add	r2,r18,r2
    9038:	10a41017 	ldw	r2,-28608(r2)
    903c:	1000683a 	jmp	r2
    9040:	000090fc 	xorhi	zero,zero,579
    9044:	00009084 	movi	zero,578
    9048:	00009084 	movi	zero,578
    904c:	00009080 	call	908 <__alt_mem_onchip_mem-0x76f8>
    9050:	0000908c 	andi	zero,zero,578
    9054:	0000908c 	andi	zero,zero,578
    9058:	000092b0 	cmpltui	zero,zero,586
    905c:	00009080 	call	908 <__alt_mem_onchip_mem-0x76f8>
    9060:	0000908c 	andi	zero,zero,578
    9064:	000092b0 	cmpltui	zero,zero,586
    9068:	0000908c 	andi	zero,zero,578
    906c:	00009080 	call	908 <__alt_mem_onchip_mem-0x76f8>
    9070:	00009238 	rdprs	zero,zero,584
    9074:	00009238 	rdprs	zero,zero,584
    9078:	00009238 	rdprs	zero,zero,584
    907c:	00009314 	movui	zero,588
    9080:	b82b883a 	mov	r21,r23
    9084:	9821883a 	mov	r16,r19
    9088:	1829883a 	mov	r20,r3
    908c:	a08000a0 	cmpeqi	r2,r20,2
    9090:	1000171e 	bne	r2,zero,90f0 <__mulsf3+0x170>
    9094:	a08000e0 	cmpeqi	r2,r20,3
    9098:	1000b41e 	bne	r2,zero,936c <__mulsf3+0x3ec>
    909c:	a0800060 	cmpeqi	r2,r20,1
    90a0:	10003f26 	beq	r2,zero,91a0 <__mulsf3+0x220>
    90a4:	0007883a 	mov	r3,zero
    90a8:	0009883a 	mov	r4,zero
    90ac:	1c003fcc 	andi	r16,r3,255
    90b0:	802095fa 	slli	r16,r16,23
    90b4:	a80497fa 	slli	r2,r21,31
    90b8:	8120b03a 	or	r16,r16,r4
    90bc:	8084b03a 	or	r2,r16,r2
    90c0:	dfc00a17 	ldw	ra,40(sp)
    90c4:	df000917 	ldw	fp,36(sp)
    90c8:	ddc00817 	ldw	r23,32(sp)
    90cc:	dd800717 	ldw	r22,28(sp)
    90d0:	dd400617 	ldw	r21,24(sp)
    90d4:	dd000517 	ldw	r20,20(sp)
    90d8:	dcc00417 	ldw	r19,16(sp)
    90dc:	dc800317 	ldw	r18,12(sp)
    90e0:	dc400217 	ldw	r17,8(sp)
    90e4:	dc000117 	ldw	r16,4(sp)
    90e8:	dec00b04 	addi	sp,sp,44
    90ec:	f800283a 	ret
    90f0:	00ffffc4 	movi	r3,-1
    90f4:	0009883a 	mov	r4,zero
    90f8:	003fec06 	br	90ac <__mulsf3+0x12c>
    90fc:	8028d43a 	srli	r20,r16,16
    9100:	9cbfffcc 	andi	r18,r19,65535
    9104:	843fffcc 	andi	r16,r16,65535
    9108:	900b883a 	mov	r5,r18
    910c:	8009883a 	mov	r4,r16
    9110:	00094440 	call	9444 <__mulsi3>
    9114:	9826d43a 	srli	r19,r19,16
    9118:	900b883a 	mov	r5,r18
    911c:	a009883a 	mov	r4,r20
    9120:	1025883a 	mov	r18,r2
    9124:	00094440 	call	9444 <__mulsi3>
    9128:	980b883a 	mov	r5,r19
    912c:	a009883a 	mov	r4,r20
    9130:	1029883a 	mov	r20,r2
    9134:	00094440 	call	9444 <__mulsi3>
    9138:	9809883a 	mov	r4,r19
    913c:	800b883a 	mov	r5,r16
    9140:	1027883a 	mov	r19,r2
    9144:	00094440 	call	9444 <__mulsi3>
    9148:	9006d43a 	srli	r3,r18,16
    914c:	1505883a 	add	r2,r2,r20
    9150:	1887883a 	add	r3,r3,r2
    9154:	1d00022e 	bgeu	r3,r20,9160 <__mulsf3+0x1e0>
    9158:	00800074 	movhi	r2,1
    915c:	98a7883a 	add	r19,r19,r2
    9160:	1808943a 	slli	r4,r3,16
    9164:	1820d43a 	srli	r16,r3,16
    9168:	94bfffcc 	andi	r18,r18,65535
    916c:	2489883a 	add	r4,r4,r18
    9170:	200a91ba 	slli	r5,r4,6
    9174:	84e1883a 	add	r16,r16,r19
    9178:	802091ba 	slli	r16,r16,6
    917c:	2008d6ba 	srli	r4,r4,26
    9180:	2804c03a 	cmpne	r2,r5,zero
    9184:	80c2002c 	andhi	r3,r16,2048
    9188:	1108b03a 	or	r4,r2,r4
    918c:	8120b03a 	or	r16,r16,r4
    9190:	18007026 	beq	r3,zero,9354 <__mulsf3+0x3d4>
    9194:	8004d07a 	srli	r2,r16,1
    9198:	8400004c 	andi	r16,r16,1
    919c:	1420b03a 	or	r16,r2,r16
    91a0:	e0c01fc4 	addi	r3,fp,127
    91a4:	00c0470e 	bge	zero,r3,92c4 <__mulsf3+0x344>
    91a8:	808001cc 	andi	r2,r16,7
    91ac:	10000426 	beq	r2,zero,91c0 <__mulsf3+0x240>
    91b0:	808003cc 	andi	r2,r16,15
    91b4:	10800120 	cmpeqi	r2,r2,4
    91b8:	1000011e 	bne	r2,zero,91c0 <__mulsf3+0x240>
    91bc:	84000104 	addi	r16,r16,4
    91c0:	8082002c 	andhi	r2,r16,2048
    91c4:	10000426 	beq	r2,zero,91d8 <__mulsf3+0x258>
    91c8:	00be0034 	movhi	r2,63488
    91cc:	10bfffc4 	addi	r2,r2,-1
    91d0:	80a0703a 	and	r16,r16,r2
    91d4:	e0c02004 	addi	r3,fp,128
    91d8:	18803fc8 	cmpgei	r2,r3,255
    91dc:	103fc41e 	bne	r2,zero,90f0 <__mulsf3+0x170>
    91e0:	802091ba 	slli	r16,r16,6
    91e4:	8008d27a 	srli	r4,r16,9
    91e8:	003fb006 	br	90ac <__mulsf3+0x12c>
    91ec:	9800281e 	bne	r19,zero,9290 <__mulsf3+0x310>
    91f0:	94800054 	ori	r18,r18,1
    91f4:	00c00044 	movi	r3,1
    91f8:	003f8806 	br	901c <__mulsf3+0x9c>
    91fc:	8000191e 	bne	r16,zero,9264 <__mulsf3+0x2e4>
    9200:	04800104 	movi	r18,4
    9204:	0023883a 	mov	r17,zero
    9208:	05000044 	movi	r20,1
    920c:	003f7506 	br	8fe4 <__mulsf3+0x64>
    9210:	8000101e 	bne	r16,zero,9254 <__mulsf3+0x2d4>
    9214:	04800204 	movi	r18,8
    9218:	04403fc4 	movi	r17,255
    921c:	05000084 	movi	r20,2
    9220:	003f7006 	br	8fe4 <__mulsf3+0x64>
    9224:	8c403fc4 	addi	r17,r17,255
    9228:	9800071e 	bne	r19,zero,9248 <__mulsf3+0x2c8>
    922c:	94800094 	ori	r18,r18,2
    9230:	00c00084 	movi	r3,2
    9234:	003f7906 	br	901c <__mulsf3+0x9c>
    9238:	a08000a0 	cmpeqi	r2,r20,2
    923c:	b02b883a 	mov	r21,r22
    9240:	103f9426 	beq	r2,zero,9094 <__mulsf3+0x114>
    9244:	003faa06 	br	90f0 <__mulsf3+0x170>
    9248:	948000d4 	ori	r18,r18,3
    924c:	00c000c4 	movi	r3,3
    9250:	003f7206 	br	901c <__mulsf3+0x9c>
    9254:	04800304 	movi	r18,12
    9258:	04403fc4 	movi	r17,255
    925c:	050000c4 	movi	r20,3
    9260:	003f6006 	br	8fe4 <__mulsf3+0x64>
    9264:	8009883a 	mov	r4,r16
    9268:	d9400015 	stw	r5,0(sp)
    926c:	00093f00 	call	93f0 <__clzsi2>
    9270:	10fffec4 	addi	r3,r2,-5
    9274:	047fe284 	movi	r17,-118
    9278:	80e0983a 	sll	r16,r16,r3
    927c:	d9400017 	ldw	r5,0(sp)
    9280:	88a3c83a 	sub	r17,r17,r2
    9284:	0025883a 	mov	r18,zero
    9288:	0029883a 	mov	r20,zero
    928c:	003f5506 	br	8fe4 <__mulsf3+0x64>
    9290:	9809883a 	mov	r4,r19
    9294:	00093f00 	call	93f0 <__clzsi2>
    9298:	10fffec4 	addi	r3,r2,-5
    929c:	88a3c83a 	sub	r17,r17,r2
    92a0:	98e6983a 	sll	r19,r19,r3
    92a4:	8c7fe284 	addi	r17,r17,-118
    92a8:	0007883a 	mov	r3,zero
    92ac:	003f5b06 	br	901c <__mulsf3+0x9c>
    92b0:	01002034 	movhi	r4,128
    92b4:	002b883a 	mov	r21,zero
    92b8:	213fffc4 	addi	r4,r4,-1
    92bc:	00ffffc4 	movi	r3,-1
    92c0:	003f7a06 	br	90ac <__mulsf3+0x12c>
    92c4:	00800044 	movi	r2,1
    92c8:	10c7c83a 	sub	r3,r2,r3
    92cc:	18800708 	cmpgei	r2,r3,28
    92d0:	103f741e 	bne	r2,zero,90a4 <__mulsf3+0x124>
    92d4:	e1002784 	addi	r4,fp,158
    92d8:	8108983a 	sll	r4,r16,r4
    92dc:	80e0d83a 	srl	r16,r16,r3
    92e0:	2008c03a 	cmpne	r4,r4,zero
    92e4:	8120b03a 	or	r16,r16,r4
    92e8:	808001cc 	andi	r2,r16,7
    92ec:	10000426 	beq	r2,zero,9300 <__mulsf3+0x380>
    92f0:	808003cc 	andi	r2,r16,15
    92f4:	10800120 	cmpeqi	r2,r2,4
    92f8:	1000011e 	bne	r2,zero,9300 <__mulsf3+0x380>
    92fc:	84000104 	addi	r16,r16,4
    9300:	8081002c 	andhi	r2,r16,1024
    9304:	10001526 	beq	r2,zero,935c <__mulsf3+0x3dc>
    9308:	00c00044 	movi	r3,1
    930c:	0009883a 	mov	r4,zero
    9310:	003f6606 	br	90ac <__mulsf3+0x12c>
    9314:	8080102c 	andhi	r2,r16,64
    9318:	10000826 	beq	r2,zero,933c <__mulsf3+0x3bc>
    931c:	9880102c 	andhi	r2,r19,64
    9320:	1000061e 	bne	r2,zero,933c <__mulsf3+0x3bc>
    9324:	00802034 	movhi	r2,128
    9328:	99001034 	orhi	r4,r19,64
    932c:	10bfffc4 	addi	r2,r2,-1
    9330:	2088703a 	and	r4,r4,r2
    9334:	b82b883a 	mov	r21,r23
    9338:	003fe006 	br	92bc <__mulsf3+0x33c>
    933c:	00802034 	movhi	r2,128
    9340:	81001034 	orhi	r4,r16,64
    9344:	10bfffc4 	addi	r2,r2,-1
    9348:	2088703a 	and	r4,r4,r2
    934c:	b02b883a 	mov	r21,r22
    9350:	003fda06 	br	92bc <__mulsf3+0x33c>
    9354:	8839883a 	mov	fp,r17
    9358:	003f9106 	br	91a0 <__mulsf3+0x220>
    935c:	802091ba 	slli	r16,r16,6
    9360:	0007883a 	mov	r3,zero
    9364:	8008d27a 	srli	r4,r16,9
    9368:	003f5006 	br	90ac <__mulsf3+0x12c>
    936c:	00802034 	movhi	r2,128
    9370:	81001034 	orhi	r4,r16,64
    9374:	10bfffc4 	addi	r2,r2,-1
    9378:	2088703a 	and	r4,r4,r2
    937c:	003fcf06 	br	92bc <__mulsf3+0x33c>

00009380 <__fixsfsi>:
    9380:	200ad5fa 	srli	r5,r4,23
    9384:	00c02034 	movhi	r3,128
    9388:	18ffffc4 	addi	r3,r3,-1
    938c:	29403fcc 	andi	r5,r5,255
    9390:	29801fd0 	cmplti	r6,r5,127
    9394:	200ed7fa 	srli	r7,r4,31
    9398:	1906703a 	and	r3,r3,r4
    939c:	3000061e 	bne	r6,zero,93b8 <__fixsfsi+0x38>
    93a0:	28802790 	cmplti	r2,r5,158
    93a4:	1000061e 	bne	r2,zero,93c0 <__fixsfsi+0x40>
    93a8:	00a00034 	movhi	r2,32768
    93ac:	10bfffc4 	addi	r2,r2,-1
    93b0:	3885883a 	add	r2,r7,r2
    93b4:	f800283a 	ret
    93b8:	0005883a 	mov	r2,zero
    93bc:	f800283a 	ret
    93c0:	28802590 	cmplti	r2,r5,150
    93c4:	18c02034 	orhi	r3,r3,128
    93c8:	1000051e 	bne	r2,zero,93e0 <__fixsfsi+0x60>
    93cc:	28bfda84 	addi	r2,r5,-150
    93d0:	1884983a 	sll	r2,r3,r2
    93d4:	383ff926 	beq	r7,zero,93bc <__fixsfsi+0x3c>
    93d8:	0085c83a 	sub	r2,zero,r2
    93dc:	f800283a 	ret
    93e0:	00802584 	movi	r2,150
    93e4:	1145c83a 	sub	r2,r2,r5
    93e8:	1884d83a 	srl	r2,r3,r2
    93ec:	003ff906 	br	93d4 <__fixsfsi+0x54>

000093f0 <__clzsi2>:
    93f0:	00bfffd4 	movui	r2,65535
    93f4:	11000436 	bltu	r2,r4,9408 <__clzsi2+0x18>
    93f8:	20804030 	cmpltui	r2,r4,256
    93fc:	10000e26 	beq	r2,zero,9438 <__clzsi2+0x48>
    9400:	01400804 	movi	r5,32
    9404:	00000406 	br	9418 <__clzsi2+0x28>
    9408:	00804034 	movhi	r2,256
    940c:	20800736 	bltu	r4,r2,942c <__clzsi2+0x3c>
    9410:	2008d63a 	srli	r4,r4,24
    9414:	01400204 	movi	r5,8
    9418:	00c00074 	movhi	r3,1
    941c:	20c7883a 	add	r3,r4,r3
    9420:	18ad0403 	ldbu	r2,-19440(r3)
    9424:	2885c83a 	sub	r2,r5,r2
    9428:	f800283a 	ret
    942c:	2008d43a 	srli	r4,r4,16
    9430:	01400404 	movi	r5,16
    9434:	003ff806 	br	9418 <__clzsi2+0x28>
    9438:	2008d23a 	srli	r4,r4,8
    943c:	01400604 	movi	r5,24
    9440:	003ff506 	br	9418 <__clzsi2+0x28>

00009444 <__mulsi3>:
    9444:	0005883a 	mov	r2,zero
    9448:	20000726 	beq	r4,zero,9468 <__mulsi3+0x24>
    944c:	20c0004c 	andi	r3,r4,1
    9450:	2008d07a 	srli	r4,r4,1
    9454:	18000126 	beq	r3,zero,945c <__mulsi3+0x18>
    9458:	1145883a 	add	r2,r2,r5
    945c:	294b883a 	add	r5,r5,r5
    9460:	203ffa1e 	bne	r4,zero,944c <__mulsi3+0x8>
    9464:	f800283a 	ret
    9468:	f800283a 	ret

0000946c <_printf_r>:
    946c:	defffd04 	addi	sp,sp,-12
    9470:	dfc00015 	stw	ra,0(sp)
    9474:	d9800115 	stw	r6,4(sp)
    9478:	d9c00215 	stw	r7,8(sp)
    947c:	21800217 	ldw	r6,8(r4)
    9480:	00c00074 	movhi	r3,1
    9484:	18e6cb04 	addi	r3,r3,-25812
    9488:	30c00115 	stw	r3,4(r6)
    948c:	280d883a 	mov	r6,r5
    9490:	21400217 	ldw	r5,8(r4)
    9494:	d9c00104 	addi	r7,sp,4
    9498:	00096080 	call	9608 <___vfprintf_internal_r>
    949c:	dfc00017 	ldw	ra,0(sp)
    94a0:	dec00304 	addi	sp,sp,12
    94a4:	f800283a 	ret

000094a8 <printf>:
    94a8:	defffc04 	addi	sp,sp,-16
    94ac:	dfc00015 	stw	ra,0(sp)
    94b0:	d9400115 	stw	r5,4(sp)
    94b4:	d9800215 	stw	r6,8(sp)
    94b8:	d9c00315 	stw	r7,12(sp)
    94bc:	00800074 	movhi	r2,1
    94c0:	10edff17 	ldw	r3,-18436(r2)
    94c4:	00800074 	movhi	r2,1
    94c8:	10a6cb04 	addi	r2,r2,-25812
    94cc:	19400217 	ldw	r5,8(r3)
    94d0:	d9800104 	addi	r6,sp,4
    94d4:	28800115 	stw	r2,4(r5)
    94d8:	200b883a 	mov	r5,r4
    94dc:	19000217 	ldw	r4,8(r3)
    94e0:	0009b140 	call	9b14 <__vfprintf_internal>
    94e4:	dfc00017 	ldw	ra,0(sp)
    94e8:	dec00404 	addi	sp,sp,16
    94ec:	f800283a 	ret

000094f0 <_puts_r>:
    94f0:	defffd04 	addi	sp,sp,-12
    94f4:	dc000015 	stw	r16,0(sp)
    94f8:	2021883a 	mov	r16,r4
    94fc:	2809883a 	mov	r4,r5
    9500:	dfc00215 	stw	ra,8(sp)
    9504:	dc400115 	stw	r17,4(sp)
    9508:	2823883a 	mov	r17,r5
    950c:	00095800 	call	9580 <strlen>
    9510:	81400217 	ldw	r5,8(r16)
    9514:	00c00074 	movhi	r3,1
    9518:	18e6cb04 	addi	r3,r3,-25812
    951c:	28c00115 	stw	r3,4(r5)
    9520:	100f883a 	mov	r7,r2
    9524:	880d883a 	mov	r6,r17
    9528:	8009883a 	mov	r4,r16
    952c:	0009b2c0 	call	9b2c <__sfvwrite_small_dev>
    9530:	10ffffe0 	cmpeqi	r3,r2,-1
    9534:	1800091e 	bne	r3,zero,955c <_puts_r+0x6c>
    9538:	81400217 	ldw	r5,8(r16)
    953c:	01800074 	movhi	r6,1
    9540:	01c00044 	movi	r7,1
    9544:	28800117 	ldw	r2,4(r5)
    9548:	31ad4404 	addi	r6,r6,-19184
    954c:	8009883a 	mov	r4,r16
    9550:	103ee83a 	callr	r2
    9554:	10bfffe0 	cmpeqi	r2,r2,-1
    9558:	0085c83a 	sub	r2,zero,r2
    955c:	dfc00217 	ldw	ra,8(sp)
    9560:	dc400117 	ldw	r17,4(sp)
    9564:	dc000017 	ldw	r16,0(sp)
    9568:	dec00304 	addi	sp,sp,12
    956c:	f800283a 	ret

00009570 <puts>:
    9570:	00800074 	movhi	r2,1
    9574:	200b883a 	mov	r5,r4
    9578:	112dff17 	ldw	r4,-18436(r2)
    957c:	00094f01 	jmpi	94f0 <_puts_r>

00009580 <strlen>:
    9580:	2005883a 	mov	r2,r4
    9584:	10c00007 	ldb	r3,0(r2)
    9588:	1800021e 	bne	r3,zero,9594 <strlen+0x14>
    958c:	1105c83a 	sub	r2,r2,r4
    9590:	f800283a 	ret
    9594:	10800044 	addi	r2,r2,1
    9598:	003ffa06 	br	9584 <strlen+0x4>

0000959c <print_repeat>:
    959c:	defffb04 	addi	sp,sp,-20
    95a0:	dc800315 	stw	r18,12(sp)
    95a4:	dc400215 	stw	r17,8(sp)
    95a8:	dc000115 	stw	r16,4(sp)
    95ac:	dfc00415 	stw	ra,16(sp)
    95b0:	2025883a 	mov	r18,r4
    95b4:	2823883a 	mov	r17,r5
    95b8:	d9800005 	stb	r6,0(sp)
    95bc:	3821883a 	mov	r16,r7
    95c0:	04000716 	blt	zero,r16,95e0 <print_repeat+0x44>
    95c4:	0005883a 	mov	r2,zero
    95c8:	dfc00417 	ldw	ra,16(sp)
    95cc:	dc800317 	ldw	r18,12(sp)
    95d0:	dc400217 	ldw	r17,8(sp)
    95d4:	dc000117 	ldw	r16,4(sp)
    95d8:	dec00504 	addi	sp,sp,20
    95dc:	f800283a 	ret
    95e0:	88800117 	ldw	r2,4(r17)
    95e4:	01c00044 	movi	r7,1
    95e8:	d80d883a 	mov	r6,sp
    95ec:	880b883a 	mov	r5,r17
    95f0:	9009883a 	mov	r4,r18
    95f4:	103ee83a 	callr	r2
    95f8:	843fffc4 	addi	r16,r16,-1
    95fc:	103ff026 	beq	r2,zero,95c0 <print_repeat+0x24>
    9600:	00bfffc4 	movi	r2,-1
    9604:	003ff006 	br	95c8 <print_repeat+0x2c>

00009608 <___vfprintf_internal_r>:
    9608:	deffe604 	addi	sp,sp,-104
    960c:	df001815 	stw	fp,96(sp)
    9610:	ddc01715 	stw	r23,92(sp)
    9614:	dd801615 	stw	r22,88(sp)
    9618:	dd001415 	stw	r20,80(sp)
    961c:	dcc01315 	stw	r19,76(sp)
    9620:	dc801215 	stw	r18,72(sp)
    9624:	dc401115 	stw	r17,68(sp)
    9628:	dc001015 	stw	r16,64(sp)
    962c:	dfc01915 	stw	ra,100(sp)
    9630:	dd401515 	stw	r21,84(sp)
    9634:	2021883a 	mov	r16,r4
    9638:	282f883a 	mov	r23,r5
    963c:	d9800515 	stw	r6,20(sp)
    9640:	3839883a 	mov	fp,r7
    9644:	002d883a 	mov	r22,zero
    9648:	d8000215 	stw	zero,8(sp)
    964c:	0027883a 	mov	r19,zero
    9650:	0029883a 	mov	r20,zero
    9654:	0025883a 	mov	r18,zero
    9658:	0023883a 	mov	r17,zero
    965c:	d8000115 	stw	zero,4(sp)
    9660:	d8000015 	stw	zero,0(sp)
    9664:	0005883a 	mov	r2,zero
    9668:	00000206 	br	9674 <___vfprintf_internal_r+0x6c>
    966c:	114000e0 	cmpeqi	r5,r2,3
    9670:	28003f1e 	bne	r5,zero,9770 <___vfprintf_internal_r+0x168>
    9674:	d8c00517 	ldw	r3,20(sp)
    9678:	19000003 	ldbu	r4,0(r3)
    967c:	18c00044 	addi	r3,r3,1
    9680:	d8c00515 	stw	r3,20(sp)
    9684:	21803fcc 	andi	r6,r4,255
    9688:	3180201c 	xori	r6,r6,128
    968c:	31bfe004 	addi	r6,r6,-128
    9690:	30001426 	beq	r6,zero,96e4 <___vfprintf_internal_r+0xdc>
    9694:	114000a0 	cmpeqi	r5,r2,2
    9698:	2800231e 	bne	r5,zero,9728 <___vfprintf_internal_r+0x120>
    969c:	114000c8 	cmpgei	r5,r2,3
    96a0:	283ff21e 	bne	r5,zero,966c <___vfprintf_internal_r+0x64>
    96a4:	10000426 	beq	r2,zero,96b8 <___vfprintf_internal_r+0xb0>
    96a8:	10800060 	cmpeqi	r2,r2,1
    96ac:	10001a1e 	bne	r2,zero,9718 <___vfprintf_internal_r+0x110>
    96b0:	00800084 	movi	r2,2
    96b4:	003fef06 	br	9674 <___vfprintf_internal_r+0x6c>
    96b8:	31800960 	cmpeqi	r6,r6,37
    96bc:	3000fe1e 	bne	r6,zero,9ab8 <___vfprintf_internal_r+0x4b0>
    96c0:	b8800117 	ldw	r2,4(r23)
    96c4:	d9000805 	stb	r4,32(sp)
    96c8:	01c00044 	movi	r7,1
    96cc:	d9800804 	addi	r6,sp,32
    96d0:	b80b883a 	mov	r5,r23
    96d4:	8009883a 	mov	r4,r16
    96d8:	103ee83a 	callr	r2
    96dc:	10001d26 	beq	r2,zero,9754 <___vfprintf_internal_r+0x14c>
    96e0:	05bfffc4 	movi	r22,-1
    96e4:	b005883a 	mov	r2,r22
    96e8:	dfc01917 	ldw	ra,100(sp)
    96ec:	df001817 	ldw	fp,96(sp)
    96f0:	ddc01717 	ldw	r23,92(sp)
    96f4:	dd801617 	ldw	r22,88(sp)
    96f8:	dd401517 	ldw	r21,84(sp)
    96fc:	dd001417 	ldw	r20,80(sp)
    9700:	dcc01317 	ldw	r19,76(sp)
    9704:	dc801217 	ldw	r18,72(sp)
    9708:	dc401117 	ldw	r17,68(sp)
    970c:	dc001017 	ldw	r16,64(sp)
    9710:	dec01a04 	addi	sp,sp,104
    9714:	f800283a 	ret
    9718:	30800c20 	cmpeqi	r2,r6,48
    971c:	1000ef1e 	bne	r2,zero,9adc <___vfprintf_internal_r+0x4d4>
    9720:	30800958 	cmpnei	r2,r6,37
    9724:	103fe626 	beq	r2,zero,96c0 <___vfprintf_internal_r+0xb8>
    9728:	217ff404 	addi	r5,r4,-48
    972c:	29403fcc 	andi	r5,r5,255
    9730:	288002a8 	cmpgeui	r2,r5,10
    9734:	10000b1e 	bne	r2,zero,9764 <___vfprintf_internal_r+0x15c>
    9738:	88bfffe0 	cmpeqi	r2,r17,-1
    973c:	1000071e 	bne	r2,zero,975c <___vfprintf_internal_r+0x154>
    9740:	880490ba 	slli	r2,r17,2
    9744:	1463883a 	add	r17,r2,r17
    9748:	8822907a 	slli	r17,r17,1
    974c:	2c63883a 	add	r17,r5,r17
    9750:	003fd706 	br	96b0 <___vfprintf_internal_r+0xa8>
    9754:	b5800044 	addi	r22,r22,1
    9758:	003fc606 	br	9674 <___vfprintf_internal_r+0x6c>
    975c:	0023883a 	mov	r17,zero
    9760:	003ffa06 	br	974c <___vfprintf_internal_r+0x144>
    9764:	30800ba0 	cmpeqi	r2,r6,46
    9768:	1000e11e 	bne	r2,zero,9af0 <___vfprintf_internal_r+0x4e8>
    976c:	00800084 	movi	r2,2
    9770:	213ff404 	addi	r4,r4,-48
    9774:	21003fcc 	andi	r4,r4,255
    9778:	214002a8 	cmpgeui	r5,r4,10
    977c:	2800091e 	bne	r5,zero,97a4 <___vfprintf_internal_r+0x19c>
    9780:	917fffe0 	cmpeqi	r5,r18,-1
    9784:	2800051e 	bne	r5,zero,979c <___vfprintf_internal_r+0x194>
    9788:	900a90ba 	slli	r5,r18,2
    978c:	2ca5883a 	add	r18,r5,r18
    9790:	9024907a 	slli	r18,r18,1
    9794:	24a5883a 	add	r18,r4,r18
    9798:	003fb606 	br	9674 <___vfprintf_internal_r+0x6c>
    979c:	0025883a 	mov	r18,zero
    97a0:	003ffc06 	br	9794 <___vfprintf_internal_r+0x18c>
    97a4:	30801b20 	cmpeqi	r2,r6,108
    97a8:	1000cf1e 	bne	r2,zero,9ae8 <___vfprintf_internal_r+0x4e0>
    97ac:	90bfffe0 	cmpeqi	r2,r18,-1
    97b0:	10000f1e 	bne	r2,zero,97f0 <___vfprintf_internal_r+0x1e8>
    97b4:	d8000015 	stw	zero,0(sp)
    97b8:	30801be0 	cmpeqi	r2,r6,111
    97bc:	1000ce1e 	bne	r2,zero,9af8 <___vfprintf_internal_r+0x4f0>
    97c0:	30801c08 	cmpgei	r2,r6,112
    97c4:	1000171e 	bne	r2,zero,9824 <___vfprintf_internal_r+0x21c>
    97c8:	308018e0 	cmpeqi	r2,r6,99
    97cc:	1000a31e 	bne	r2,zero,9a5c <___vfprintf_internal_r+0x454>
    97d0:	30801908 	cmpgei	r2,r6,100
    97d4:	1000081e 	bne	r2,zero,97f8 <___vfprintf_internal_r+0x1f0>
    97d8:	31801620 	cmpeqi	r6,r6,88
    97dc:	303fa126 	beq	r6,zero,9664 <___vfprintf_internal_r+0x5c>
    97e0:	00800044 	movi	r2,1
    97e4:	d8800215 	stw	r2,8(sp)
    97e8:	05000404 	movi	r20,16
    97ec:	0000c306 	br	9afc <___vfprintf_internal_r+0x4f4>
    97f0:	04800044 	movi	r18,1
    97f4:	003ff006 	br	97b8 <___vfprintf_internal_r+0x1b0>
    97f8:	30801920 	cmpeqi	r2,r6,100
    97fc:	1000021e 	bne	r2,zero,9808 <___vfprintf_internal_r+0x200>
    9800:	31801a60 	cmpeqi	r6,r6,105
    9804:	303f9726 	beq	r6,zero,9664 <___vfprintf_internal_r+0x5c>
    9808:	e0800104 	addi	r2,fp,4
    980c:	d8800415 	stw	r2,16(sp)
    9810:	9800ba26 	beq	r19,zero,9afc <___vfprintf_internal_r+0x4f4>
    9814:	e5400017 	ldw	r21,0(fp)
    9818:	a8002216 	blt	r21,zero,98a4 <___vfprintf_internal_r+0x29c>
    981c:	04c00044 	movi	r19,1
    9820:	0000ba06 	br	9b0c <___vfprintf_internal_r+0x504>
    9824:	30801d60 	cmpeqi	r2,r6,117
    9828:	1000b41e 	bne	r2,zero,9afc <___vfprintf_internal_r+0x4f4>
    982c:	30801e20 	cmpeqi	r2,r6,120
    9830:	103fed1e 	bne	r2,zero,97e8 <___vfprintf_internal_r+0x1e0>
    9834:	31801ce0 	cmpeqi	r6,r6,115
    9838:	303f8a26 	beq	r6,zero,9664 <___vfprintf_internal_r+0x5c>
    983c:	e5400017 	ldw	r21,0(fp)
    9840:	e0800104 	addi	r2,fp,4
    9844:	d8800315 	stw	r2,12(sp)
    9848:	a809883a 	mov	r4,r21
    984c:	00095800 	call	9580 <strlen>
    9850:	888fc83a 	sub	r7,r17,r2
    9854:	1039883a 	mov	fp,r2
    9858:	01c0080e 	bge	zero,r7,987c <___vfprintf_internal_r+0x274>
    985c:	01800804 	movi	r6,32
    9860:	b80b883a 	mov	r5,r23
    9864:	8009883a 	mov	r4,r16
    9868:	d9c00415 	stw	r7,16(sp)
    986c:	000959c0 	call	959c <print_repeat>
    9870:	103f9b1e 	bne	r2,zero,96e0 <___vfprintf_internal_r+0xd8>
    9874:	d9c00417 	ldw	r7,16(sp)
    9878:	b1ed883a 	add	r22,r22,r7
    987c:	b8800117 	ldw	r2,4(r23)
    9880:	e00f883a 	mov	r7,fp
    9884:	a80d883a 	mov	r6,r21
    9888:	b80b883a 	mov	r5,r23
    988c:	8009883a 	mov	r4,r16
    9890:	103ee83a 	callr	r2
    9894:	103f921e 	bne	r2,zero,96e0 <___vfprintf_internal_r+0xd8>
    9898:	b72d883a 	add	r22,r22,fp
    989c:	df000317 	ldw	fp,12(sp)
    98a0:	003f7406 	br	9674 <___vfprintf_internal_r+0x6c>
    98a4:	056bc83a 	sub	r21,zero,r21
    98a8:	04c00044 	movi	r19,1
    98ac:	00c00044 	movi	r3,1
    98b0:	df000804 	addi	fp,sp,32
    98b4:	e00d883a 	mov	r6,fp
    98b8:	a8002e1e 	bne	r21,zero,9974 <___vfprintf_internal_r+0x36c>
    98bc:	e185c83a 	sub	r2,fp,r6
    98c0:	d8800315 	stw	r2,12(sp)
    98c4:	9085c83a 	sub	r2,r18,r2
    98c8:	0080090e 	bge	zero,r2,98f0 <___vfprintf_internal_r+0x2e8>
    98cc:	e085883a 	add	r2,fp,r2
    98d0:	d9001004 	addi	r4,sp,64
    98d4:	e100042e 	bgeu	fp,r4,98e8 <___vfprintf_internal_r+0x2e0>
    98d8:	e7000044 	addi	fp,fp,1
    98dc:	01000c04 	movi	r4,48
    98e0:	e13fffc5 	stb	r4,-1(fp)
    98e4:	e0bffa1e 	bne	fp,r2,98d0 <___vfprintf_internal_r+0x2c8>
    98e8:	e185c83a 	sub	r2,fp,r6
    98ec:	d8800315 	stw	r2,12(sp)
    98f0:	d8800317 	ldw	r2,12(sp)
    98f4:	1897883a 	add	r11,r3,r2
    98f8:	d8800017 	ldw	r2,0(sp)
    98fc:	8aebc83a 	sub	r21,r17,r11
    9900:	10003526 	beq	r2,zero,99d8 <___vfprintf_internal_r+0x3d0>
    9904:	18000a26 	beq	r3,zero,9930 <___vfprintf_internal_r+0x328>
    9908:	00800b44 	movi	r2,45
    990c:	d88007c5 	stb	r2,31(sp)
    9910:	b8800117 	ldw	r2,4(r23)
    9914:	01c00044 	movi	r7,1
    9918:	d98007c4 	addi	r6,sp,31
    991c:	b80b883a 	mov	r5,r23
    9920:	8009883a 	mov	r4,r16
    9924:	103ee83a 	callr	r2
    9928:	103f6d1e 	bne	r2,zero,96e0 <___vfprintf_internal_r+0xd8>
    992c:	b5800044 	addi	r22,r22,1
    9930:	0540070e 	bge	zero,r21,9950 <___vfprintf_internal_r+0x348>
    9934:	a80f883a 	mov	r7,r21
    9938:	01800c04 	movi	r6,48
    993c:	b80b883a 	mov	r5,r23
    9940:	8009883a 	mov	r4,r16
    9944:	000959c0 	call	959c <print_repeat>
    9948:	103f651e 	bne	r2,zero,96e0 <___vfprintf_internal_r+0xd8>
    994c:	b56d883a 	add	r22,r22,r21
    9950:	d8800317 	ldw	r2,12(sp)
    9954:	b72d883a 	add	r22,r22,fp
    9958:	172bc83a 	sub	r21,r2,fp
    995c:	af05883a 	add	r2,r21,fp
    9960:	b707c83a 	sub	r3,r22,fp
    9964:	00803216 	blt	zero,r2,9a30 <___vfprintf_internal_r+0x428>
    9968:	df000417 	ldw	fp,16(sp)
    996c:	182d883a 	mov	r22,r3
    9970:	003f3c06 	br	9664 <___vfprintf_internal_r+0x5c>
    9974:	a809883a 	mov	r4,r21
    9978:	a00b883a 	mov	r5,r20
    997c:	d8c00615 	stw	r3,24(sp)
    9980:	00086600 	call	8660 <__udivsi3>
    9984:	1009883a 	mov	r4,r2
    9988:	a00b883a 	mov	r5,r20
    998c:	d8800315 	stw	r2,12(sp)
    9990:	00094440 	call	9444 <__mulsi3>
    9994:	a8abc83a 	sub	r21,r21,r2
    9998:	a8800288 	cmpgei	r2,r21,10
    999c:	d9000317 	ldw	r4,12(sp)
    99a0:	d8c00617 	ldw	r3,24(sp)
    99a4:	d9800804 	addi	r6,sp,32
    99a8:	1000051e 	bne	r2,zero,99c0 <___vfprintf_internal_r+0x3b8>
    99ac:	ad400c04 	addi	r21,r21,48
    99b0:	e7000044 	addi	fp,fp,1
    99b4:	e57fffc5 	stb	r21,-1(fp)
    99b8:	202b883a 	mov	r21,r4
    99bc:	003fbe06 	br	98b8 <___vfprintf_internal_r+0x2b0>
    99c0:	d8800217 	ldw	r2,8(sp)
    99c4:	10000226 	beq	r2,zero,99d0 <___vfprintf_internal_r+0x3c8>
    99c8:	ad400dc4 	addi	r21,r21,55
    99cc:	003ff806 	br	99b0 <___vfprintf_internal_r+0x3a8>
    99d0:	ad4015c4 	addi	r21,r21,87
    99d4:	003ff606 	br	99b0 <___vfprintf_internal_r+0x3a8>
    99d8:	0540090e 	bge	zero,r21,9a00 <___vfprintf_internal_r+0x3f8>
    99dc:	a80f883a 	mov	r7,r21
    99e0:	01800804 	movi	r6,32
    99e4:	b80b883a 	mov	r5,r23
    99e8:	8009883a 	mov	r4,r16
    99ec:	d8c00615 	stw	r3,24(sp)
    99f0:	000959c0 	call	959c <print_repeat>
    99f4:	103f3a1e 	bne	r2,zero,96e0 <___vfprintf_internal_r+0xd8>
    99f8:	d8c00617 	ldw	r3,24(sp)
    99fc:	b56d883a 	add	r22,r22,r21
    9a00:	183fd326 	beq	r3,zero,9950 <___vfprintf_internal_r+0x348>
    9a04:	00800b44 	movi	r2,45
    9a08:	d88007c5 	stb	r2,31(sp)
    9a0c:	b8800117 	ldw	r2,4(r23)
    9a10:	01c00044 	movi	r7,1
    9a14:	d98007c4 	addi	r6,sp,31
    9a18:	b80b883a 	mov	r5,r23
    9a1c:	8009883a 	mov	r4,r16
    9a20:	103ee83a 	callr	r2
    9a24:	103f2e1e 	bne	r2,zero,96e0 <___vfprintf_internal_r+0xd8>
    9a28:	b5800044 	addi	r22,r22,1
    9a2c:	003fc806 	br	9950 <___vfprintf_internal_r+0x348>
    9a30:	e0bfffc3 	ldbu	r2,-1(fp)
    9a34:	01c00044 	movi	r7,1
    9a38:	d98007c4 	addi	r6,sp,31
    9a3c:	d88007c5 	stb	r2,31(sp)
    9a40:	b8800117 	ldw	r2,4(r23)
    9a44:	b80b883a 	mov	r5,r23
    9a48:	8009883a 	mov	r4,r16
    9a4c:	e73fffc4 	addi	fp,fp,-1
    9a50:	103ee83a 	callr	r2
    9a54:	103fc126 	beq	r2,zero,995c <___vfprintf_internal_r+0x354>
    9a58:	003f2106 	br	96e0 <___vfprintf_internal_r+0xd8>
    9a5c:	88800090 	cmplti	r2,r17,2
    9a60:	1000081e 	bne	r2,zero,9a84 <___vfprintf_internal_r+0x47c>
    9a64:	8d7fffc4 	addi	r21,r17,-1
    9a68:	a80f883a 	mov	r7,r21
    9a6c:	01800804 	movi	r6,32
    9a70:	b80b883a 	mov	r5,r23
    9a74:	8009883a 	mov	r4,r16
    9a78:	000959c0 	call	959c <print_repeat>
    9a7c:	103f181e 	bne	r2,zero,96e0 <___vfprintf_internal_r+0xd8>
    9a80:	b56d883a 	add	r22,r22,r21
    9a84:	e0800017 	ldw	r2,0(fp)
    9a88:	01c00044 	movi	r7,1
    9a8c:	d9800804 	addi	r6,sp,32
    9a90:	d8800805 	stb	r2,32(sp)
    9a94:	b8800117 	ldw	r2,4(r23)
    9a98:	b80b883a 	mov	r5,r23
    9a9c:	8009883a 	mov	r4,r16
    9aa0:	e5400104 	addi	r21,fp,4
    9aa4:	103ee83a 	callr	r2
    9aa8:	103f0d1e 	bne	r2,zero,96e0 <___vfprintf_internal_r+0xd8>
    9aac:	b5800044 	addi	r22,r22,1
    9ab0:	a839883a 	mov	fp,r21
    9ab4:	003eef06 	br	9674 <___vfprintf_internal_r+0x6c>
    9ab8:	d8000215 	stw	zero,8(sp)
    9abc:	d8000115 	stw	zero,4(sp)
    9ac0:	d8000015 	stw	zero,0(sp)
    9ac4:	04c00044 	movi	r19,1
    9ac8:	05000284 	movi	r20,10
    9acc:	04bfffc4 	movi	r18,-1
    9ad0:	047fffc4 	movi	r17,-1
    9ad4:	00800044 	movi	r2,1
    9ad8:	003ee606 	br	9674 <___vfprintf_internal_r+0x6c>
    9adc:	00800044 	movi	r2,1
    9ae0:	d8800015 	stw	r2,0(sp)
    9ae4:	003ef206 	br	96b0 <___vfprintf_internal_r+0xa8>
    9ae8:	00800044 	movi	r2,1
    9aec:	d8800115 	stw	r2,4(sp)
    9af0:	008000c4 	movi	r2,3
    9af4:	003edf06 	br	9674 <___vfprintf_internal_r+0x6c>
    9af8:	05000204 	movi	r20,8
    9afc:	e0800104 	addi	r2,fp,4
    9b00:	d8800415 	stw	r2,16(sp)
    9b04:	e5400017 	ldw	r21,0(fp)
    9b08:	0027883a 	mov	r19,zero
    9b0c:	0007883a 	mov	r3,zero
    9b10:	003f6706 	br	98b0 <___vfprintf_internal_r+0x2a8>

00009b14 <__vfprintf_internal>:
    9b14:	00800074 	movhi	r2,1
    9b18:	300f883a 	mov	r7,r6
    9b1c:	280d883a 	mov	r6,r5
    9b20:	200b883a 	mov	r5,r4
    9b24:	112dff17 	ldw	r4,-18436(r2)
    9b28:	00096081 	jmpi	9608 <___vfprintf_internal_r>

00009b2c <__sfvwrite_small_dev>:
    9b2c:	2880000b 	ldhu	r2,0(r5)
    9b30:	1080020c 	andi	r2,r2,8
    9b34:	10002526 	beq	r2,zero,9bcc <__sfvwrite_small_dev+0xa0>
    9b38:	2880008f 	ldh	r2,2(r5)
    9b3c:	defffb04 	addi	sp,sp,-20
    9b40:	dcc00315 	stw	r19,12(sp)
    9b44:	dc800215 	stw	r18,8(sp)
    9b48:	dc400115 	stw	r17,4(sp)
    9b4c:	dc000015 	stw	r16,0(sp)
    9b50:	dfc00415 	stw	ra,16(sp)
    9b54:	2027883a 	mov	r19,r4
    9b58:	2821883a 	mov	r16,r5
    9b5c:	3025883a 	mov	r18,r6
    9b60:	3823883a 	mov	r17,r7
    9b64:	1000100e 	bge	r2,zero,9ba8 <__sfvwrite_small_dev+0x7c>
    9b68:	8080000b 	ldhu	r2,0(r16)
    9b6c:	10801014 	ori	r2,r2,64
    9b70:	8080000d 	sth	r2,0(r16)
    9b74:	00bfffc4 	movi	r2,-1
    9b78:	00000d06 	br	9bb0 <__sfvwrite_small_dev+0x84>
    9b7c:	88810050 	cmplti	r2,r17,1025
    9b80:	880f883a 	mov	r7,r17
    9b84:	1000011e 	bne	r2,zero,9b8c <__sfvwrite_small_dev+0x60>
    9b88:	01c10004 	movi	r7,1024
    9b8c:	8140008f 	ldh	r5,2(r16)
    9b90:	900d883a 	mov	r6,r18
    9b94:	9809883a 	mov	r4,r19
    9b98:	0009bd40 	call	9bd4 <_write_r>
    9b9c:	00bff20e 	bge	zero,r2,9b68 <__sfvwrite_small_dev+0x3c>
    9ba0:	88a3c83a 	sub	r17,r17,r2
    9ba4:	90a5883a 	add	r18,r18,r2
    9ba8:	047ff416 	blt	zero,r17,9b7c <__sfvwrite_small_dev+0x50>
    9bac:	0005883a 	mov	r2,zero
    9bb0:	dfc00417 	ldw	ra,16(sp)
    9bb4:	dcc00317 	ldw	r19,12(sp)
    9bb8:	dc800217 	ldw	r18,8(sp)
    9bbc:	dc400117 	ldw	r17,4(sp)
    9bc0:	dc000017 	ldw	r16,0(sp)
    9bc4:	dec00504 	addi	sp,sp,20
    9bc8:	f800283a 	ret
    9bcc:	00bfffc4 	movi	r2,-1
    9bd0:	f800283a 	ret

00009bd4 <_write_r>:
    9bd4:	defffe04 	addi	sp,sp,-8
    9bd8:	dc000015 	stw	r16,0(sp)
    9bdc:	00800074 	movhi	r2,1
    9be0:	2021883a 	mov	r16,r4
    9be4:	2809883a 	mov	r4,r5
    9be8:	300b883a 	mov	r5,r6
    9bec:	380d883a 	mov	r6,r7
    9bf0:	dfc00115 	stw	ra,4(sp)
    9bf4:	102ec215 	stw	zero,-17656(r2)
    9bf8:	0009e6c0 	call	9e6c <write>
    9bfc:	10ffffd8 	cmpnei	r3,r2,-1
    9c00:	1800041e 	bne	r3,zero,9c14 <_write_r+0x40>
    9c04:	00c00074 	movhi	r3,1
    9c08:	18eec217 	ldw	r3,-17656(r3)
    9c0c:	18000126 	beq	r3,zero,9c14 <_write_r+0x40>
    9c10:	80c00015 	stw	r3,0(r16)
    9c14:	dfc00117 	ldw	ra,4(sp)
    9c18:	dc000017 	ldw	r16,0(sp)
    9c1c:	dec00204 	addi	sp,sp,8
    9c20:	f800283a 	ret

00009c24 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    9c24:	defffc04 	addi	sp,sp,-16
    9c28:	df000315 	stw	fp,12(sp)
    9c2c:	df000304 	addi	fp,sp,12
    9c30:	e13fff15 	stw	r4,-4(fp)
    9c34:	e17ffe15 	stw	r5,-8(fp)
    9c38:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
    9c3c:	e0fffe17 	ldw	r3,-8(fp)
    9c40:	e0bfff17 	ldw	r2,-4(fp)
    9c44:	18800c26 	beq	r3,r2,9c78 <alt_load_section+0x54>
  {
    while( to != end )
    9c48:	00000806 	br	9c6c <alt_load_section+0x48>
    {
      *to++ = *from++;
    9c4c:	e0ffff17 	ldw	r3,-4(fp)
    9c50:	18800104 	addi	r2,r3,4
    9c54:	e0bfff15 	stw	r2,-4(fp)
    9c58:	e0bffe17 	ldw	r2,-8(fp)
    9c5c:	11000104 	addi	r4,r2,4
    9c60:	e13ffe15 	stw	r4,-8(fp)
    9c64:	18c00017 	ldw	r3,0(r3)
    9c68:	10c00015 	stw	r3,0(r2)
    while( to != end )
    9c6c:	e0fffe17 	ldw	r3,-8(fp)
    9c70:	e0bffd17 	ldw	r2,-12(fp)
    9c74:	18bff51e 	bne	r3,r2,9c4c <alt_load_section+0x28>
    }
  }
}
    9c78:	0001883a 	nop
    9c7c:	e037883a 	mov	sp,fp
    9c80:	df000017 	ldw	fp,0(sp)
    9c84:	dec00104 	addi	sp,sp,4
    9c88:	f800283a 	ret

00009c8c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    9c8c:	defffe04 	addi	sp,sp,-8
    9c90:	dfc00115 	stw	ra,4(sp)
    9c94:	df000015 	stw	fp,0(sp)
    9c98:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    9c9c:	01800074 	movhi	r6,1
    9ca0:	31ae0904 	addi	r6,r6,-18396
    9ca4:	01400074 	movhi	r5,1
    9ca8:	296d5004 	addi	r5,r5,-19136
    9cac:	01000074 	movhi	r4,1
    9cb0:	212e0904 	addi	r4,r4,-18396
    9cb4:	0009c240 	call	9c24 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    9cb8:	01800074 	movhi	r6,1
    9cbc:	31a08e04 	addi	r6,r6,-32200
    9cc0:	01400074 	movhi	r5,1
    9cc4:	29600804 	addi	r5,r5,-32736
    9cc8:	01000074 	movhi	r4,1
    9ccc:	21200804 	addi	r4,r4,-32736
    9cd0:	0009c240 	call	9c24 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    9cd4:	01800074 	movhi	r6,1
    9cd8:	31ad5004 	addi	r6,r6,-19136
    9cdc:	01400074 	movhi	r5,1
    9ce0:	296cf904 	addi	r5,r5,-19484
    9ce4:	01000074 	movhi	r4,1
    9ce8:	212cf904 	addi	r4,r4,-19484
    9cec:	0009c240 	call	9c24 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    9cf0:	000a4880 	call	a488 <alt_dcache_flush_all>
  alt_icache_flush_all();
    9cf4:	000a5e40 	call	a5e4 <alt_icache_flush_all>
}
    9cf8:	0001883a 	nop
    9cfc:	e037883a 	mov	sp,fp
    9d00:	dfc00117 	ldw	ra,4(sp)
    9d04:	df000017 	ldw	fp,0(sp)
    9d08:	dec00204 	addi	sp,sp,8
    9d0c:	f800283a 	ret

00009d10 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    9d10:	defffd04 	addi	sp,sp,-12
    9d14:	dfc00215 	stw	ra,8(sp)
    9d18:	df000115 	stw	fp,4(sp)
    9d1c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    9d20:	0009883a 	mov	r4,zero
    9d24:	0009fa40 	call	9fa4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    9d28:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    9d2c:	0009fe00 	call	9fe0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    9d30:	01800074 	movhi	r6,1
    9d34:	31ad4504 	addi	r6,r6,-19180
    9d38:	01400074 	movhi	r5,1
    9d3c:	296d4504 	addi	r5,r5,-19180
    9d40:	01000074 	movhi	r4,1
    9d44:	212d4504 	addi	r4,r4,-19180
    9d48:	000a9840 	call	a984 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    9d4c:	d0a0c517 	ldw	r2,-31980(gp)
    9d50:	d0e0c617 	ldw	r3,-31976(gp)
    9d54:	d120c717 	ldw	r4,-31972(gp)
    9d58:	200d883a 	mov	r6,r4
    9d5c:	180b883a 	mov	r5,r3
    9d60:	1009883a 	mov	r4,r2
    9d64:	00084040 	call	8404 <main>
    9d68:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    9d6c:	01000044 	movi	r4,1
    9d70:	000a3ac0 	call	a3ac <close>
  exit (result);
    9d74:	e13fff17 	ldw	r4,-4(fp)
    9d78:	000b2300 	call	b230 <exit>

00009d7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9d7c:	defffe04 	addi	sp,sp,-8
    9d80:	dfc00115 	stw	ra,4(sp)
    9d84:	df000015 	stw	fp,0(sp)
    9d88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9d8c:	d0a00717 	ldw	r2,-32740(gp)
    9d90:	10000326 	beq	r2,zero,9da0 <alt_get_errno+0x24>
    9d94:	d0a00717 	ldw	r2,-32740(gp)
    9d98:	103ee83a 	callr	r2
    9d9c:	00000106 	br	9da4 <alt_get_errno+0x28>
    9da0:	d0a0c404 	addi	r2,gp,-31984
}
    9da4:	e037883a 	mov	sp,fp
    9da8:	dfc00117 	ldw	ra,4(sp)
    9dac:	df000017 	ldw	fp,0(sp)
    9db0:	dec00204 	addi	sp,sp,8
    9db4:	f800283a 	ret

00009db8 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
    9db8:	defffc04 	addi	sp,sp,-16
    9dbc:	dfc00315 	stw	ra,12(sp)
    9dc0:	df000215 	stw	fp,8(sp)
    9dc4:	df000204 	addi	fp,sp,8
    9dc8:	e13ffe15 	stw	r4,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    9dcc:	d0a0ca17 	ldw	r2,-31960(gp)
  clock_t ticks = alt_nticks(); 
    9dd0:	e0bfff15 	stw	r2,-4(fp)
  return _alt_tick_rate;
    9dd4:	d0a0c917 	ldw	r2,-31964(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
    9dd8:	1000061e 	bne	r2,zero,9df4 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
    9ddc:	0009d7c0 	call	9d7c <alt_get_errno>
    9de0:	1007883a 	mov	r3,r2
    9de4:	00801604 	movi	r2,88
    9de8:	18800015 	stw	r2,0(r3)
    return 0;
    9dec:	0005883a 	mov	r2,zero
    9df0:	00000a06 	br	9e1c <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
    9df4:	e0bffe17 	ldw	r2,-8(fp)
    9df8:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
    9dfc:	e0bffe17 	ldw	r2,-8(fp)
    9e00:	e0ffff17 	ldw	r3,-4(fp)
    9e04:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
    9e08:	e0bffe17 	ldw	r2,-8(fp)
    9e0c:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
    9e10:	e0bffe17 	ldw	r2,-8(fp)
    9e14:	10000315 	stw	zero,12(r2)

  return ticks;
    9e18:	e0bfff17 	ldw	r2,-4(fp)
}
    9e1c:	e037883a 	mov	sp,fp
    9e20:	dfc00117 	ldw	ra,4(sp)
    9e24:	df000017 	ldw	fp,0(sp)
    9e28:	dec00204 	addi	sp,sp,8
    9e2c:	f800283a 	ret

00009e30 <alt_get_errno>:
{
    9e30:	defffe04 	addi	sp,sp,-8
    9e34:	dfc00115 	stw	ra,4(sp)
    9e38:	df000015 	stw	fp,0(sp)
    9e3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9e40:	d0a00717 	ldw	r2,-32740(gp)
    9e44:	10000326 	beq	r2,zero,9e54 <alt_get_errno+0x24>
    9e48:	d0a00717 	ldw	r2,-32740(gp)
    9e4c:	103ee83a 	callr	r2
    9e50:	00000106 	br	9e58 <alt_get_errno+0x28>
    9e54:	d0a0c404 	addi	r2,gp,-31984
}
    9e58:	e037883a 	mov	sp,fp
    9e5c:	dfc00117 	ldw	ra,4(sp)
    9e60:	df000017 	ldw	fp,0(sp)
    9e64:	dec00204 	addi	sp,sp,8
    9e68:	f800283a 	ret

00009e6c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    9e6c:	defff904 	addi	sp,sp,-28
    9e70:	dfc00615 	stw	ra,24(sp)
    9e74:	df000515 	stw	fp,20(sp)
    9e78:	df000504 	addi	fp,sp,20
    9e7c:	e13ffd15 	stw	r4,-12(fp)
    9e80:	e17ffc15 	stw	r5,-16(fp)
    9e84:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9e88:	e0bffd17 	ldw	r2,-12(fp)
    9e8c:	10000916 	blt	r2,zero,9eb4 <write+0x48>
    9e90:	e0fffd17 	ldw	r3,-12(fp)
    9e94:	1805883a 	mov	r2,r3
    9e98:	1085883a 	add	r2,r2,r2
    9e9c:	10c5883a 	add	r2,r2,r3
    9ea0:	100490ba 	slli	r2,r2,2
    9ea4:	00c00074 	movhi	r3,1
    9ea8:	18ed9e04 	addi	r3,r3,-18824
    9eac:	10c5883a 	add	r2,r2,r3
    9eb0:	00000106 	br	9eb8 <write+0x4c>
    9eb4:	0005883a 	mov	r2,zero
    9eb8:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    9ebc:	e0bfff17 	ldw	r2,-4(fp)
    9ec0:	10002126 	beq	r2,zero,9f48 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    9ec4:	e0bfff17 	ldw	r2,-4(fp)
    9ec8:	10800217 	ldw	r2,8(r2)
    9ecc:	108000cc 	andi	r2,r2,3
    9ed0:	10001826 	beq	r2,zero,9f34 <write+0xc8>
    9ed4:	e0bfff17 	ldw	r2,-4(fp)
    9ed8:	10800017 	ldw	r2,0(r2)
    9edc:	10800617 	ldw	r2,24(r2)
    9ee0:	10001426 	beq	r2,zero,9f34 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    9ee4:	e0bfff17 	ldw	r2,-4(fp)
    9ee8:	10800017 	ldw	r2,0(r2)
    9eec:	10800617 	ldw	r2,24(r2)
    9ef0:	e0fffb17 	ldw	r3,-20(fp)
    9ef4:	180d883a 	mov	r6,r3
    9ef8:	e17ffc17 	ldw	r5,-16(fp)
    9efc:	e13fff17 	ldw	r4,-4(fp)
    9f00:	103ee83a 	callr	r2
    9f04:	e0bffe15 	stw	r2,-8(fp)
    9f08:	e0bffe17 	ldw	r2,-8(fp)
    9f0c:	1000070e 	bge	r2,zero,9f2c <write+0xc0>
      {
        ALT_ERRNO = -rval;
    9f10:	0009e300 	call	9e30 <alt_get_errno>
    9f14:	1007883a 	mov	r3,r2
    9f18:	e0bffe17 	ldw	r2,-8(fp)
    9f1c:	0085c83a 	sub	r2,zero,r2
    9f20:	18800015 	stw	r2,0(r3)
        return -1;
    9f24:	00bfffc4 	movi	r2,-1
    9f28:	00000c06 	br	9f5c <write+0xf0>
      }
      return rval;
    9f2c:	e0bffe17 	ldw	r2,-8(fp)
    9f30:	00000a06 	br	9f5c <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
    9f34:	0009e300 	call	9e30 <alt_get_errno>
    9f38:	1007883a 	mov	r3,r2
    9f3c:	00800344 	movi	r2,13
    9f40:	18800015 	stw	r2,0(r3)
    9f44:	00000406 	br	9f58 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    9f48:	0009e300 	call	9e30 <alt_get_errno>
    9f4c:	1007883a 	mov	r3,r2
    9f50:	00801444 	movi	r2,81
    9f54:	18800015 	stw	r2,0(r3)
  }
  return -1;
    9f58:	00bfffc4 	movi	r2,-1
}
    9f5c:	e037883a 	mov	sp,fp
    9f60:	dfc00117 	ldw	ra,4(sp)
    9f64:	df000017 	ldw	fp,0(sp)
    9f68:	dec00204 	addi	sp,sp,8
    9f6c:	f800283a 	ret

00009f70 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    9f70:	defffd04 	addi	sp,sp,-12
    9f74:	dfc00215 	stw	ra,8(sp)
    9f78:	df000115 	stw	fp,4(sp)
    9f7c:	df000104 	addi	fp,sp,4
    9f80:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    9f84:	d1600404 	addi	r5,gp,-32752
    9f88:	e13fff17 	ldw	r4,-4(fp)
    9f8c:	000a53c0 	call	a53c <alt_dev_llist_insert>
}
    9f90:	e037883a 	mov	sp,fp
    9f94:	dfc00117 	ldw	ra,4(sp)
    9f98:	df000017 	ldw	fp,0(sp)
    9f9c:	dec00204 	addi	sp,sp,8
    9fa0:	f800283a 	ret

00009fa4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    9fa4:	defffd04 	addi	sp,sp,-12
    9fa8:	dfc00215 	stw	ra,8(sp)
    9fac:	df000115 	stw	fp,4(sp)
    9fb0:	df000104 	addi	fp,sp,4
    9fb4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    9fb8:	000ae940 	call	ae94 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    9fbc:	00800044 	movi	r2,1
    9fc0:	1001703a 	wrctl	status,r2
}
    9fc4:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
    9fc8:	0001883a 	nop
    9fcc:	e037883a 	mov	sp,fp
    9fd0:	dfc00117 	ldw	ra,4(sp)
    9fd4:	df000017 	ldw	fp,0(sp)
    9fd8:	dec00204 	addi	sp,sp,8
    9fdc:	f800283a 	ret

00009fe0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    9fe0:	defffe04 	addi	sp,sp,-8
    9fe4:	dfc00115 	stw	ra,4(sp)
    9fe8:	df000015 	stw	fp,0(sp)
    9fec:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
    9ff0:	01c0fa04 	movi	r7,1000
    9ff4:	01800044 	movi	r6,1
    9ff8:	000b883a 	mov	r5,zero
    9ffc:	01000074 	movhi	r4,1
    a000:	21040004 	addi	r4,r4,4096
    a004:	000a2ec0 	call	a2ec <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    a008:	01000074 	movhi	r4,1
    a00c:	212d8904 	addi	r4,r4,-18908
    a010:	0009f700 	call	9f70 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    a014:	0001883a 	nop
}
    a018:	0001883a 	nop
    a01c:	e037883a 	mov	sp,fp
    a020:	dfc00117 	ldw	ra,4(sp)
    a024:	df000017 	ldw	fp,0(sp)
    a028:	dec00204 	addi	sp,sp,8
    a02c:	f800283a 	ret

0000a030 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    a030:	defffa04 	addi	sp,sp,-24
    a034:	dfc00515 	stw	ra,20(sp)
    a038:	df000415 	stw	fp,16(sp)
    a03c:	df000404 	addi	fp,sp,16
    a040:	e13ffe15 	stw	r4,-8(fp)
    a044:	e17ffd15 	stw	r5,-12(fp)
    a048:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a04c:	e0bffe17 	ldw	r2,-8(fp)
    a050:	10800017 	ldw	r2,0(r2)
    a054:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    a058:	e0bfff17 	ldw	r2,-4(fp)
    a05c:	10c00a04 	addi	r3,r2,40
    a060:	e0bffe17 	ldw	r2,-8(fp)
    a064:	10800217 	ldw	r2,8(r2)
    a068:	100f883a 	mov	r7,r2
    a06c:	e1bffc17 	ldw	r6,-16(fp)
    a070:	e17ffd17 	ldw	r5,-12(fp)
    a074:	1809883a 	mov	r4,r3
    a078:	000a0f00 	call	a0f0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    a07c:	e037883a 	mov	sp,fp
    a080:	dfc00117 	ldw	ra,4(sp)
    a084:	df000017 	ldw	fp,0(sp)
    a088:	dec00204 	addi	sp,sp,8
    a08c:	f800283a 	ret

0000a090 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    a090:	defffa04 	addi	sp,sp,-24
    a094:	dfc00515 	stw	ra,20(sp)
    a098:	df000415 	stw	fp,16(sp)
    a09c:	df000404 	addi	fp,sp,16
    a0a0:	e13ffe15 	stw	r4,-8(fp)
    a0a4:	e17ffd15 	stw	r5,-12(fp)
    a0a8:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a0ac:	e0bffe17 	ldw	r2,-8(fp)
    a0b0:	10800017 	ldw	r2,0(r2)
    a0b4:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    a0b8:	e0bfff17 	ldw	r2,-4(fp)
    a0bc:	10c00a04 	addi	r3,r2,40
    a0c0:	e0bffe17 	ldw	r2,-8(fp)
    a0c4:	10800217 	ldw	r2,8(r2)
    a0c8:	100f883a 	mov	r7,r2
    a0cc:	e1bffc17 	ldw	r6,-16(fp)
    a0d0:	e17ffd17 	ldw	r5,-12(fp)
    a0d4:	1809883a 	mov	r4,r3
    a0d8:	000a1dc0 	call	a1dc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    a0dc:	e037883a 	mov	sp,fp
    a0e0:	dfc00117 	ldw	ra,4(sp)
    a0e4:	df000017 	ldw	fp,0(sp)
    a0e8:	dec00204 	addi	sp,sp,8
    a0ec:	f800283a 	ret

0000a0f0 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    a0f0:	defff704 	addi	sp,sp,-36
    a0f4:	df000815 	stw	fp,32(sp)
    a0f8:	df000804 	addi	fp,sp,32
    a0fc:	e13ffb15 	stw	r4,-20(fp)
    a100:	e17ffa15 	stw	r5,-24(fp)
    a104:	e1bff915 	stw	r6,-28(fp)
    a108:	e1fff815 	stw	r7,-32(fp)
  unsigned int base = sp->base;
    a10c:	e0bffb17 	ldw	r2,-20(fp)
    a110:	10800017 	ldw	r2,0(r2)
    a114:	e0bffe15 	stw	r2,-8(fp)

  char * ptr = buffer;
    a118:	e0bffa17 	ldw	r2,-24(fp)
    a11c:	e0bfff15 	stw	r2,-4(fp)
  char * end = buffer + space;
    a120:	e0bff917 	ldw	r2,-28(fp)
    a124:	e0fffa17 	ldw	r3,-24(fp)
    a128:	1885883a 	add	r2,r3,r2
    a12c:	e0bffd15 	stw	r2,-12(fp)

  while (ptr < end)
    a130:	00001206 	br	a17c <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    a134:	e0bffe17 	ldw	r2,-8(fp)
    a138:	10800037 	ldwio	r2,0(r2)
    a13c:	e0bffc15 	stw	r2,-16(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    a140:	e0bffc17 	ldw	r2,-16(fp)
    a144:	10a0000c 	andi	r2,r2,32768
    a148:	10000626 	beq	r2,zero,a164 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    a14c:	e0bfff17 	ldw	r2,-4(fp)
    a150:	10c00044 	addi	r3,r2,1
    a154:	e0ffff15 	stw	r3,-4(fp)
    a158:	e0fffc17 	ldw	r3,-16(fp)
    a15c:	10c00005 	stb	r3,0(r2)
    a160:	00000606 	br	a17c <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    a164:	e0ffff17 	ldw	r3,-4(fp)
    a168:	e0bffa17 	ldw	r2,-24(fp)
    a16c:	1880071e 	bne	r3,r2,a18c <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    a170:	e0bff817 	ldw	r2,-32(fp)
    a174:	1090000c 	andi	r2,r2,16384
    a178:	1000061e 	bne	r2,zero,a194 <altera_avalon_jtag_uart_read+0xa4>
  while (ptr < end)
    a17c:	e0ffff17 	ldw	r3,-4(fp)
    a180:	e0bffd17 	ldw	r2,-12(fp)
    a184:	18bfeb36 	bltu	r3,r2,a134 <altera_avalon_jtag_uart_read+0x44>
    a188:	00000306 	br	a198 <altera_avalon_jtag_uart_read+0xa8>
      break;
    a18c:	0001883a 	nop
    a190:	00000106 	br	a198 <altera_avalon_jtag_uart_read+0xa8>
      break;   
    a194:	0001883a 	nop
    
  }

  if (ptr != buffer)
    a198:	e0ffff17 	ldw	r3,-4(fp)
    a19c:	e0bffa17 	ldw	r2,-24(fp)
    a1a0:	18800426 	beq	r3,r2,a1b4 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    a1a4:	e0ffff17 	ldw	r3,-4(fp)
    a1a8:	e0bffa17 	ldw	r2,-24(fp)
    a1ac:	1885c83a 	sub	r2,r3,r2
    a1b0:	00000606 	br	a1cc <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    a1b4:	e0bff817 	ldw	r2,-32(fp)
    a1b8:	1090000c 	andi	r2,r2,16384
    a1bc:	10000226 	beq	r2,zero,a1c8 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    a1c0:	00bffd44 	movi	r2,-11
    a1c4:	00000106 	br	a1cc <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    a1c8:	00bffec4 	movi	r2,-5
}
    a1cc:	e037883a 	mov	sp,fp
    a1d0:	df000017 	ldw	fp,0(sp)
    a1d4:	dec00104 	addi	sp,sp,4
    a1d8:	f800283a 	ret

0000a1dc <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    a1dc:	defff904 	addi	sp,sp,-28
    a1e0:	df000615 	stw	fp,24(sp)
    a1e4:	df000604 	addi	fp,sp,24
    a1e8:	e13ffd15 	stw	r4,-12(fp)
    a1ec:	e17ffc15 	stw	r5,-16(fp)
    a1f0:	e1bffb15 	stw	r6,-20(fp)
    a1f4:	e1fffa15 	stw	r7,-24(fp)
  unsigned int base = sp->base;
    a1f8:	e0bffd17 	ldw	r2,-12(fp)
    a1fc:	10800017 	ldw	r2,0(r2)
    a200:	e0bfff15 	stw	r2,-4(fp)

  const char * end = ptr + count;
    a204:	e0bffb17 	ldw	r2,-20(fp)
    a208:	e0fffc17 	ldw	r3,-16(fp)
    a20c:	1885883a 	add	r2,r3,r2
    a210:	e0bffe15 	stw	r2,-8(fp)

  while (ptr < end)
    a214:	00000e06 	br	a250 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    a218:	e0bfff17 	ldw	r2,-4(fp)
    a21c:	10800104 	addi	r2,r2,4
    a220:	10800037 	ldwio	r2,0(r2)
    a224:	10bfffec 	andhi	r2,r2,65535
    a228:	10000926 	beq	r2,zero,a250 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    a22c:	e0ffff17 	ldw	r3,-4(fp)
    a230:	e0bffc17 	ldw	r2,-16(fp)
    a234:	11000044 	addi	r4,r2,1
    a238:	e13ffc15 	stw	r4,-16(fp)
    a23c:	10800003 	ldbu	r2,0(r2)
    a240:	10803fcc 	andi	r2,r2,255
    a244:	1080201c 	xori	r2,r2,128
    a248:	10bfe004 	addi	r2,r2,-128
    a24c:	18800035 	stwio	r2,0(r3)
  while (ptr < end)
    a250:	e0fffc17 	ldw	r3,-16(fp)
    a254:	e0bffe17 	ldw	r2,-8(fp)
    a258:	18bfef36 	bltu	r3,r2,a218 <altera_avalon_jtag_uart_write+0x3c>

  return count;
    a25c:	e0bffb17 	ldw	r2,-20(fp)
}
    a260:	e037883a 	mov	sp,fp
    a264:	df000017 	ldw	fp,0(sp)
    a268:	dec00104 	addi	sp,sp,4
    a26c:	f800283a 	ret

0000a270 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    a270:	defffa04 	addi	sp,sp,-24
    a274:	dfc00515 	stw	ra,20(sp)
    a278:	df000415 	stw	fp,16(sp)
    a27c:	df000404 	addi	fp,sp,16
    a280:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    a284:	0007883a 	mov	r3,zero
    a288:	e0bffc17 	ldw	r2,-16(fp)
    a28c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    a290:	e0bffc17 	ldw	r2,-16(fp)
    a294:	10800104 	addi	r2,r2,4
    a298:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
    a29c:	0005303a 	rdctl	r2,status
    a2a0:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a2a4:	e0fffd17 	ldw	r3,-12(fp)
    a2a8:	00bfff84 	movi	r2,-2
    a2ac:	1884703a 	and	r2,r3,r2
    a2b0:	1001703a 	wrctl	status,r2
  return context;
    a2b4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    a2b8:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
    a2bc:	000ad8c0 	call	ad8c <alt_tick>
    a2c0:	e0bfff17 	ldw	r2,-4(fp)
    a2c4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    a2c8:	e0bffe17 	ldw	r2,-8(fp)
    a2cc:	1001703a 	wrctl	status,r2
}
    a2d0:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
    a2d4:	0001883a 	nop
    a2d8:	e037883a 	mov	sp,fp
    a2dc:	dfc00117 	ldw	ra,4(sp)
    a2e0:	df000017 	ldw	fp,0(sp)
    a2e4:	dec00204 	addi	sp,sp,8
    a2e8:	f800283a 	ret

0000a2ec <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    a2ec:	defff804 	addi	sp,sp,-32
    a2f0:	dfc00715 	stw	ra,28(sp)
    a2f4:	df000615 	stw	fp,24(sp)
    a2f8:	df000604 	addi	fp,sp,24
    a2fc:	e13ffe15 	stw	r4,-8(fp)
    a300:	e17ffd15 	stw	r5,-12(fp)
    a304:	e1bffc15 	stw	r6,-16(fp)
    a308:	e1fffb15 	stw	r7,-20(fp)
    a30c:	e0bffb17 	ldw	r2,-20(fp)
    a310:	e0bfff15 	stw	r2,-4(fp)
  if (! _alt_tick_rate)
    a314:	d0a0c917 	ldw	r2,-31964(gp)
    a318:	1000031e 	bne	r2,zero,a328 <alt_avalon_timer_sc_init+0x3c>
    _alt_tick_rate = nticks;
    a31c:	e0bfff17 	ldw	r2,-4(fp)
    a320:	d0a0c915 	stw	r2,-31964(gp)
    return 0;
    a324:	00000106 	br	a32c <alt_avalon_timer_sc_init+0x40>
    return -1;
    a328:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    a32c:	e0bffe17 	ldw	r2,-8(fp)
    a330:	10800104 	addi	r2,r2,4
    a334:	00c001c4 	movi	r3,7
    a338:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    a33c:	d8000015 	stw	zero,0(sp)
    a340:	e1fffe17 	ldw	r7,-8(fp)
    a344:	01800074 	movhi	r6,1
    a348:	31a89c04 	addi	r6,r6,-23952
    a34c:	e17ffc17 	ldw	r5,-16(fp)
    a350:	e13ffd17 	ldw	r4,-12(fp)
    a354:	000a6180 	call	a618 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    a358:	0001883a 	nop
    a35c:	e037883a 	mov	sp,fp
    a360:	dfc00117 	ldw	ra,4(sp)
    a364:	df000017 	ldw	fp,0(sp)
    a368:	dec00204 	addi	sp,sp,8
    a36c:	f800283a 	ret

0000a370 <alt_get_errno>:
{
    a370:	defffe04 	addi	sp,sp,-8
    a374:	dfc00115 	stw	ra,4(sp)
    a378:	df000015 	stw	fp,0(sp)
    a37c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    a380:	d0a00717 	ldw	r2,-32740(gp)
    a384:	10000326 	beq	r2,zero,a394 <alt_get_errno+0x24>
    a388:	d0a00717 	ldw	r2,-32740(gp)
    a38c:	103ee83a 	callr	r2
    a390:	00000106 	br	a398 <alt_get_errno+0x28>
    a394:	d0a0c404 	addi	r2,gp,-31984
}
    a398:	e037883a 	mov	sp,fp
    a39c:	dfc00117 	ldw	ra,4(sp)
    a3a0:	df000017 	ldw	fp,0(sp)
    a3a4:	dec00204 	addi	sp,sp,8
    a3a8:	f800283a 	ret

0000a3ac <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    a3ac:	defffb04 	addi	sp,sp,-20
    a3b0:	dfc00415 	stw	ra,16(sp)
    a3b4:	df000315 	stw	fp,12(sp)
    a3b8:	df000304 	addi	fp,sp,12
    a3bc:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    a3c0:	e0bffd17 	ldw	r2,-12(fp)
    a3c4:	10000916 	blt	r2,zero,a3ec <close+0x40>
    a3c8:	e0fffd17 	ldw	r3,-12(fp)
    a3cc:	1805883a 	mov	r2,r3
    a3d0:	1085883a 	add	r2,r2,r2
    a3d4:	10c5883a 	add	r2,r2,r3
    a3d8:	100490ba 	slli	r2,r2,2
    a3dc:	00c00074 	movhi	r3,1
    a3e0:	18ed9e04 	addi	r3,r3,-18824
    a3e4:	10c5883a 	add	r2,r2,r3
    a3e8:	00000106 	br	a3f0 <close+0x44>
    a3ec:	0005883a 	mov	r2,zero
    a3f0:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
    a3f4:	e0bfff17 	ldw	r2,-4(fp)
    a3f8:	10001926 	beq	r2,zero,a460 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    a3fc:	e0bfff17 	ldw	r2,-4(fp)
    a400:	10800017 	ldw	r2,0(r2)
    a404:	10800417 	ldw	r2,16(r2)
    a408:	10000626 	beq	r2,zero,a424 <close+0x78>
    a40c:	e0bfff17 	ldw	r2,-4(fp)
    a410:	10800017 	ldw	r2,0(r2)
    a414:	10800417 	ldw	r2,16(r2)
    a418:	e13fff17 	ldw	r4,-4(fp)
    a41c:	103ee83a 	callr	r2
    a420:	00000106 	br	a428 <close+0x7c>
    a424:	0005883a 	mov	r2,zero
    a428:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    a42c:	e13ffd17 	ldw	r4,-12(fp)
    a430:	000ac780 	call	ac78 <alt_release_fd>
    if (rval < 0)
    a434:	e0bffe17 	ldw	r2,-8(fp)
    a438:	1000070e 	bge	r2,zero,a458 <close+0xac>
    {
      ALT_ERRNO = -rval;
    a43c:	000a3700 	call	a370 <alt_get_errno>
    a440:	1007883a 	mov	r3,r2
    a444:	e0bffe17 	ldw	r2,-8(fp)
    a448:	0085c83a 	sub	r2,zero,r2
    a44c:	18800015 	stw	r2,0(r3)
      return -1;
    a450:	00bfffc4 	movi	r2,-1
    a454:	00000706 	br	a474 <close+0xc8>
    }
    return 0;
    a458:	0005883a 	mov	r2,zero
    a45c:	00000506 	br	a474 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    a460:	000a3700 	call	a370 <alt_get_errno>
    a464:	1007883a 	mov	r3,r2
    a468:	00801444 	movi	r2,81
    a46c:	18800015 	stw	r2,0(r3)
    return -1;
    a470:	00bfffc4 	movi	r2,-1
  }
}
    a474:	e037883a 	mov	sp,fp
    a478:	dfc00117 	ldw	ra,4(sp)
    a47c:	df000017 	ldw	fp,0(sp)
    a480:	dec00204 	addi	sp,sp,8
    a484:	f800283a 	ret

0000a488 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    a488:	defffe04 	addi	sp,sp,-8
    a48c:	df000115 	stw	fp,4(sp)
    a490:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    a494:	e03fff15 	stw	zero,-4(fp)
    a498:	00000506 	br	a4b0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    a49c:	e0bfff17 	ldw	r2,-4(fp)
    a4a0:	1000003b 	flushd	0(r2)
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    a4a4:	e0bfff17 	ldw	r2,-4(fp)
    a4a8:	10800804 	addi	r2,r2,32
    a4ac:	e0bfff15 	stw	r2,-4(fp)
    a4b0:	e0bfff17 	ldw	r2,-4(fp)
    a4b4:	10820030 	cmpltui	r2,r2,2048
    a4b8:	103ff81e 	bne	r2,zero,a49c <alt_dcache_flush_all+0x14>
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    a4bc:	0001883a 	nop
    a4c0:	0001883a 	nop
    a4c4:	e037883a 	mov	sp,fp
    a4c8:	df000017 	ldw	fp,0(sp)
    a4cc:	dec00104 	addi	sp,sp,4
    a4d0:	f800283a 	ret

0000a4d4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    a4d4:	defffc04 	addi	sp,sp,-16
    a4d8:	df000315 	stw	fp,12(sp)
    a4dc:	df000304 	addi	fp,sp,12
    a4e0:	e13fff15 	stw	r4,-4(fp)
    a4e4:	e17ffe15 	stw	r5,-8(fp)
    a4e8:	e1bffd15 	stw	r6,-12(fp)
  return len;
    a4ec:	e0bffd17 	ldw	r2,-12(fp)
}
    a4f0:	e037883a 	mov	sp,fp
    a4f4:	df000017 	ldw	fp,0(sp)
    a4f8:	dec00104 	addi	sp,sp,4
    a4fc:	f800283a 	ret

0000a500 <alt_get_errno>:
{
    a500:	defffe04 	addi	sp,sp,-8
    a504:	dfc00115 	stw	ra,4(sp)
    a508:	df000015 	stw	fp,0(sp)
    a50c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    a510:	d0a00717 	ldw	r2,-32740(gp)
    a514:	10000326 	beq	r2,zero,a524 <alt_get_errno+0x24>
    a518:	d0a00717 	ldw	r2,-32740(gp)
    a51c:	103ee83a 	callr	r2
    a520:	00000106 	br	a528 <alt_get_errno+0x28>
    a524:	d0a0c404 	addi	r2,gp,-31984
}
    a528:	e037883a 	mov	sp,fp
    a52c:	dfc00117 	ldw	ra,4(sp)
    a530:	df000017 	ldw	fp,0(sp)
    a534:	dec00204 	addi	sp,sp,8
    a538:	f800283a 	ret

0000a53c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    a53c:	defffa04 	addi	sp,sp,-24
    a540:	dfc00515 	stw	ra,20(sp)
    a544:	df000415 	stw	fp,16(sp)
    a548:	df000404 	addi	fp,sp,16
    a54c:	e13ffd15 	stw	r4,-12(fp)
    a550:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    a554:	e0bffd17 	ldw	r2,-12(fp)
    a558:	10000326 	beq	r2,zero,a568 <alt_dev_llist_insert+0x2c>
    a55c:	e0bffd17 	ldw	r2,-12(fp)
    a560:	10800217 	ldw	r2,8(r2)
    a564:	1000061e 	bne	r2,zero,a580 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    a568:	000a5000 	call	a500 <alt_get_errno>
    a56c:	1007883a 	mov	r3,r2
    a570:	00800584 	movi	r2,22
    a574:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    a578:	00bffa84 	movi	r2,-22
    a57c:	00001406 	br	a5d0 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    a580:	e0bffd17 	ldw	r2,-12(fp)
    a584:	e0fffc17 	ldw	r3,-16(fp)
    a588:	e0ffff15 	stw	r3,-4(fp)
    a58c:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    a590:	e0bffe17 	ldw	r2,-8(fp)
    a594:	e0ffff17 	ldw	r3,-4(fp)
    a598:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    a59c:	e0bfff17 	ldw	r2,-4(fp)
    a5a0:	10c00017 	ldw	r3,0(r2)
    a5a4:	e0bffe17 	ldw	r2,-8(fp)
    a5a8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    a5ac:	e0bfff17 	ldw	r2,-4(fp)
    a5b0:	10800017 	ldw	r2,0(r2)
    a5b4:	e0fffe17 	ldw	r3,-8(fp)
    a5b8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    a5bc:	e0bfff17 	ldw	r2,-4(fp)
    a5c0:	e0fffe17 	ldw	r3,-8(fp)
    a5c4:	10c00015 	stw	r3,0(r2)
}
    a5c8:	0001883a 	nop

  return 0;  
    a5cc:	0005883a 	mov	r2,zero
}
    a5d0:	e037883a 	mov	sp,fp
    a5d4:	dfc00117 	ldw	ra,4(sp)
    a5d8:	df000017 	ldw	fp,0(sp)
    a5dc:	dec00204 	addi	sp,sp,8
    a5e0:	f800283a 	ret

0000a5e4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    a5e4:	defffe04 	addi	sp,sp,-8
    a5e8:	dfc00115 	stw	ra,4(sp)
    a5ec:	df000015 	stw	fp,0(sp)
    a5f0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    a5f4:	01420004 	movi	r5,2048
    a5f8:	0009883a 	mov	r4,zero
    a5fc:	000b1080 	call	b108 <alt_icache_flush>
#endif
}
    a600:	0001883a 	nop
    a604:	e037883a 	mov	sp,fp
    a608:	dfc00117 	ldw	ra,4(sp)
    a60c:	df000017 	ldw	fp,0(sp)
    a610:	dec00204 	addi	sp,sp,8
    a614:	f800283a 	ret

0000a618 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    a618:	defff904 	addi	sp,sp,-28
    a61c:	dfc00615 	stw	ra,24(sp)
    a620:	df000515 	stw	fp,20(sp)
    a624:	df000504 	addi	fp,sp,20
    a628:	e13fff15 	stw	r4,-4(fp)
    a62c:	e17ffe15 	stw	r5,-8(fp)
    a630:	e1bffd15 	stw	r6,-12(fp)
    a634:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    a638:	e0800217 	ldw	r2,8(fp)
    a63c:	d8800015 	stw	r2,0(sp)
    a640:	e1fffc17 	ldw	r7,-16(fp)
    a644:	e1bffd17 	ldw	r6,-12(fp)
    a648:	e17ffe17 	ldw	r5,-8(fp)
    a64c:	e13fff17 	ldw	r4,-4(fp)
    a650:	000a7c80 	call	a7c8 <alt_iic_isr_register>
}  
    a654:	e037883a 	mov	sp,fp
    a658:	dfc00117 	ldw	ra,4(sp)
    a65c:	df000017 	ldw	fp,0(sp)
    a660:	dec00204 	addi	sp,sp,8
    a664:	f800283a 	ret

0000a668 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    a668:	defff904 	addi	sp,sp,-28
    a66c:	df000615 	stw	fp,24(sp)
    a670:	df000604 	addi	fp,sp,24
    a674:	e13ffb15 	stw	r4,-20(fp)
    a678:	e17ffa15 	stw	r5,-24(fp)
    a67c:	e0bffa17 	ldw	r2,-24(fp)
    a680:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
    a684:	0005303a 	rdctl	r2,status
    a688:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a68c:	e0fffe17 	ldw	r3,-8(fp)
    a690:	00bfff84 	movi	r2,-2
    a694:	1884703a 	and	r2,r3,r2
    a698:	1001703a 	wrctl	status,r2
  return context;
    a69c:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    a6a0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    a6a4:	00c00044 	movi	r3,1
    a6a8:	e0bfff17 	ldw	r2,-4(fp)
    a6ac:	1884983a 	sll	r2,r3,r2
    a6b0:	1007883a 	mov	r3,r2
    a6b4:	d0a0c817 	ldw	r2,-31968(gp)
    a6b8:	1884b03a 	or	r2,r3,r2
    a6bc:	d0a0c815 	stw	r2,-31968(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    a6c0:	d0a0c817 	ldw	r2,-31968(gp)
    a6c4:	100170fa 	wrctl	ienable,r2
    a6c8:	e0bffd17 	ldw	r2,-12(fp)
    a6cc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    a6d0:	e0bffc17 	ldw	r2,-16(fp)
    a6d4:	1001703a 	wrctl	status,r2
}
    a6d8:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
    a6dc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    a6e0:	e037883a 	mov	sp,fp
    a6e4:	df000017 	ldw	fp,0(sp)
    a6e8:	dec00104 	addi	sp,sp,4
    a6ec:	f800283a 	ret

0000a6f0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    a6f0:	defff904 	addi	sp,sp,-28
    a6f4:	df000615 	stw	fp,24(sp)
    a6f8:	df000604 	addi	fp,sp,24
    a6fc:	e13ffb15 	stw	r4,-20(fp)
    a700:	e17ffa15 	stw	r5,-24(fp)
    a704:	e0bffa17 	ldw	r2,-24(fp)
    a708:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
    a70c:	0005303a 	rdctl	r2,status
    a710:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a714:	e0fffe17 	ldw	r3,-8(fp)
    a718:	00bfff84 	movi	r2,-2
    a71c:	1884703a 	and	r2,r3,r2
    a720:	1001703a 	wrctl	status,r2
  return context;
    a724:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
    a728:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
    a72c:	00c00044 	movi	r3,1
    a730:	e0bfff17 	ldw	r2,-4(fp)
    a734:	1884983a 	sll	r2,r3,r2
    a738:	0084303a 	nor	r2,zero,r2
    a73c:	1007883a 	mov	r3,r2
    a740:	d0a0c817 	ldw	r2,-31968(gp)
    a744:	1884703a 	and	r2,r3,r2
    a748:	d0a0c815 	stw	r2,-31968(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    a74c:	d0a0c817 	ldw	r2,-31968(gp)
    a750:	100170fa 	wrctl	ienable,r2
    a754:	e0bffd17 	ldw	r2,-12(fp)
    a758:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    a75c:	e0bffc17 	ldw	r2,-16(fp)
    a760:	1001703a 	wrctl	status,r2
}
    a764:	0001883a 	nop
  return 0;
    a768:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    a76c:	e037883a 	mov	sp,fp
    a770:	df000017 	ldw	fp,0(sp)
    a774:	dec00104 	addi	sp,sp,4
    a778:	f800283a 	ret

0000a77c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    a77c:	defffc04 	addi	sp,sp,-16
    a780:	df000315 	stw	fp,12(sp)
    a784:	df000304 	addi	fp,sp,12
    a788:	e13ffe15 	stw	r4,-8(fp)
    a78c:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    a790:	000530fa 	rdctl	r2,ienable
    a794:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    a798:	00c00044 	movi	r3,1
    a79c:	e0bffd17 	ldw	r2,-12(fp)
    a7a0:	1884983a 	sll	r2,r3,r2
    a7a4:	1007883a 	mov	r3,r2
    a7a8:	e0bfff17 	ldw	r2,-4(fp)
    a7ac:	1884703a 	and	r2,r3,r2
    a7b0:	1004c03a 	cmpne	r2,r2,zero
    a7b4:	10803fcc 	andi	r2,r2,255
}
    a7b8:	e037883a 	mov	sp,fp
    a7bc:	df000017 	ldw	fp,0(sp)
    a7c0:	dec00104 	addi	sp,sp,4
    a7c4:	f800283a 	ret

0000a7c8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    a7c8:	defff504 	addi	sp,sp,-44
    a7cc:	dfc00a15 	stw	ra,40(sp)
    a7d0:	df000915 	stw	fp,36(sp)
    a7d4:	df000904 	addi	fp,sp,36
    a7d8:	e13ffa15 	stw	r4,-24(fp)
    a7dc:	e17ff915 	stw	r5,-28(fp)
    a7e0:	e1bff815 	stw	r6,-32(fp)
    a7e4:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
    a7e8:	00bffa84 	movi	r2,-22
    a7ec:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    a7f0:	e0bff917 	ldw	r2,-28(fp)
    a7f4:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    a7f8:	e0bffe17 	ldw	r2,-8(fp)
    a7fc:	10800808 	cmpgei	r2,r2,32
    a800:	1000251e 	bne	r2,zero,a898 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
    a804:	0005303a 	rdctl	r2,status
    a808:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a80c:	e0fffc17 	ldw	r3,-16(fp)
    a810:	00bfff84 	movi	r2,-2
    a814:	1884703a 	and	r2,r3,r2
    a818:	1001703a 	wrctl	status,r2
  return context;
    a81c:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    a820:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
    a824:	e0bffe17 	ldw	r2,-8(fp)
    a828:	100890fa 	slli	r4,r2,3
    a82c:	e0fff817 	ldw	r3,-32(fp)
    a830:	00800074 	movhi	r2,1
    a834:	2085883a 	add	r2,r4,r2
    a838:	10eeca15 	stw	r3,-17624(r2)
    alt_irq[id].context = isr_context;
    a83c:	e0bffe17 	ldw	r2,-8(fp)
    a840:	100890fa 	slli	r4,r2,3
    a844:	e0fff717 	ldw	r3,-36(fp)
    a848:	00800074 	movhi	r2,1
    a84c:	2085883a 	add	r2,r4,r2
    a850:	10eecb15 	stw	r3,-17620(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    a854:	e0bff817 	ldw	r2,-32(fp)
    a858:	10000526 	beq	r2,zero,a870 <alt_iic_isr_register+0xa8>
    a85c:	e0bffe17 	ldw	r2,-8(fp)
    a860:	100b883a 	mov	r5,r2
    a864:	e13ffa17 	ldw	r4,-24(fp)
    a868:	000a6680 	call	a668 <alt_ic_irq_enable>
    a86c:	00000406 	br	a880 <alt_iic_isr_register+0xb8>
    a870:	e0bffe17 	ldw	r2,-8(fp)
    a874:	100b883a 	mov	r5,r2
    a878:	e13ffa17 	ldw	r4,-24(fp)
    a87c:	000a6f00 	call	a6f0 <alt_ic_irq_disable>
    a880:	e0bfff15 	stw	r2,-4(fp)
    a884:	e0bffd17 	ldw	r2,-12(fp)
    a888:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    a88c:	e0bffb17 	ldw	r2,-20(fp)
    a890:	1001703a 	wrctl	status,r2
}
    a894:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
    a898:	e0bfff17 	ldw	r2,-4(fp)
}
    a89c:	e037883a 	mov	sp,fp
    a8a0:	dfc00117 	ldw	ra,4(sp)
    a8a4:	df000017 	ldw	fp,0(sp)
    a8a8:	dec00204 	addi	sp,sp,8
    a8ac:	f800283a 	ret

0000a8b0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    a8b0:	defff904 	addi	sp,sp,-28
    a8b4:	dfc00615 	stw	ra,24(sp)
    a8b8:	df000515 	stw	fp,20(sp)
    a8bc:	df000504 	addi	fp,sp,20
    a8c0:	e13ffe15 	stw	r4,-8(fp)
    a8c4:	e17ffd15 	stw	r5,-12(fp)
    a8c8:	e1bffc15 	stw	r6,-16(fp)
    a8cc:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
    a8d0:	e1bffb17 	ldw	r6,-20(fp)
    a8d4:	e17ffc17 	ldw	r5,-16(fp)
    a8d8:	e13ffd17 	ldw	r4,-12(fp)
    a8dc:	000ab180 	call	ab18 <open>
    a8e0:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
    a8e4:	e0bfff17 	ldw	r2,-4(fp)
    a8e8:	10002016 	blt	r2,zero,a96c <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
    a8ec:	e0ffff17 	ldw	r3,-4(fp)
    a8f0:	1805883a 	mov	r2,r3
    a8f4:	1085883a 	add	r2,r2,r2
    a8f8:	10c5883a 	add	r2,r2,r3
    a8fc:	100490ba 	slli	r2,r2,2
    a900:	00c00074 	movhi	r3,1
    a904:	10c7883a 	add	r3,r2,r3
    a908:	18ed9e17 	ldw	r3,-18824(r3)
    a90c:	e0bffe17 	ldw	r2,-8(fp)
    a910:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    a914:	e0ffff17 	ldw	r3,-4(fp)
    a918:	1805883a 	mov	r2,r3
    a91c:	1085883a 	add	r2,r2,r2
    a920:	10c5883a 	add	r2,r2,r3
    a924:	100490ba 	slli	r2,r2,2
    a928:	00c00074 	movhi	r3,1
    a92c:	10c7883a 	add	r3,r2,r3
    a930:	18ed9f17 	ldw	r3,-18820(r3)
    a934:	e0bffe17 	ldw	r2,-8(fp)
    a938:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    a93c:	e0ffff17 	ldw	r3,-4(fp)
    a940:	1805883a 	mov	r2,r3
    a944:	1085883a 	add	r2,r2,r2
    a948:	10c5883a 	add	r2,r2,r3
    a94c:	100490ba 	slli	r2,r2,2
    a950:	00c00074 	movhi	r3,1
    a954:	10c7883a 	add	r3,r2,r3
    a958:	18eda017 	ldw	r3,-18816(r3)
    a95c:	e0bffe17 	ldw	r2,-8(fp)
    a960:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    a964:	e13fff17 	ldw	r4,-4(fp)
    a968:	000ac780 	call	ac78 <alt_release_fd>
  }
} 
    a96c:	0001883a 	nop
    a970:	e037883a 	mov	sp,fp
    a974:	dfc00117 	ldw	ra,4(sp)
    a978:	df000017 	ldw	fp,0(sp)
    a97c:	dec00204 	addi	sp,sp,8
    a980:	f800283a 	ret

0000a984 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    a984:	defffb04 	addi	sp,sp,-20
    a988:	dfc00415 	stw	ra,16(sp)
    a98c:	df000315 	stw	fp,12(sp)
    a990:	df000304 	addi	fp,sp,12
    a994:	e13fff15 	stw	r4,-4(fp)
    a998:	e17ffe15 	stw	r5,-8(fp)
    a99c:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    a9a0:	01c07fc4 	movi	r7,511
    a9a4:	01800044 	movi	r6,1
    a9a8:	e17fff17 	ldw	r5,-4(fp)
    a9ac:	01000074 	movhi	r4,1
    a9b0:	212da104 	addi	r4,r4,-18812
    a9b4:	000a8b00 	call	a8b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    a9b8:	01c07fc4 	movi	r7,511
    a9bc:	000d883a 	mov	r6,zero
    a9c0:	e17ffe17 	ldw	r5,-8(fp)
    a9c4:	01000074 	movhi	r4,1
    a9c8:	212d9e04 	addi	r4,r4,-18824
    a9cc:	000a8b00 	call	a8b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    a9d0:	01c07fc4 	movi	r7,511
    a9d4:	01800044 	movi	r6,1
    a9d8:	e17ffd17 	ldw	r5,-12(fp)
    a9dc:	01000074 	movhi	r4,1
    a9e0:	212da404 	addi	r4,r4,-18800
    a9e4:	000a8b00 	call	a8b0 <alt_open_fd>
}  
    a9e8:	0001883a 	nop
    a9ec:	e037883a 	mov	sp,fp
    a9f0:	dfc00117 	ldw	ra,4(sp)
    a9f4:	df000017 	ldw	fp,0(sp)
    a9f8:	dec00204 	addi	sp,sp,8
    a9fc:	f800283a 	ret

0000aa00 <alt_get_errno>:
{
    aa00:	defffe04 	addi	sp,sp,-8
    aa04:	dfc00115 	stw	ra,4(sp)
    aa08:	df000015 	stw	fp,0(sp)
    aa0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    aa10:	d0a00717 	ldw	r2,-32740(gp)
    aa14:	10000326 	beq	r2,zero,aa24 <alt_get_errno+0x24>
    aa18:	d0a00717 	ldw	r2,-32740(gp)
    aa1c:	103ee83a 	callr	r2
    aa20:	00000106 	br	aa28 <alt_get_errno+0x28>
    aa24:	d0a0c404 	addi	r2,gp,-31984
}
    aa28:	e037883a 	mov	sp,fp
    aa2c:	dfc00117 	ldw	ra,4(sp)
    aa30:	df000017 	ldw	fp,0(sp)
    aa34:	dec00204 	addi	sp,sp,8
    aa38:	f800283a 	ret

0000aa3c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    aa3c:	defffd04 	addi	sp,sp,-12
    aa40:	df000215 	stw	fp,8(sp)
    aa44:	df000204 	addi	fp,sp,8
    aa48:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    aa4c:	e0bffe17 	ldw	r2,-8(fp)
    aa50:	10800217 	ldw	r2,8(r2)
    aa54:	10d00034 	orhi	r3,r2,16384
    aa58:	e0bffe17 	ldw	r2,-8(fp)
    aa5c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    aa60:	e03fff15 	stw	zero,-4(fp)
    aa64:	00002306 	br	aaf4 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    aa68:	e0ffff17 	ldw	r3,-4(fp)
    aa6c:	1805883a 	mov	r2,r3
    aa70:	1085883a 	add	r2,r2,r2
    aa74:	10c5883a 	add	r2,r2,r3
    aa78:	100490ba 	slli	r2,r2,2
    aa7c:	00c00074 	movhi	r3,1
    aa80:	10c7883a 	add	r3,r2,r3
    aa84:	18ed9e17 	ldw	r3,-18824(r3)
    aa88:	e0bffe17 	ldw	r2,-8(fp)
    aa8c:	10800017 	ldw	r2,0(r2)
    aa90:	1880151e 	bne	r3,r2,aae8 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    aa94:	e0ffff17 	ldw	r3,-4(fp)
    aa98:	1805883a 	mov	r2,r3
    aa9c:	1085883a 	add	r2,r2,r2
    aaa0:	10c5883a 	add	r2,r2,r3
    aaa4:	100490ba 	slli	r2,r2,2
    aaa8:	00c00074 	movhi	r3,1
    aaac:	10c7883a 	add	r3,r2,r3
    aab0:	18ada017 	ldw	r2,-18816(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
    aab4:	10000c0e 	bge	r2,zero,aae8 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
    aab8:	e0ffff17 	ldw	r3,-4(fp)
    aabc:	1805883a 	mov	r2,r3
    aac0:	1085883a 	add	r2,r2,r2
    aac4:	10c5883a 	add	r2,r2,r3
    aac8:	100490ba 	slli	r2,r2,2
    aacc:	00c00074 	movhi	r3,1
    aad0:	18ed9e04 	addi	r3,r3,-18824
    aad4:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    aad8:	e0fffe17 	ldw	r3,-8(fp)
    aadc:	18800226 	beq	r3,r2,aae8 <alt_file_locked+0xac>
    {
      return -EACCES;
    aae0:	00bffcc4 	movi	r2,-13
    aae4:	00000806 	br	ab08 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
    aae8:	e0bfff17 	ldw	r2,-4(fp)
    aaec:	10800044 	addi	r2,r2,1
    aaf0:	e0bfff15 	stw	r2,-4(fp)
    aaf4:	d0a00617 	ldw	r2,-32744(gp)
    aaf8:	1007883a 	mov	r3,r2
    aafc:	e0bfff17 	ldw	r2,-4(fp)
    ab00:	18bfd92e 	bgeu	r3,r2,aa68 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    ab04:	0005883a 	mov	r2,zero
}
    ab08:	e037883a 	mov	sp,fp
    ab0c:	df000017 	ldw	fp,0(sp)
    ab10:	dec00104 	addi	sp,sp,4
    ab14:	f800283a 	ret

0000ab18 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    ab18:	defff604 	addi	sp,sp,-40
    ab1c:	dfc00915 	stw	ra,36(sp)
    ab20:	df000815 	stw	fp,32(sp)
    ab24:	df000804 	addi	fp,sp,32
    ab28:	e13ffa15 	stw	r4,-24(fp)
    ab2c:	e17ff915 	stw	r5,-28(fp)
    ab30:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    ab34:	00bfffc4 	movi	r2,-1
    ab38:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
    ab3c:	00bffb44 	movi	r2,-19
    ab40:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
    ab44:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    ab48:	d1600404 	addi	r5,gp,-32752
    ab4c:	e13ffa17 	ldw	r4,-24(fp)
    ab50:	000aeb80 	call	aeb8 <alt_find_dev>
    ab54:	e0bfff15 	stw	r2,-4(fp)
    ab58:	e0bfff17 	ldw	r2,-4(fp)
    ab5c:	1000051e 	bne	r2,zero,ab74 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    ab60:	e13ffa17 	ldw	r4,-24(fp)
    ab64:	000af480 	call	af48 <alt_find_file>
    ab68:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
    ab6c:	00800044 	movi	r2,1
    ab70:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    ab74:	e0bfff17 	ldw	r2,-4(fp)
    ab78:	10002c26 	beq	r2,zero,ac2c <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
    ab7c:	e13fff17 	ldw	r4,-4(fp)
    ab80:	000b0500 	call	b050 <alt_get_fd>
    ab84:	e0bffe15 	stw	r2,-8(fp)
    ab88:	e0bffe17 	ldw	r2,-8(fp)
    ab8c:	1000030e 	bge	r2,zero,ab9c <open+0x84>
    {
      status = index;
    ab90:	e0bffe17 	ldw	r2,-8(fp)
    ab94:	e0bffd15 	stw	r2,-12(fp)
    ab98:	00002606 	br	ac34 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
    ab9c:	e0fffe17 	ldw	r3,-8(fp)
    aba0:	1805883a 	mov	r2,r3
    aba4:	1085883a 	add	r2,r2,r2
    aba8:	10c5883a 	add	r2,r2,r3
    abac:	100490ba 	slli	r2,r2,2
    abb0:	00c00074 	movhi	r3,1
    abb4:	18ed9e04 	addi	r3,r3,-18824
    abb8:	10c5883a 	add	r2,r2,r3
    abbc:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    abc0:	e0fff917 	ldw	r3,-28(fp)
    abc4:	00900034 	movhi	r2,16384
    abc8:	10bfffc4 	addi	r2,r2,-1
    abcc:	1886703a 	and	r3,r3,r2
    abd0:	e0bffb17 	ldw	r2,-20(fp)
    abd4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    abd8:	e0bffc17 	ldw	r2,-16(fp)
    abdc:	1000051e 	bne	r2,zero,abf4 <open+0xdc>
    abe0:	e13ffb17 	ldw	r4,-20(fp)
    abe4:	000aa3c0 	call	aa3c <alt_file_locked>
    abe8:	e0bffd15 	stw	r2,-12(fp)
    abec:	e0bffd17 	ldw	r2,-12(fp)
    abf0:	10001016 	blt	r2,zero,ac34 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    abf4:	e0bfff17 	ldw	r2,-4(fp)
    abf8:	10800317 	ldw	r2,12(r2)
    abfc:	10000826 	beq	r2,zero,ac20 <open+0x108>
    ac00:	e0bfff17 	ldw	r2,-4(fp)
    ac04:	10800317 	ldw	r2,12(r2)
    ac08:	e1fff817 	ldw	r7,-32(fp)
    ac0c:	e1bff917 	ldw	r6,-28(fp)
    ac10:	e17ffa17 	ldw	r5,-24(fp)
    ac14:	e13ffb17 	ldw	r4,-20(fp)
    ac18:	103ee83a 	callr	r2
    ac1c:	00000106 	br	ac24 <open+0x10c>
    ac20:	0005883a 	mov	r2,zero
    ac24:	e0bffd15 	stw	r2,-12(fp)
    ac28:	00000206 	br	ac34 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    ac2c:	00bffb44 	movi	r2,-19
    ac30:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    ac34:	e0bffd17 	ldw	r2,-12(fp)
    ac38:	1000090e 	bge	r2,zero,ac60 <open+0x148>
  {
    alt_release_fd (index);  
    ac3c:	e13ffe17 	ldw	r4,-8(fp)
    ac40:	000ac780 	call	ac78 <alt_release_fd>
    ALT_ERRNO = -status;
    ac44:	000aa000 	call	aa00 <alt_get_errno>
    ac48:	1007883a 	mov	r3,r2
    ac4c:	e0bffd17 	ldw	r2,-12(fp)
    ac50:	0085c83a 	sub	r2,zero,r2
    ac54:	18800015 	stw	r2,0(r3)
    return -1;
    ac58:	00bfffc4 	movi	r2,-1
    ac5c:	00000106 	br	ac64 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
    ac60:	e0bffe17 	ldw	r2,-8(fp)
}
    ac64:	e037883a 	mov	sp,fp
    ac68:	dfc00117 	ldw	ra,4(sp)
    ac6c:	df000017 	ldw	fp,0(sp)
    ac70:	dec00204 	addi	sp,sp,8
    ac74:	f800283a 	ret

0000ac78 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    ac78:	defffe04 	addi	sp,sp,-8
    ac7c:	df000115 	stw	fp,4(sp)
    ac80:	df000104 	addi	fp,sp,4
    ac84:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    ac88:	e0bfff17 	ldw	r2,-4(fp)
    ac8c:	108000d0 	cmplti	r2,r2,3
    ac90:	1000101e 	bne	r2,zero,acd4 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
    ac94:	e0ffff17 	ldw	r3,-4(fp)
    ac98:	1805883a 	mov	r2,r3
    ac9c:	1085883a 	add	r2,r2,r2
    aca0:	10c5883a 	add	r2,r2,r3
    aca4:	100490ba 	slli	r2,r2,2
    aca8:	00c00074 	movhi	r3,1
    acac:	10c7883a 	add	r3,r2,r3
    acb0:	182da015 	stw	zero,-18816(r3)
    alt_fd_list[fd].dev      = 0;
    acb4:	e0ffff17 	ldw	r3,-4(fp)
    acb8:	1805883a 	mov	r2,r3
    acbc:	1085883a 	add	r2,r2,r2
    acc0:	10c5883a 	add	r2,r2,r3
    acc4:	100490ba 	slli	r2,r2,2
    acc8:	00c00074 	movhi	r3,1
    accc:	10c7883a 	add	r3,r2,r3
    acd0:	182d9e15 	stw	zero,-18824(r3)
  }
}
    acd4:	0001883a 	nop
    acd8:	e037883a 	mov	sp,fp
    acdc:	df000017 	ldw	fp,0(sp)
    ace0:	dec00104 	addi	sp,sp,4
    ace4:	f800283a 	ret

0000ace8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    ace8:	defffa04 	addi	sp,sp,-24
    acec:	df000515 	stw	fp,20(sp)
    acf0:	df000504 	addi	fp,sp,20
    acf4:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
    acf8:	0005303a 	rdctl	r2,status
    acfc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ad00:	e0fffc17 	ldw	r3,-16(fp)
    ad04:	00bfff84 	movi	r2,-2
    ad08:	1884703a 	and	r2,r3,r2
    ad0c:	1001703a 	wrctl	status,r2
  return context;
    ad10:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    ad14:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
    ad18:	e0bffb17 	ldw	r2,-20(fp)
    ad1c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    ad20:	e0bffd17 	ldw	r2,-12(fp)
    ad24:	10800017 	ldw	r2,0(r2)
    ad28:	e0fffd17 	ldw	r3,-12(fp)
    ad2c:	18c00117 	ldw	r3,4(r3)
    ad30:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    ad34:	e0bffd17 	ldw	r2,-12(fp)
    ad38:	10800117 	ldw	r2,4(r2)
    ad3c:	e0fffd17 	ldw	r3,-12(fp)
    ad40:	18c00017 	ldw	r3,0(r3)
    ad44:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    ad48:	e0bffd17 	ldw	r2,-12(fp)
    ad4c:	e0fffd17 	ldw	r3,-12(fp)
    ad50:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    ad54:	e0bffd17 	ldw	r2,-12(fp)
    ad58:	e0fffd17 	ldw	r3,-12(fp)
    ad5c:	10c00015 	stw	r3,0(r2)
} 
    ad60:	0001883a 	nop
    ad64:	e0bfff17 	ldw	r2,-4(fp)
    ad68:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    ad6c:	e0bffe17 	ldw	r2,-8(fp)
    ad70:	1001703a 	wrctl	status,r2
}
    ad74:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
    ad78:	0001883a 	nop
    ad7c:	e037883a 	mov	sp,fp
    ad80:	df000017 	ldw	fp,0(sp)
    ad84:	dec00104 	addi	sp,sp,4
    ad88:	f800283a 	ret

0000ad8c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    ad8c:	defffb04 	addi	sp,sp,-20
    ad90:	dfc00415 	stw	ra,16(sp)
    ad94:	df000315 	stw	fp,12(sp)
    ad98:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    ad9c:	d0a00917 	ldw	r2,-32732(gp)
    ada0:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    ada4:	d0a0ca17 	ldw	r2,-31960(gp)
    ada8:	10800044 	addi	r2,r2,1
    adac:	d0a0ca15 	stw	r2,-31960(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    adb0:	00002e06 	br	ae6c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    adb4:	e0bfff17 	ldw	r2,-4(fp)
    adb8:	10800017 	ldw	r2,0(r2)
    adbc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    adc0:	e0bfff17 	ldw	r2,-4(fp)
    adc4:	10800403 	ldbu	r2,16(r2)
    adc8:	10803fcc 	andi	r2,r2,255
    adcc:	10000426 	beq	r2,zero,ade0 <alt_tick+0x54>
    add0:	d0a0ca17 	ldw	r2,-31960(gp)
    add4:	1000021e 	bne	r2,zero,ade0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    add8:	e0bfff17 	ldw	r2,-4(fp)
    addc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    ade0:	e0bfff17 	ldw	r2,-4(fp)
    ade4:	10800217 	ldw	r2,8(r2)
    ade8:	d0e0ca17 	ldw	r3,-31960(gp)
    adec:	18801d36 	bltu	r3,r2,ae64 <alt_tick+0xd8>
    adf0:	e0bfff17 	ldw	r2,-4(fp)
    adf4:	10800403 	ldbu	r2,16(r2)
    adf8:	10803fcc 	andi	r2,r2,255
    adfc:	1000191e 	bne	r2,zero,ae64 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    ae00:	e0bfff17 	ldw	r2,-4(fp)
    ae04:	10800317 	ldw	r2,12(r2)
    ae08:	e0ffff17 	ldw	r3,-4(fp)
    ae0c:	18c00517 	ldw	r3,20(r3)
    ae10:	1809883a 	mov	r4,r3
    ae14:	103ee83a 	callr	r2
    ae18:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    ae1c:	e0bffd17 	ldw	r2,-12(fp)
    ae20:	1000031e 	bne	r2,zero,ae30 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    ae24:	e13fff17 	ldw	r4,-4(fp)
    ae28:	000ace80 	call	ace8 <alt_alarm_stop>
    ae2c:	00000d06 	br	ae64 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    ae30:	e0bfff17 	ldw	r2,-4(fp)
    ae34:	10c00217 	ldw	r3,8(r2)
    ae38:	e0bffd17 	ldw	r2,-12(fp)
    ae3c:	1887883a 	add	r3,r3,r2
    ae40:	e0bfff17 	ldw	r2,-4(fp)
    ae44:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    ae48:	e0bfff17 	ldw	r2,-4(fp)
    ae4c:	10c00217 	ldw	r3,8(r2)
    ae50:	d0a0ca17 	ldw	r2,-31960(gp)
    ae54:	1880032e 	bgeu	r3,r2,ae64 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    ae58:	e0bfff17 	ldw	r2,-4(fp)
    ae5c:	00c00044 	movi	r3,1
    ae60:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    ae64:	e0bffe17 	ldw	r2,-8(fp)
    ae68:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
    ae6c:	e0ffff17 	ldw	r3,-4(fp)
    ae70:	d0a00904 	addi	r2,gp,-32732
    ae74:	18bfcf1e 	bne	r3,r2,adb4 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    ae78:	0001883a 	nop
}
    ae7c:	0001883a 	nop
    ae80:	e037883a 	mov	sp,fp
    ae84:	dfc00117 	ldw	ra,4(sp)
    ae88:	df000017 	ldw	fp,0(sp)
    ae8c:	dec00204 	addi	sp,sp,8
    ae90:	f800283a 	ret

0000ae94 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    ae94:	deffff04 	addi	sp,sp,-4
    ae98:	df000015 	stw	fp,0(sp)
    ae9c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    aea0:	000170fa 	wrctl	ienable,zero
}
    aea4:	0001883a 	nop
    aea8:	e037883a 	mov	sp,fp
    aeac:	df000017 	ldw	fp,0(sp)
    aeb0:	dec00104 	addi	sp,sp,4
    aeb4:	f800283a 	ret

0000aeb8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    aeb8:	defffa04 	addi	sp,sp,-24
    aebc:	dfc00515 	stw	ra,20(sp)
    aec0:	df000415 	stw	fp,16(sp)
    aec4:	df000404 	addi	fp,sp,16
    aec8:	e13ffd15 	stw	r4,-12(fp)
    aecc:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
    aed0:	e0bffc17 	ldw	r2,-16(fp)
    aed4:	10800017 	ldw	r2,0(r2)
    aed8:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    aedc:	e13ffd17 	ldw	r4,-12(fp)
    aee0:	00095800 	call	9580 <strlen>
    aee4:	10800044 	addi	r2,r2,1
    aee8:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    aeec:	00000d06 	br	af24 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    aef0:	e0bfff17 	ldw	r2,-4(fp)
    aef4:	10800217 	ldw	r2,8(r2)
    aef8:	e0fffe17 	ldw	r3,-8(fp)
    aefc:	180d883a 	mov	r6,r3
    af00:	e17ffd17 	ldw	r5,-12(fp)
    af04:	1009883a 	mov	r4,r2
    af08:	000b2500 	call	b250 <memcmp>
    af0c:	1000021e 	bne	r2,zero,af18 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    af10:	e0bfff17 	ldw	r2,-4(fp)
    af14:	00000706 	br	af34 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    af18:	e0bfff17 	ldw	r2,-4(fp)
    af1c:	10800017 	ldw	r2,0(r2)
    af20:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
    af24:	e0ffff17 	ldw	r3,-4(fp)
    af28:	e0bffc17 	ldw	r2,-16(fp)
    af2c:	18bff01e 	bne	r3,r2,aef0 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
    af30:	0005883a 	mov	r2,zero
}
    af34:	e037883a 	mov	sp,fp
    af38:	dfc00117 	ldw	ra,4(sp)
    af3c:	df000017 	ldw	fp,0(sp)
    af40:	dec00204 	addi	sp,sp,8
    af44:	f800283a 	ret

0000af48 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    af48:	defffb04 	addi	sp,sp,-20
    af4c:	dfc00415 	stw	ra,16(sp)
    af50:	df000315 	stw	fp,12(sp)
    af54:	df000304 	addi	fp,sp,12
    af58:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    af5c:	d0a00217 	ldw	r2,-32760(gp)
    af60:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    af64:	00003106 	br	b02c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    af68:	e0bfff17 	ldw	r2,-4(fp)
    af6c:	10800217 	ldw	r2,8(r2)
    af70:	1009883a 	mov	r4,r2
    af74:	00095800 	call	9580 <strlen>
    af78:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    af7c:	e0bfff17 	ldw	r2,-4(fp)
    af80:	10c00217 	ldw	r3,8(r2)
    af84:	e0bffe17 	ldw	r2,-8(fp)
    af88:	10bfffc4 	addi	r2,r2,-1
    af8c:	1885883a 	add	r2,r3,r2
    af90:	10800003 	ldbu	r2,0(r2)
    af94:	10803fcc 	andi	r2,r2,255
    af98:	1080201c 	xori	r2,r2,128
    af9c:	10bfe004 	addi	r2,r2,-128
    afa0:	10800bd8 	cmpnei	r2,r2,47
    afa4:	1000031e 	bne	r2,zero,afb4 <alt_find_file+0x6c>
    {
      len -= 1;
    afa8:	e0bffe17 	ldw	r2,-8(fp)
    afac:	10bfffc4 	addi	r2,r2,-1
    afb0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    afb4:	e0bffe17 	ldw	r2,-8(fp)
    afb8:	e0fffd17 	ldw	r3,-12(fp)
    afbc:	1885883a 	add	r2,r3,r2
    afc0:	10800003 	ldbu	r2,0(r2)
    afc4:	10803fcc 	andi	r2,r2,255
    afc8:	1080201c 	xori	r2,r2,128
    afcc:	10bfe004 	addi	r2,r2,-128
    afd0:	10800be0 	cmpeqi	r2,r2,47
    afd4:	1000081e 	bne	r2,zero,aff8 <alt_find_file+0xb0>
    afd8:	e0bffe17 	ldw	r2,-8(fp)
    afdc:	e0fffd17 	ldw	r3,-12(fp)
    afe0:	1885883a 	add	r2,r3,r2
    afe4:	10800003 	ldbu	r2,0(r2)
    afe8:	10803fcc 	andi	r2,r2,255
    afec:	1080201c 	xori	r2,r2,128
    aff0:	10bfe004 	addi	r2,r2,-128
    aff4:	10000a1e 	bne	r2,zero,b020 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    aff8:	e0bfff17 	ldw	r2,-4(fp)
    affc:	10800217 	ldw	r2,8(r2)
    b000:	e0fffe17 	ldw	r3,-8(fp)
    b004:	180d883a 	mov	r6,r3
    b008:	e17ffd17 	ldw	r5,-12(fp)
    b00c:	1009883a 	mov	r4,r2
    b010:	000b2500 	call	b250 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
    b014:	1000021e 	bne	r2,zero,b020 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
    b018:	e0bfff17 	ldw	r2,-4(fp)
    b01c:	00000706 	br	b03c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    b020:	e0bfff17 	ldw	r2,-4(fp)
    b024:	10800017 	ldw	r2,0(r2)
    b028:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
    b02c:	e0ffff17 	ldw	r3,-4(fp)
    b030:	d0a00204 	addi	r2,gp,-32760
    b034:	18bfcc1e 	bne	r3,r2,af68 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
    b038:	0005883a 	mov	r2,zero
}
    b03c:	e037883a 	mov	sp,fp
    b040:	dfc00117 	ldw	ra,4(sp)
    b044:	df000017 	ldw	fp,0(sp)
    b048:	dec00204 	addi	sp,sp,8
    b04c:	f800283a 	ret

0000b050 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    b050:	defffc04 	addi	sp,sp,-16
    b054:	df000315 	stw	fp,12(sp)
    b058:	df000304 	addi	fp,sp,12
    b05c:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
    b060:	00bffa04 	movi	r2,-24
    b064:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    b068:	e03fff15 	stw	zero,-4(fp)
    b06c:	00001d06 	br	b0e4 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    b070:	e0ffff17 	ldw	r3,-4(fp)
    b074:	1805883a 	mov	r2,r3
    b078:	1085883a 	add	r2,r2,r2
    b07c:	10c5883a 	add	r2,r2,r3
    b080:	100490ba 	slli	r2,r2,2
    b084:	00c00074 	movhi	r3,1
    b088:	10c7883a 	add	r3,r2,r3
    b08c:	18ad9e17 	ldw	r2,-18824(r3)
    b090:	1000111e 	bne	r2,zero,b0d8 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    b094:	e0ffff17 	ldw	r3,-4(fp)
    b098:	1805883a 	mov	r2,r3
    b09c:	1085883a 	add	r2,r2,r2
    b0a0:	10c5883a 	add	r2,r2,r3
    b0a4:	100490ba 	slli	r2,r2,2
    b0a8:	e13ffd17 	ldw	r4,-12(fp)
    b0ac:	00c00074 	movhi	r3,1
    b0b0:	10c7883a 	add	r3,r2,r3
    b0b4:	192d9e15 	stw	r4,-18824(r3)
      if (i > alt_max_fd)
    b0b8:	d0e00617 	ldw	r3,-32744(gp)
    b0bc:	e0bfff17 	ldw	r2,-4(fp)
    b0c0:	1880020e 	bge	r3,r2,b0cc <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    b0c4:	e0bfff17 	ldw	r2,-4(fp)
    b0c8:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
    b0cc:	e0bfff17 	ldw	r2,-4(fp)
    b0d0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    b0d4:	00000706 	br	b0f4 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
    b0d8:	e0bfff17 	ldw	r2,-4(fp)
    b0dc:	10800044 	addi	r2,r2,1
    b0e0:	e0bfff15 	stw	r2,-4(fp)
    b0e4:	e0bfff17 	ldw	r2,-4(fp)
    b0e8:	10800810 	cmplti	r2,r2,32
    b0ec:	103fe01e 	bne	r2,zero,b070 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
    b0f0:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    b0f4:	e0bffe17 	ldw	r2,-8(fp)
}
    b0f8:	e037883a 	mov	sp,fp
    b0fc:	df000017 	ldw	fp,0(sp)
    b100:	dec00104 	addi	sp,sp,4
    b104:	f800283a 	ret

0000b108 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    b108:	defffb04 	addi	sp,sp,-20
    b10c:	df000415 	stw	fp,16(sp)
    b110:	df000404 	addi	fp,sp,16
    b114:	e13ffd15 	stw	r4,-12(fp)
    b118:	e17ffc15 	stw	r5,-16(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    b11c:	e0bffc17 	ldw	r2,-16(fp)
    b120:	10820070 	cmpltui	r2,r2,2049
    b124:	1000021e 	bne	r2,zero,b130 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    b128:	00820004 	movi	r2,2048
    b12c:	e0bffc15 	stw	r2,-16(fp)
  }

  end = ((char*) start) + len;
    b130:	e0fffd17 	ldw	r3,-12(fp)
    b134:	e0bffc17 	ldw	r2,-16(fp)
    b138:	1885883a 	add	r2,r3,r2
    b13c:	e0bffe15 	stw	r2,-8(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    b140:	e0bffd17 	ldw	r2,-12(fp)
    b144:	e0bfff15 	stw	r2,-4(fp)
    b148:	00000506 	br	b160 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    b14c:	e0bfff17 	ldw	r2,-4(fp)
    b150:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    b154:	e0bfff17 	ldw	r2,-4(fp)
    b158:	10800804 	addi	r2,r2,32
    b15c:	e0bfff15 	stw	r2,-4(fp)
    b160:	e0ffff17 	ldw	r3,-4(fp)
    b164:	e0bffe17 	ldw	r2,-8(fp)
    b168:	18bff836 	bltu	r3,r2,b14c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    b16c:	e0bffd17 	ldw	r2,-12(fp)
    b170:	108007cc 	andi	r2,r2,31
    b174:	10000226 	beq	r2,zero,b180 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    b178:	e0bfff17 	ldw	r2,-4(fp)
    b17c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    b180:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    b184:	0001883a 	nop
    b188:	e037883a 	mov	sp,fp
    b18c:	df000017 	ldw	fp,0(sp)
    b190:	dec00104 	addi	sp,sp,4
    b194:	f800283a 	ret

0000b198 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    b198:	defffe04 	addi	sp,sp,-8
    b19c:	df000115 	stw	fp,4(sp)
    b1a0:	df000104 	addi	fp,sp,4
    b1a4:	e13fff15 	stw	r4,-4(fp)
    b1a8:	e0bfff17 	ldw	r2,-4(fp)
    b1ac:	10bffe84 	addi	r2,r2,-6
    b1b0:	10c00428 	cmpgeui	r3,r2,16
    b1b4:	1800191e 	bne	r3,zero,b21c <alt_exception_cause_generated_bad_addr+0x84>
    b1b8:	100690ba 	slli	r3,r2,2
    b1bc:	00800074 	movhi	r2,1
    b1c0:	1885883a 	add	r2,r3,r2
    b1c4:	10ac7317 	ldw	r2,-20020(r2)
    b1c8:	1000683a 	jmp	r2
    b1cc:	0000b20c 	andi	zero,zero,712
    b1d0:	0000b20c 	andi	zero,zero,712
    b1d4:	0000b21c 	xori	zero,zero,712
    b1d8:	0000b21c 	xori	zero,zero,712
    b1dc:	0000b21c 	xori	zero,zero,712
    b1e0:	0000b20c 	andi	zero,zero,712
    b1e4:	0000b214 	movui	zero,712
    b1e8:	0000b21c 	xori	zero,zero,712
    b1ec:	0000b20c 	andi	zero,zero,712
    b1f0:	0000b20c 	andi	zero,zero,712
    b1f4:	0000b21c 	xori	zero,zero,712
    b1f8:	0000b20c 	andi	zero,zero,712
    b1fc:	0000b214 	movui	zero,712
    b200:	0000b21c 	xori	zero,zero,712
    b204:	0000b21c 	xori	zero,zero,712
    b208:	0000b20c 	andi	zero,zero,712
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    b20c:	00800044 	movi	r2,1
    b210:	00000306 	br	b220 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    b214:	0005883a 	mov	r2,zero
    b218:	00000106 	br	b220 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
    b21c:	0005883a 	mov	r2,zero
  }
}
    b220:	e037883a 	mov	sp,fp
    b224:	df000017 	ldw	fp,0(sp)
    b228:	dec00104 	addi	sp,sp,4
    b22c:	f800283a 	ret

0000b230 <exit>:
    b230:	defffe04 	addi	sp,sp,-8
    b234:	000b883a 	mov	r5,zero
    b238:	dc000015 	stw	r16,0(sp)
    b23c:	dfc00115 	stw	ra,4(sp)
    b240:	2021883a 	mov	r16,r4
    b244:	000b2800 	call	b280 <__call_exitprocs>
    b248:	8009883a 	mov	r4,r16
    b24c:	000b3ac0 	call	b3ac <_exit>

0000b250 <memcmp>:
    b250:	0007883a 	mov	r3,zero
    b254:	30c0021e 	bne	r6,r3,b260 <memcmp+0x10>
    b258:	0005883a 	mov	r2,zero
    b25c:	f800283a 	ret
    b260:	20c5883a 	add	r2,r4,r3
    b264:	18c00044 	addi	r3,r3,1
    b268:	28cf883a 	add	r7,r5,r3
    b26c:	10800003 	ldbu	r2,0(r2)
    b270:	39ffffc3 	ldbu	r7,-1(r7)
    b274:	11fff726 	beq	r2,r7,b254 <memcmp+0x4>
    b278:	11c5c83a 	sub	r2,r2,r7
    b27c:	f800283a 	ret

0000b280 <__call_exitprocs>:
    b280:	defff604 	addi	sp,sp,-40
    b284:	00800074 	movhi	r2,1
    b288:	dd800615 	stw	r22,24(sp)
    b28c:	15adfe17 	ldw	r22,-18440(r2)
    b290:	dd400515 	stw	r21,20(sp)
    b294:	dd000415 	stw	r20,16(sp)
    b298:	dfc00915 	stw	ra,36(sp)
    b29c:	df000815 	stw	fp,32(sp)
    b2a0:	ddc00715 	stw	r23,28(sp)
    b2a4:	dcc00315 	stw	r19,12(sp)
    b2a8:	dc800215 	stw	r18,8(sp)
    b2ac:	dc400115 	stw	r17,4(sp)
    b2b0:	dc000015 	stw	r16,0(sp)
    b2b4:	202b883a 	mov	r21,r4
    b2b8:	2829883a 	mov	r20,r5
    b2bc:	b4400d17 	ldw	r17,52(r22)
    b2c0:	88000726 	beq	r17,zero,b2e0 <__call_exitprocs+0x60>
    b2c4:	8c000117 	ldw	r16,4(r17)
    b2c8:	8cc02217 	ldw	r19,136(r17)
    b2cc:	84bfffc4 	addi	r18,r16,-1
    b2d0:	802090ba 	slli	r16,r16,2
    b2d4:	9c2f883a 	add	r23,r19,r16
    b2d8:	8c21883a 	add	r16,r17,r16
    b2dc:	90000c0e 	bge	r18,zero,b310 <__call_exitprocs+0x90>
    b2e0:	dfc00917 	ldw	ra,36(sp)
    b2e4:	df000817 	ldw	fp,32(sp)
    b2e8:	ddc00717 	ldw	r23,28(sp)
    b2ec:	dd800617 	ldw	r22,24(sp)
    b2f0:	dd400517 	ldw	r21,20(sp)
    b2f4:	dd000417 	ldw	r20,16(sp)
    b2f8:	dcc00317 	ldw	r19,12(sp)
    b2fc:	dc800217 	ldw	r18,8(sp)
    b300:	dc400117 	ldw	r17,4(sp)
    b304:	dc000017 	ldw	r16,0(sp)
    b308:	dec00a04 	addi	sp,sp,40
    b30c:	f800283a 	ret
    b310:	a0000726 	beq	r20,zero,b330 <__call_exitprocs+0xb0>
    b314:	9800041e 	bne	r19,zero,b328 <__call_exitprocs+0xa8>
    b318:	94bfffc4 	addi	r18,r18,-1
    b31c:	bdffff04 	addi	r23,r23,-4
    b320:	843fff04 	addi	r16,r16,-4
    b324:	003fed06 	br	b2dc <__call_exitprocs+0x5c>
    b328:	b8c01f17 	ldw	r3,124(r23)
    b32c:	1d3ffa1e 	bne	r3,r20,b318 <__call_exitprocs+0x98>
    b330:	89000117 	ldw	r4,4(r17)
    b334:	80c00117 	ldw	r3,4(r16)
    b338:	213fffc4 	addi	r4,r4,-1
    b33c:	24800f1e 	bne	r4,r18,b37c <__call_exitprocs+0xfc>
    b340:	8c800115 	stw	r18,4(r17)
    b344:	183ff426 	beq	r3,zero,b318 <__call_exitprocs+0x98>
    b348:	8f000117 	ldw	fp,4(r17)
    b34c:	98000526 	beq	r19,zero,b364 <__call_exitprocs+0xe4>
    b350:	00800044 	movi	r2,1
    b354:	148c983a 	sll	r6,r2,r18
    b358:	99004017 	ldw	r4,256(r19)
    b35c:	3108703a 	and	r4,r6,r4
    b360:	2000081e 	bne	r4,zero,b384 <__call_exitprocs+0x104>
    b364:	183ee83a 	callr	r3
    b368:	89000117 	ldw	r4,4(r17)
    b36c:	b0c00d17 	ldw	r3,52(r22)
    b370:	273fd21e 	bne	r4,fp,b2bc <__call_exitprocs+0x3c>
    b374:	88ffe826 	beq	r17,r3,b318 <__call_exitprocs+0x98>
    b378:	003fd006 	br	b2bc <__call_exitprocs+0x3c>
    b37c:	80000115 	stw	zero,4(r16)
    b380:	003ff006 	br	b344 <__call_exitprocs+0xc4>
    b384:	99404117 	ldw	r5,260(r19)
    b388:	b93fff17 	ldw	r4,-4(r23)
    b38c:	314c703a 	and	r6,r6,r5
    b390:	3000041e 	bne	r6,zero,b3a4 <__call_exitprocs+0x124>
    b394:	200b883a 	mov	r5,r4
    b398:	a809883a 	mov	r4,r21
    b39c:	183ee83a 	callr	r3
    b3a0:	003ff106 	br	b368 <__call_exitprocs+0xe8>
    b3a4:	183ee83a 	callr	r3
    b3a8:	003fef06 	br	b368 <__call_exitprocs+0xe8>

0000b3ac <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    b3ac:	defffd04 	addi	sp,sp,-12
    b3b0:	df000215 	stw	fp,8(sp)
    b3b4:	df000204 	addi	fp,sp,8
    b3b8:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    b3bc:	0001883a 	nop
    b3c0:	e0bffe17 	ldw	r2,-8(fp)
    b3c4:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    b3c8:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    b3cc:	10000226 	beq	r2,zero,b3d8 <_exit+0x2c>
    ALT_SIM_FAIL();
    b3d0:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
    b3d4:	00000106 	br	b3dc <_exit+0x30>
    ALT_SIM_PASS();
    b3d8:	002af0b0 	cmpltui	zero,zero,43970
}
    b3dc:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    b3e0:	003fff06 	br	b3e0 <_exit+0x34>
